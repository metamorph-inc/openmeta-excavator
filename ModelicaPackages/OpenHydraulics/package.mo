within ;
package OpenHydraulics "A free Modelica library that can be used to model hydraulic components and circuits."
  extends Modelica.Icons.Package;
import SI = Modelica.SIunits;
import Cv = Modelica.SIunits.Conversions;
import NonSI = Modelica.SIunits.Conversions.NonSIunits;


  package UsersGuide "User's Guide"

    class Contact "Contact"
      extends Modelica.Icons.Contact;
      annotation (Documentation(info="<html>
<h4><font color=\"#008000\" size=5>Contact</font></h4>
<p>
The development of the OpenHydraulics library is organized by<br><br>
    Prof. Chris Paredis<br>
    Georgia Institute of Technology<br>
    G.W. Woodruff School of Mechanical Engineering<br>
    813 Ferst Drive; MARC 256<br>
    Atlanta, GA 30332-0405, USA<br>
    email: <A HREF=\"mailto:chris.paredis@me.gatech.edu\">chris.paredis@me.gatech.edu</A><br>
</p>

<h4><font color=\"#008000\" size=5>Acknowledgements</font></h4>
<p>
The development of this library has been a collaborative effort 
and many have contributed:
</p>
<ul>
<li> Students: Jonathan Jobe, Thomas Johnson, Ben Lee </ul>
<p>
Funding for this effort was provided in part by:
<ul>
<li>John Deere & Co.</li>
<li>The Center for Compact and Efficient Fluid Power, supported by the National Science Foundation 
(USA) under Grant No. EEC-0540834</li>
</ul>
</p>
</html>
"));
    end Contact;

    class Licensing "Licensing"
      extends Modelica.Icons.Information;
      annotation (Documentation(info="<html>
<h4><font color=\"#008000\" size=5>Licensing</font></h4>
<p>
Licensed by Georgia Institute of Technology under the
<a href=\"http://www.modelica.org/licenses/ModelicaLicense2\"><b>Modelica License 2</b></a>.</p> 
<p><b>Copyright &copy; 2008-2013, Georgia Insitute of Technology</b>
</p>
<p>
This Modelica package is free software and the use is completely at your own risk; 
it can be redistributed and/or modified under the terms of the Modelica License 2. 
For license conditions (including the disclaimer of warranty) see 
<a href=\"modelica://Hydraulics.UsersGuide.ModelicaLicense2\">Hydraulics.UsersGuide.ModelicaLicense2</a> or visit 
<a href=\"http://www.modelica.org/licenses/ModelicaLicense2\">http://www.modelica.org/licenses/ModelicaLicense2</a>.
</p>
</html>
"));
    end Licensing;

    class ModelicaLicense2 "Modelica License 2"
      extends Modelica.Icons.Information;
      annotation (Documentation(info="<html>
<h4><font color=\"#008000\" size=5>The Modelica License 2</font></h4>
<p>
<strong>Preamble.</strong> The goal of this license is that Modelica related model libraries, software, images, documents, data files etc. can be used freely in the original or a modified form, in open source and in commercial environments (as long as the license conditions below are fulfilled, in particular sections 2c) and 2d). The Original Work is provided free of charge and the use is completely at your own risk. Developers of free Modelica packages are encouraged to utilize this license for their work. 
<p>
The Modelica License applies to any Original Work that contains the following licensing notice adjacent to the copyright notice(s) for this Original Work: 
<p>
<strong>Note.</strong> This is the standard Modelica License 2, except for the following changes: the parenthetical in paragraph 7., paragraph 5., and the addition of paragraph 15.d). 
<p>
<strong>Licensed by the Georgia Institute of Technology under the Modelica License 2 </strong> 
 
<h4>1. Definitions</h4>
<ol type=\"a\"><li>
\"License\" is this Modelica License.
</li><li>
\"Original Work\" is any work of authorship, including software, images, documents, data files, that contains the above licensing notice or that is packed together with a licensing notice referencing it. 
</li><li>
\"Licensor\" is the provider of the Original Work who has placed this licensing notice adjacent to the copyright notice(s) for the Original Work. The Original Work is either directly provided by the owner of the Original Work, or by a licensee of the owner. 
</li><li>
\"Derivative Work\" is any modification of the Original Work which represents, as a whole, an original work of authorship. For the matter of clarity and as examples:
<ol type=\"A\">
<li>
Derivative Work shall not include work that remains separable from the Original Work, as well as merely extracting a part of the Original Work without modifying it. 
</li><li>
Derivative Work shall not include (a) fixing of errors and/or (b) adding vendor specific Modelica annotations and/or (c) using a subset of the classes of a Modelica package, and/or (d) using a different representation, e.g., a binary representation. 
</li><li>
Derivative Work shall include classes that are copied from the Original Work where declarations, equations or the documentation are modified. 
</li><li>
Derivative Work shall include executables to simulate the models that are generated by a Modelica translator based on the Original Work (of a Modelica package). </li>
</ol>
</li>
<li>
\"Modified Work\" is any modification of the Original Work with the following exceptions: (a) fixing of errors and/or (b) adding vendor specific Modelica annotations and/or (c) using a subset of the classes of a Modelica package, and/or (d) using a different representation, e.g., a binary representation. 
</li><li>
\"Source Code\" means the preferred form of the Original Work for making modifications to it and all available documentation describing how to modify the Original Work. 
</li><li>
\"You\" means an individual or a legal entity exercising rights under, and complying with all of the terms of, this License. 
</li><li>
\"Modelica package\" means any Modelica library that is defined with the
 <b>package</b> &lt;Name&gt; ... <b>end</b> &lt;Name&gt;<b>;</b> Modelica language element.
</li>
</ol>
 
<h4>2. Grant of Copyright License</h4>
<p>
Licensor grants You a worldwide, royalty-free, non-exclusive, sublicensable license, for the duration of the copyright, to do the following: 
<ol type=\"a\">
<li>
To reproduce the Original Work in copies, either alone or as part of a collection. 
</li><li>
To create Derivative Works according to Section 1d) of this License. 
</li><li>
To distribute or communicate to the public copies of the <u>Original Work</u> or a <u>Derivative Work</u> under <u>this License</u>. No fee, neither as a copyright-license fee, nor as a selling fee for the copy as such may be charged under this License. Furthermore, a verbatim copy of this License must be included in any copy of the Original Work or a Derivative Work under this License. 
<br>
For the matter of clarity, it is permitted A) to distribute or communicate such copies as part of a (possible commercial) collection where other parts are provided under different licenses and a license fee is charged for the other parts only and B) to charge for mere printing and shipping costs. 
</li><li>
To distribute or communicate to the public copies of a <u>Derivative Work</u>, alternatively to Section 2c), under <u>any other license</u> of your choice, especially also under a license for commercial/proprietary software, as long as You comply with Sections 3, 4 and 8 below. 
<br>
For the matter of clarity, no restrictions regarding fees, either as to a copyright-license fee or as to a selling fee for the copy as such apply. 
</li><li>
To perform the Original Work publicly. 
</li><li>
To display the Original Work publicly. 
</li></ol><p>
<h4>3. Acceptance</h4>
<p>
Any use of the Original Work or a Derivative Work, or any action according to either Section 2a) to 2f) above constitutes Your acceptance of this License. 
<p>
<h4>4. Designation of Derivative Works and of Modified Works</h4>
 
<p>
The identifying designation of Derivative Work and of Modified Work must be different to the corresponding identifying designation of the Original Work. This means especially that the (root-level) name of a Modelica package under this license must be changed if the package is modified (besides fixing of errors, adding vendor specific Modelica annotations, using a subset of the classes of a Modelica package, or using another representation, e.g. a binary representation). <p>
 
<h4>5. [reserved]</h4>
<p>
<h4>6. Provision of Source Code</h4>
<p>Licensor agrees to provide You with a copy of the Source Code of the Original Work but reserves the right to decide freely on the manner of how the Original Work is provided. For the matter of clarity, Licensor might provide only a binary representation of the Original Work. In that case, You may (a) either reproduce the Source Code from the binary representation if this is possible (e.g., by performing a copy of an encrypted Modelica package, if encryption allows the copy operation) or (b) request the Source Code from the Licensor who will provide it to You. 
<p>
<h4>7. Exclusions from License Grant</h4>
<p>
Neither the names of Licensor (including, but not limited to, University of California, Lawrence Berkeley National Laboratory, U.S. Dept. of Energy, UC, LBNL, LBL, and DOE), nor the names of any contributors to the Original Work, nor any of their trademarks or service marks, may be used to endorse or promote products derived from this Original Work without express prior permission of the Licensor. Except as otherwise expressly stated in this License and in particular in Sections 2 and 5, nothing in this License grants any license to Licensor's trademarks, copyrights, patents, trade secrets or any other intellectual property, and no patent license is granted to make, use, sell, offer for sale, have made, or import embodiments of any patent claims. 
<p>
No license is granted to the trademarks of Licensor even if such trademarks are included in the Original Work, except as expressly stated in this License. Nothing in this License shall be interpreted to prohibit Licensor from licensing under terms different from this License any Original Work that Licensor otherwise would have a right to license. 
<p>
<h4>8. Attribution Rights</h4>
<p>
You must retain in the Source Code of the Original Work and of any Derivative Works that You create, all author, copyright, patent, or trademark notices, as well as any descriptive text identified therein as an \"Attribution Notice\". The same applies to the licensing notice of this License in the Original Work. For the matter of clarity, \"author notice\" means the notice that identifies the original author(s). 
<p>
You must cause the Source Code for any Derivative Works that You create to carry a prominent Attribution Notice reasonably calculated to inform recipients that You have modified the Original Work. 
<p>In case the Original Work or Derivative Work is not provided in Source Code, the Attribution Notices shall be appropriately displayed, e.g., in the documentation of the Derivative Work. <p>
 
<h4>9. Disclaimer of Warranty</h4>
<p><u><strong>The Original Work is provided under this License on an \"as is\" basis and without warranty, either express or implied, including, without limitation, the warranties of non-infringement, merchantability or fitness for a particular purpose. The entire risk as to the quality of the Original Work is with You.</strong></u> This disclaimer of warranty constitutes an essential part of this License. No license to the Original Work is granted by this License except under this disclaimer. 
<p>
<h4>10. Limitation of Liability</h4>
<p>Under no circumstances and under no legal theory, whether in tort (including negligence), contract, or otherwise, shall the Licensor, the owner or a licensee of the Original Work be liable to anyone for any direct, indirect, general, special, incidental, or consequential damages of any character arising as a result of this License or the use of the Original Work including, without limitation, damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses. This limitation of liability shall not apply to the extent applicable law prohibits such limitation. 
<p>
<h4>11. Termination</h4>
<p>
This License conditions your rights to undertake the activities listed in Section 2 and 5, including your right to create Derivative Works based upon the Original Work, and doing so without observing these terms and conditions is prohibited by copyright law and international treaty. Nothing in this License is intended to affect copyright exceptions and limitations. This License shall terminate immediately and You may no longer exercise any of the rights granted to You by this License upon your failure to observe the conditions of this license. 
<p>
<h4>12. Termination for Patent Action</h4>
<p>
This License shall terminate automatically and You may no longer exercise any of the rights granted to You by this License as of the date You commence an action, including a cross-claim or counterclaim, against Licensor, any owners of the Original Work or any licensee alleging that the Original Work infringes a patent. This termination provision shall not apply for an action alleging patent infringement through combinations of the Original Work under combination with other software or hardware.
<p>
<h4>13. Jurisdiction</h4>
<p>
Any action or suit relating to this License may be brought only in the courts of a jurisdiction wherein the Licensor resides and under the laws of that jurisdiction excluding its conflict-of-law provisions. The application of the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded. Any use of the Original Work outside the scope of this License or after its termination shall be subject to the requirements and penalties of copyright or patent law in the appropriate jurisdiction. This section shall survive the termination of this License. 
<p>
<h4>14. Attorneys' Fees</h4>
<p>
In any action to enforce the terms of this License or seeking damages relating thereto, the prevailing party shall be entitled to recover its costs and expenses, including, without limitation, reasonable attorneys' fees and costs incurred in connection with such action, including any appeal of such action. This section shall survive the termination of this License. 
<p>
<h4>15. Miscellaneous</h4>
<ol type=\"a\">
<li>If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. 
</li><li>
No verbal ancillary agreements have been made. Changes and additions to this License must appear in writing to be valid. This also applies to changing the clause pertaining to written form. 
</li><li>
You may use the Original Work in all ways not otherwise restricted or conditioned by this License or by law, and Licensor promises not to interfere with or be responsible for such uses by You. 
</li><li>
You are under no obligation whatsoever to provide any bug fixes, patches, or upgrades to the features, functionality or performance of the source code (\"Enhancements\") to anyone; however, if you choose to make your Enhancements available either publicly, or directly to Lawrence Berkeley National Laboratory, without imposing a separate written license agreement for such Enhancements, then you hereby grant the following license: a non-exclusive, royalty-free perpetual license to install, use, modify, prepare derivative works, incorporate into other computer software, distribute, and sublicense such enhancements or derivative works thereof, in binary and source code form. 
</li></ol>
<p>

</html>
"));
    end ModelicaLicense2;
      annotation (DocumentationClass=true, Documentation(info="<HTML>
<h3><font color=\"#008000\" size=5>User's guide of package Hydraulics</font></h3>
<p>
Library <b>Hydraulics</b> is a <b>free</b> Modelica package providing
components describing
<b>1-dimensional fluid flow</b> in hydraulic circuits. 
</p>
<p>
<b>Current Issues:</b>
</p>
<ul>
<li>The oil models are very simple and need to be expanded to reflect properties of commonly uses oils</li>
</ul>
</HTML>"));
  end UsersGuide;


  package Examples
  "Comprehensive examples of how the Hydraulics library can be used"
    extends Modelica.Icons.ExamplesPackage;

    package Excavator
      extends Modelica.Icons.ExamplesPackage;

      model DigCycleSimulation
        extends Modelica.Icons.Example;

        SubSystems.MechanicsBody_noFriction mechanicsBody(
          swing_phi_start=0,
          swing_initType=Modelica.Mechanics.MultiBody.Types.Init.PositionVelocity,
          boom_phi_start=0.87266462599716,
          arm_phi_start=-1.3962634015955,
          bucket_phi_start=0.34906585039887)
          annotation (Placement(transformation(extent={{10,-33},{98,46}},
                rotation=0)));
        OpenHydraulics.Examples.Excavator.SubSystems.HydraulicsSubSyst hydraulics(
            redeclare OpenHydraulics.Fluids.GenericOilSimple oil)
          annotation (Placement(transformation(extent={{-6,-18},{-46,22}},
                rotation=0)));
        inner Modelica.Mechanics.MultiBody.World world
          annotation (Placement(transformation(extent={{10,-60},{30,-40}},
                rotation=0)));
        OpenHydraulics.Examples.Excavator.SubSystems.DigCycleSeq digCycleSeq
          annotation (Placement(transformation(extent={{-98,-18},{-56,22}},
                rotation=0)));

      equation
        connect(hydraulics.ArmCylRod, mechanicsBody.cylArmRod) annotation (Line(
              points={{-30.8,22},{-30,22},{-30,50},{48,50},{48,33.9525},{
              48.1333,33.9525}},
                           color={0,127,0}));
        connect(hydraulics.ArmCylBase, mechanicsBody.cylArmBase) annotation (Line(
              points={{-26.8,22},{-26,22},{-26,46},{44,46},{44,33.9525},{
              44.2222,33.9525}},
                           color={0,127,0}));
        connect(world.frame_b, mechanicsBody.baseFrame) annotation (Line(
            points={{30,-50},{35.0311,-50},{35.0311,-20.36}},
            color={95,95,95},
            thickness=0.5));
        connect(hydraulics.BoomCylRodL, mechanicsBody.cylBoomLeftRod)
          annotation (Line(points={{-6,14.8},{10,14.8},{10,15.7825}}, color={0,
                127,0}));
        connect(hydraulics.BoomCylBaseL, mechanicsBody.cylBoomLeftBase)
          annotation (Line(points={{-6,10.8},{10,10.8},{10,11.8325}}, color={0,
                127,0}));
        connect(hydraulics.BoomCylRodR, mechanicsBody.cylBoomRightRod)
          annotation (Line(points={{-21.2,22},{-21.2,38},{2,38},{2,-26},{
              50.2844,-26},{50.2844,-21.3475}},
                                          color={0,127,0}));
        connect(hydraulics.BoomCylBaseR, mechanicsBody.cylBoomRightBase)
          annotation (Line(points={{-17.2,22},{-18,22},{-18,34},{0,34},{0,-30},
              {46,-30},{46,-21.3475},{46.3733,-21.3475}},  color={0,127,0}));
        connect(digCycleSeq.y1, hydraulics.Command) annotation (Line(points={{-53.9,2},
                {-50.85,2},{-47.8,2}},                     color={0,0,127}));
        connect(hydraulics.BucketCylBase, mechanicsBody.cylBucketBase)
          annotation (Line(points={{-37.2,22},{-38,22},{-38,54},{77.4667,54},{
              77.4667,33.9525}},   color={0,127,0}));
        connect(hydraulics.BucketCylRod, mechanicsBody.cylBucketRod) annotation (Line(
              points={{-41.2,22},{-42,22},{-42,58},{81.3778,58},{81.3778,
              33.9525}},
              color={0,127,0}));
        connect(hydraulics.SwingFlange, mechanicsBody.swingFlange) annotation (Line(
              points={{-9.2,22},{-9.2,30},{4,30},{4,-17.7925},{9.80444,-17.7925}},
              color={0,0,0}));
        annotation (Diagram(graphics),
          experiment(StopTime=20, Tolerance=1e-008),
          experimentSetupOutput);
      end DigCycleSimulation;

      package SubSystems
        extends Modelica.Icons.Package;

        model DigCycleSeq
          import Modelica.Constants.pi;

          // the parameters
          parameter Modelica.SIunits.Frequency bandwidth=10;
          parameter Modelica.SIunits.Time startTime=1
          "Time before excavator starts moving";
          parameter Real swingAmplitude = -1 "Amplitude of swing command";
          parameter Real boomAmplitude1 = -0.9
          "Amplitude of first boom command";
          parameter Real boomAmplitude2 = 0.5
          "Amplitude of second boom command";
          parameter Real armAmplitude1 = -1 "Amplitude of arm command";
          parameter Real armAmplitude2 = 0.3 "Amplitude of bucket command";
        //  parameter Real armAmplitude2 = 1 "Amplitude of bucket command";
          parameter Real bucketAmplitude1 = -0.7 "Amplitude of bucket command";
          parameter Real bucketAmplitude2 = 0.45 "Amplitude of bucket command";
          parameter Real bucketAmplitude3 = -1 "Amplitude of bucket command";

          // the components
          Modelica.Blocks.Tables.CombiTable1D swingTimeTable(                   table=[0,
                0; 1,0; 13,0; 14,swingAmplitude; 17,swingAmplitude; 18,0; 20,0])
            annotation (Placement(transformation(
                origin={-30,60},
                extent={{10,-10},{-10,10}},
                rotation=180)));
          Modelica.Blocks.Tables.CombiTable1D boomTimeTable(
                                   table=[0,0; 1,boomAmplitude1; 2,boomAmplitude1;
                3,0; 7,0; 8,boomAmplitude2; 11.5,boomAmplitude2; 12.5,0; 20,0])
            annotation (Placement(transformation(
                origin={-30,20},
                extent={{10,-10},{-10,10}},
                rotation=180)));
          Modelica.Blocks.Tables.CombiTable1D armTimeTable(table=[0,0;0.5,0; 1,
                armAmplitude1; 2,armAmplitude1; 3,0; 4.5,armAmplitude2; 6.5,
                armAmplitude2; 7.5,0; 20,0])
            annotation (Placement(transformation(
                origin={-30,-20},
                extent={{10,-10},{-10,10}},
                rotation=180)));
          Modelica.Blocks.Tables.CombiTable1D bucketTimeTable(table=[0,0;0.5,0; 1,bucketAmplitude1; 3,bucketAmplitude1; 4,
                0; 5,0; 6,bucketAmplitude2; 7,bucketAmplitude2; 9,0; 16,0; 16.3,
                bucketAmplitude3; 17,bucketAmplitude3; 18,0; 20,0])
            annotation (Placement(transformation(
                origin={-30,-60},
                extent={{10,-10},{-10,10}},
                rotation=180)));

          Modelica.Blocks.Continuous.SecondOrder swingFilter(w=2*pi*bandwidth)
            annotation (Placement(transformation(extent={{0,50},{20,70}},
                  rotation=0)));
          Modelica.Blocks.Continuous.SecondOrder boomFilter(w=2*pi*bandwidth)
            annotation (Placement(transformation(extent={{0,10},{20,30}},
                  rotation=0)));
          Modelica.Blocks.Continuous.SecondOrder armFilter(w=2*pi*bandwidth)
            annotation (Placement(transformation(extent={{0,-30},{20,-10}},
                  rotation=0)));
          Modelica.Blocks.Continuous.SecondOrder bucketFilter(w=2*pi*bandwidth)
            annotation (Placement(transformation(extent={{0,-70},{20,-50}},
                  rotation=0)));

          // auxiliary components
          Modelica.Blocks.Routing.Multiplex4 multiplex
            annotation (Placement(transformation(extent={{54,-16},{86,16}},
                  rotation=0)));
          Modelica.Blocks.Interfaces.RealOutput y1[4]
          "Connector of Real output signals"
            annotation (Placement(transformation(
                origin={110,0},
                extent={{14,-14},{-14,14}},
                rotation=180)));
      protected
          SI.Time t "Input to tables";

        equation
          t = if noEvent(time>startTime) then time-startTime else 0;
          swingTimeTable.u[1] = t;
          boomTimeTable.u[1] = t;
          armTimeTable.u[1] = t;
          bucketTimeTable.u[1] = t;

          connect(multiplex.y, y1)    annotation (Line(points={{87.6,0},{98,-3.1606e-021},
                  {98,1.77636e-015},{110,1.77636e-015}},               color={0,0,
                  127}));
          connect(swingTimeTable.y[1], swingFilter.u)
            annotation (Line(points={{-19,60},{-2,60}}, color={0,0,127}));
          connect(swingFilter.y, multiplex.u1[1]) annotation (Line(points={{21,60},
                  {34,60},{34,14.4},{50.8,14.4}}, color={0,0,127}));
          connect(boomTimeTable.y[1], boomFilter.u)
            annotation (Line(points={{-19,20},{-2,20}}, color={0,0,127}));
          connect(armTimeTable.y[1], armFilter.u)
            annotation (Line(points={{-19,-20},{-2,-20}}, color={0,0,127}));
          connect(bucketTimeTable.y[1],bucketFilter. u)
            annotation (Line(points={{-19,-60},{-2,-60}}, color={0,0,127}));
          connect(bucketFilter.y, multiplex.u4[1]) annotation (Line(points={{21,-60},
                  {36,-60},{36,-14.4},{50.8,-14.4}},      color={0,0,127}));
          connect(armFilter.y, multiplex.u3[1])    annotation (Line(points={{21,
                  -20},{28,-20},{28,-4.8},{50.8,-4.8}}, color={0,0,127}));
          connect(boomFilter.y, multiplex.u2[1])   annotation (Line(points={{21,
                  20},{28,20},{28,4.8},{50.8,4.8}}, color={0,0,127}));

          annotation (Diagram(graphics),
                               Icon(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics={
                Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{-100,60},{10,20}},
                  lineColor={0,0,0},
                  textString="Dig "),
                Text(
                  extent={{-100,20},{10,-20}},
                  lineColor={0,0,0},
                  textString="Cycle"),
                Text(
                  extent={{0,-12},{60,-28}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  textString="Arm"),
                Text(
                  extent={{60,28},{0,12}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  textString="Boom"),
                Text(
                  extent={{60,68},{0,52}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  textString="Swing"),
                Text(
                  extent={{0,-52},{60,-68}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  textString="Bucket"),
                Text(
                  extent={{-100,-20},{10,-60}},
                  lineColor={0,0,0},
                  textString="Traj"),
                Line(points={{60,60},{96,0}}, color={0,0,0}),
                Line(points={{96,0},{60,20}}, color={0,0,0}),
                Line(points={{96,0},{60,-20}}, color={0,0,0}),
                Line(points={{60,-60},{96,0}}, color={0,0,0})}));
        end DigCycleSeq;

        model HydraulicsSubSyst
          extends OpenHydraulics.Interfaces.PartialFluidCircuit;

          //parameter SI.
          parameter Modelica.SIunits.Length boom_s_init=1.19
          "Initial position of boom cylinder"
            annotation(Dialog(tab="Initialization",group="Actuator Positions"));
          parameter Modelica.SIunits.Length arm_s_init=0.71
          "Initial position of arm cylinder"
            annotation(Dialog(tab="Initialization",group="Actuator Positions"));
          parameter Modelica.SIunits.Length bucket_s_init=0.77
          "Initial position of bucket cylinder"
            annotation(Dialog(tab="Initialization",group="Actuator Positions"));

          // the main components
          OpenHydraulics.Components.Cylinders.DoubleActingCylinder boomCylRight(
            closedLength=2.48,
            boreDiameter=0.135,
            rodDiameter=0.05,
            pistonMass=10,
            s_init=boom_s_init,
            initType=Modelica.Mechanics.MultiBody.Types.Init.PositionVelocityAcceleration,
            fixRodPressure=true,
            strokeLength=1.25)
            annotation (Placement(transformation(extent={{-38,50},{-18,70}},
                  rotation=0)));

          OpenHydraulics.Components.Cylinders.DoubleActingCylinder boomCylLeft(
            strokeLength=1.25,
            closedLength=2.48,
            boreDiameter=0.135,
            rodDiameter=0.05,
            pistonMass=10,
            s_init=boom_s_init)
            annotation (Placement(transformation(
                origin={-80,54},
                extent={{-10,-10},{10,10}},
                rotation=90)));

          OpenHydraulics.Components.Cylinders.DoubleActingCylinder armCyl(
            strokeLength=1.64,
            closedLength=2.26,
            boreDiameter=0.145,
            rodDiameter=0.05,
            pistonMass=10,
            s_init=arm_s_init,
            initType=Modelica.Mechanics.MultiBody.Types.Init.PositionVelocityAcceleration,
            fixHeadPressure=true)
            annotation (Placement(transformation(extent={{16,50},{36,70}},
                  rotation=0)));

          OpenHydraulics.Components.Cylinders.DoubleActingCylinder bucketCyl(
            closedLength=2.30,
            boreDiameter=0.095,
            rodDiameter=0.05,
            s_init=bucket_s_init,
            pistonMass=5,
            initType=Modelica.Mechanics.MultiBody.Types.Init.PositionVelocityAcceleration,
            fixRodPressure=true,
            strokeLength=0.9)
            annotation (Placement(transformation(extent={{56,50},{76,70}},
                  rotation=0)));

         OpenHydraulics.Components.MotorsPumps.Motor swingMotor(Dconst=0.3)
            annotation (Placement(transformation(
                origin={-68,84},
                extent={{-10,-10},{10,10}},
                rotation=180)));

          // the valves
         OpenHydraulics.Examples.Excavator.SubSystems.LSValveUnit bucketValve(
            sizeOfInputs=4,
            inputIndex=4,
            q_nom=0.003)
            annotation (Placement(transformation(extent={{52,-40},{82,-10}},
                  rotation=0)));

         OpenHydraulics.Examples.Excavator.SubSystems.LSValveUnit armValve(
            sizeOfInputs=4,
            inputIndex=3,
            q_nom=0.01)
            annotation (Placement(transformation(extent={{10,-40},{40,-10}},
                  rotation=0)));

         OpenHydraulics.Examples.Excavator.SubSystems.LSValveUnit boomValve(
            sizeOfInputs=4,
            inputIndex=2,
            q_nom=0.01,
            q_fraction_A2T=0.4)
            annotation (Placement(transformation(extent={{-38,-40},{-8,-10}},
                  rotation=0)));

         OpenHydraulics.Examples.Excavator.SubSystems.LSValveUnit swingValve(
            sizeOfInputs=4,
            q_nom=0.01,
            q_fraction_A2T=0.6,
            q_fraction_B2T=0.6)
            annotation (Placement(transformation(extent={{-80,-40},{-50,-10}},
                  rotation=0)));

          // the LoadSensing pump and control circuitry
          Modelica.Mechanics.Rotational.Sources.ConstantSpeed constantSpeed(
              w_fixed=150,
              useSupport=false)
            annotation (Placement(transformation(extent={{-50,-90},{-30,-70}},
                  rotation=0)));
          OpenHydraulics.Examples.Excavator.SubSystems.PowerUnit powerUnit
            annotation (Placement(transformation(extent={{-16,-96},{16,-64}},
                  rotation=0)));

          // the lines and junctions
          OpenHydraulics.Components.Lines.NJunction jB
            annotation (Placement(transformation(extent={{-24,28},{-4,48}},
                  rotation=0)));

          OpenHydraulics.Components.Lines.NJunction jA
            annotation (Placement(transformation(extent={{-40,36},{-20,56}},
                  rotation=0)));

          OpenHydraulics.Components.Lines.Line boomLineB(
            L=1,
            D=0.05,
            lineBulkMod=1e7)
            annotation (Placement(transformation(
                origin={-14,22},
                extent={{-10,-10},{10,10}},
                rotation=90)));

          OpenHydraulics.Components.Lines.Line boomLineA(
            L=1,
            D=0.05,
            lineBulkMod=1e7)
            annotation (Placement(transformation(
                origin={-30,22},
                extent={{-10,-10},{10,10}},
                rotation=90)));

          OpenHydraulics.Components.Lines.Line bucketLineB(
            L=1,
            D=0.05,
            lineBulkMod=1e7)
            annotation (Placement(transformation(
                origin={74,22},
                extent={{-10,-10},{10,10}},
                rotation=90)));

          OpenHydraulics.Components.Lines.Line bucketLineA(
            L=1,
            D=0.05,
            lineBulkMod=1e7)
            annotation (Placement(transformation(
                origin={60,22},
                extent={{-10,-10},{10,10}},
                rotation=90)));

          OpenHydraulics.Components.Lines.Line armLineA(
            L=1,
            D=0.05,
            lineBulkMod=1e7)
            annotation (Placement(transformation(
                origin={18,22},
                extent={{-10,-10},{10,10}},
                rotation=90)));

          OpenHydraulics.Components.Lines.Line armLineB(
            L=1,
            D=0.05,
            lineBulkMod=1e7)
            annotation (Placement(transformation(
                origin={34,22},
                extent={{-10,-10},{10,10}},
                rotation=90)));

          OpenHydraulics.Components.Lines.Line swingLineA(
            L=2,
            D=0.03,
            lineBulkMod=1e8)
            annotation (Placement(transformation(
                origin={-72,22},
                extent={{-10,-10},{10,10}},
                rotation=90)));

          OpenHydraulics.Components.Lines.Line swingLineB(
            L=2,
            D=0.03,
            lineBulkMod=1e8)
            annotation (Placement(transformation(
                origin={-56,22},
                extent={{-10,-10},{10,10}},
                rotation=90)));

          Basic.OpenTank openTank
            annotation (Placement(transformation(extent={{80,-60},{100,-40}},
                  rotation=0)));

          // the connectors
          Modelica.Mechanics.Rotational.Interfaces.Flange_b SwingFlange
            annotation (Placement(transformation(extent={{-94,90},{-74,110}},
                  rotation=0)));
          Modelica.Mechanics.Translational.Interfaces.Flange_a BoomCylBaseR
            annotation (Placement(transformation(extent={{-54,90},{-34,110}},
                  rotation=0)));
          Modelica.Mechanics.Translational.Interfaces.Flange_b BoomCylRodR
            annotation (Placement(transformation(extent={{-34,90},{-14,110}},
                  rotation=0)));
          Modelica.Mechanics.Translational.Interfaces.Flange_a BoomCylBaseL
            annotation (Placement(transformation(extent={{-110,34},{-90,54}},
                  rotation=0)));
          Modelica.Mechanics.Translational.Interfaces.Flange_b BoomCylRodL
            annotation (Placement(transformation(extent={{-110,54},{-90,74}},
                  rotation=0)));
          Modelica.Mechanics.Translational.Interfaces.Flange_a ArmCylBase
            annotation (Placement(transformation(extent={{-6,90},{14,110}},
                  rotation=0)));
          Modelica.Mechanics.Translational.Interfaces.Flange_b ArmCylRod
            annotation (Placement(transformation(extent={{14,90},{34,110}},
                  rotation=0)));
          Modelica.Mechanics.Translational.Interfaces.Flange_a BucketCylBase
            annotation (Placement(transformation(extent={{46,90},{66,110}},
                  rotation=0)));
          Modelica.Mechanics.Translational.Interfaces.Flange_b BucketCylRod
            annotation (Placement(transformation(extent={{66,90},{86,110}},
                  rotation=0)));
          Modelica.Blocks.Interfaces.RealInput Command[4]
            annotation (Placement(transformation(
                origin={109,0},
                extent={{-15,-16},{15,16}},
                rotation=180)));

          OpenHydraulics.Components.Lines.Line pumpLine(
            D=0.05,
            L=2,
            lineBulkMod=1e8)
            annotation (Placement(transformation(
                origin={-50,-54},
                extent={{-10,-10},{10,10}},
                rotation=180)));

          OpenHydraulics.Components.Lines.Line tankLine(
            D=0.05,
            L=2,
            lineBulkMod=1e8)
            annotation (Placement(transformation(
                origin={-20,-48},
                extent={{-10,-10},{10,10}},
                rotation=180)));

        equation
          connect(boomCylRight.flange_a, BoomCylBaseR)
                                                     annotation (Line(points={{
                  -38,60},{-38,80},{-44,80},{-44,100}}, color={0,127,0}));
          connect(boomCylRight.flange_b, BoomCylRodR)
                                                  annotation (Line(points={{-18,
                  60},{-18,80},{-24,80},{-24,100}}, color={0,127,0}));
          connect(boomCylLeft.flange_a, BoomCylBaseL) annotation (Line(points={{
                  -80,44},{-100,44}}, color={0,127,0}));
          connect(boomCylLeft.flange_b, BoomCylRodL)
                                                   annotation (Line(points={{-80,
                  64},{-100,64}}, color={0,127,0}));
          connect(armCyl.flange_a, ArmCylBase)        annotation (Line(points={{
                  16,60},{16,80},{4,80},{4,100}}, color={0,127,0}));
          connect(armCyl.flange_b, ArmCylRod)      annotation (Line(points={{36,
                  60},{36,80},{24,80},{24,100}}, color={0,127,0}));
          connect(bucketCyl.flange_a, BucketCylBase)  annotation (Line(points={{
                  56,60},{56,100}}, color={0,127,0}));
          connect(bucketCyl.flange_b, BucketCylRod)
                                                   annotation (Line(points={{76,
                  60},{76,100}}, color={0,127,0}));
          connect(swingMotor.flange_b, SwingFlange)
                                                annotation (Line(points={{-77.8,
                  84},{-84,84},{-84,100}}, color={0,0,0}));
          connect(swingValve.portLS1, boomValve.portLS2) annotation (Line(
              points={{-50,-22},{-38,-22}},
              color={255,0,0},
              pattern=LinePattern.Dash));
          connect(boomValve.portLS1, armValve.portLS2)
            annotation (Line(
              points={{-8,-22},{10,-22}},
              color={255,0,0},
              pattern=LinePattern.Dash));
          connect(armValve.portLS1, bucketValve.portLS2)
            annotation (Line(
              points={{40,-22},{52,-22}},
              color={255,0,0},
              pattern=LinePattern.Dash));
          connect(swingValve.portP1, boomValve.portP2) annotation (Line(points={{
                  -50,-31},{-38,-31}}, color={255,0,0}));
          connect(swingValve.portT1, boomValve.portT2) annotation (Line(points={{
                  -50,-37},{-38,-37}}, color={255,0,0}));
          connect(boomValve.portP1, armValve.portP2) annotation (Line(points={{-8,
                  -31},{10,-31}}, color={255,0,0}));
          connect(boomValve.portT1, armValve.portT2) annotation (Line(points={{-8,
                  -37},{10,-37}}, color={255,0,0}));
          connect(armValve.portP1, bucketValve.portP2) annotation (Line(points={{
                  40,-31},{52,-31}}, color={255,0,0}));
          connect(armValve.portT1, bucketValve.portT2) annotation (Line(points={{
                  40,-37},{52,-37}}, color={255,0,0}));
          connect(constantSpeed.flange, powerUnit.flange_a) annotation (Line(
                points={{-30,-80},{-16,-80}}, color={0,0,0}));
          connect(powerUnit.portLS, swingValve.portLS2) annotation (Line(
              points={{-9.6,-64},{-10,-62},{-10,-60},{-94,-60},{-94,-22},{-80,-22}},
              color={255,0,0},
              pattern=LinePattern.Dash));

          connect(jA.port[2], boomCylRight.port_a) annotation (Line(points={{-30,
                  46},{-30,52},{-36,52}}, color={255,0,0}));
          connect(jA.port[3], boomCylLeft.port_a) annotation (Line(points={{-30,
                46.6667},{-30,46},{-72,46}},   color={255,0,0}));
          connect(jB.port[2], boomCylRight.port_b) annotation (Line(points={{-14,
                  38},{-14,52},{-20,52}}, color={255,0,0}));
          connect(jB.port[3], boomCylLeft.port_b) annotation (Line(points={{-14,
                38.6667},{-14,38},{-46,38},{-46,62},{-72,62}},   color={255,0,0}));
          connect(boomValve.portB, boomLineB.port_a)
                                                 annotation (Line(points={{-15.2,
                  -10},{-14,-10},{-14,12}}, color={255,0,0}));
          connect(boomValve.portA, boomLineA.port_a)
                                                 annotation (Line(points={{-30.8,
                  -10},{-30,-10},{-30,12}}, color={255,0,0}));
          connect(boomLineA.port_b, jA.port[1])
                                            annotation (Line(points={{-30,32},{
                -30,45.3333}},   color={255,0,0}));
          connect(boomLineB.port_b, jB.port[1])
                                            annotation (Line(points={{-14,32},{
                -14,37.3333}},   color={255,0,0}));
          connect(bucketValve.portA, bucketLineA.port_a)
                                                   annotation (Line(points={{59.2,
                  -10},{60,-10},{60,12}}, color={255,0,0}));
          connect(bucketValve.portB, bucketLineB.port_a)
                                                   annotation (Line(points={{74.8,
                  -10},{74,-10},{74,12}}, color={255,0,0}));
          connect(bucketLineA.port_b, bucketCyl.port_a)
                                                  annotation (Line(points={{60,32},
                  {58,32},{58,52}}, color={255,0,0}));
          connect(bucketLineB.port_b, bucketCyl.port_b)
            annotation (Line(points={{74,32},{74,52}}, color={255,0,0}));
          connect(armValve.portA, armLineA.port_a)
                                                annotation (Line(points={{17.2,
                  -10},{18,-10},{18,12}}, color={255,0,0}));
          connect(armValve.portB, armLineB.port_a)
                                                annotation (Line(points={{32.8,
                  -10},{34,-10},{34,12}}, color={255,0,0}));
          connect(armLineB.port_b, armCyl.port_b)
            annotation (Line(points={{34,32},{34,52}}, color={255,0,0}));
          connect(armLineA.port_b, armCyl.port_a)
            annotation (Line(points={{18,32},{18,52}}, color={255,0,0}));
          connect(swingValve.portA, swingLineA.port_a)
                                                  annotation (Line(points={{-72.8,
                  -10},{-72,-10},{-72,12}}, color={255,0,0}));
          connect(swingValve.portB, swingLineB.port_a)
                                                  annotation (Line(points={{-57.2,
                  -10},{-56,-10},{-56,12}}, color={255,0,0}));
          connect(swingLineA.port_b, swingMotor.portB)
                                            annotation (Line(points={{-72,32},{
                  -68,32},{-68,74}}, color={255,0,0}));
          connect(swingLineB.port_b, swingMotor.portA)
                                             annotation (Line(points={{-56,32},{
                  -56,94},{-68,94}}, color={255,0,0}));
          connect(bucketValve.y, armValve.u) annotation (Line(points={{51.1,-14.5},
                  {40.9,-14.5}}, color={0,0,127}));
          connect(armValve.y, boomValve.u) annotation (Line(points={{9.1,-14.5},{
                  -7.1,-14.5}}, color={0,0,127}));
          connect(boomValve.y, swingValve.u) annotation (Line(points={{-38.9,
                  -14.5},{-49.1,-14.5}}, color={0,0,127}));
          connect(Command, bucketValve.u) annotation (Line(points={{109,0},{90,0},
                  {90,-14.5},{82.9,-14.5}}, color={0,0,127}));
          connect(bucketValve.portLS1, openTank.port) annotation (Line(
              points={{82,-22},{90,-22},{90,-40}},
              color={255,0,0},
              pattern=LinePattern.Dash));
          connect(powerUnit.portT, tankLine.port_a) annotation (Line(points={{9.6,
                  -64},{10,-64},{10,-48},{-10,-48}}, color={255,0,0}));
          connect(tankLine.port_b, swingValve.portT2) annotation (Line(points={{
                  -30,-48},{-84,-48},{-84,-37},{-80,-37}}, color={255,0,0}));
          connect(powerUnit.portP, pumpLine.port_a) annotation (Line(points={{0,
                  -64},{0,-54},{-40,-54}}, color={255,0,0}));
          connect(pumpLine.port_b, swingValve.portP2) annotation (Line(points={{
                  -60,-54},{-90,-54},{-90,-31},{-80,-31}}, color={255,0,0}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}),
                              graphics),
                               Icon(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics={Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,255},
                  fillColor={255,128,0},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{-100,26},{100,-14}},
                  lineColor={0,0,255},
                  fillColor={170,213,255},
                  fillPattern=FillPattern.Solid,
                  textString="%name")}));
        end HydraulicsSubSyst;

        model PowerUnit

          Components.MotorsPumps.PCLSPump pclsPump(
            timeConst=0.01,
          Dmax=0.0005,
          p_margin=300000)
            annotation (                         Dialog, Placement(transformation(
                  extent={{-10,-10},{10,10}}, rotation=0)));

          OpenHydraulics.Components.Volumes.CircuitTank circuitTank
            annotation (Placement(transformation(extent={{40,-50},{20,-30}},
                  rotation=0)));

          OpenHydraulics.Components.Valves.ReliefValve reliefValve(dp_relief=3e7,
              dp_open=3.1e7)
            annotation (Placement(transformation(extent={{20,30},{40,50}},
                  rotation=0)));

          OpenHydraulics.Components.Lines.NJunction j1(n_ports=3)
            annotation (Placement(transformation(extent={{-10,30},{10,50}},
                  rotation=0)));

          OpenHydraulics.Components.Lines.NJunction j2(n_ports=3)
            annotation (Placement(transformation(extent={{50,30},{70,50}},
                  rotation=0)));

          // the ports
          OpenHydraulics.Interfaces.FluidPort portP
            annotation (Placement(transformation(extent={{-6,94},{6,106}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort portT
            annotation (Placement(transformation(extent={{54,94},{66,106}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort portLS
            annotation (Placement(transformation(extent={{-66,94},{-54,106}},
                  rotation=0)));
          Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a
          "(left) driving flange (flange axis directed INTO cut plane)"
            annotation (Placement(transformation(extent={{-110,-10},{-90,10}},
                  rotation=0)));

          extends OpenHydraulics.Interfaces.PartialFluidComponent;
        equation
          connect(circuitTank.port_b, pclsPump.portT)
            annotation (Line(points={{20,-40},{0,-40},{0,-10}}, color={255,0,0}));
          connect(pclsPump.portP, j1.port[1]) annotation (Line(points={{0,10},{
                0,39.3333}},
                           color={255,0,0}));
          connect(circuitTank.port_a, j2.port[1]) annotation (Line(points={{40,-40},
                {60,-40},{60,39.3333}},      color={255,0,0}));
          connect(j2.port[3], reliefValve.port_b) annotation (Line(points={{60,
                40.6667},{60,40},{40,40}}, color={255,0,0}));
          connect(j1.port[3], reliefValve.port_a) annotation (Line(points={{0,
                40.6667},{0,40},{20,40}}, color={255,0,0}));
          connect(j1.port[2], portP) annotation (Line(points={{0,40},{0,100}},
                color={255,0,0}));
          connect(j2.port[2], portT) annotation (Line(points={{60,40},{60,100}},
                color={255,0,0}));
          connect(pclsPump.flange_a, flange_a) annotation (Line(points={{-10,0},{
                  -100,0}}, color={0,0,0}));
          connect(portLS, pclsPump.portLS) annotation (Line(points={{-60,100},{
                -60,-20},{-8,-20},{-8,-8}},   color={255,0,0}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}),
                              graphics),
                               Icon(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics={
                Text(
                  extent={{-80,92},{-40,68}},
                  lineColor={255,0,0},
                  textString="LS"),
                Text(
                  extent={{-20,92},{20,68}},
                  lineColor={255,0,0},
                  textString="P"),
                Text(
                  extent={{40,92},{80,68}},
                  lineColor={255,0,0},
                  textString="T"),
                Text(
                  extent={{-100,50},{100,10}},
                  lineColor={0,0,0},
                  pattern=LinePattern.None,
                  textString="Power Unit"),
                Rectangle(extent={{-100,100},{100,-100}}, lineColor={0,0,0}),
                Text(
                  extent={{-100,-10},{100,-50}},
                  lineColor={0,0,255},
                  textString="%name")}));
        end PowerUnit;

        model LSValveUnit

          // sizing parameters
          parameter SI.VolumeFlowRate q_nom = 0.001
          "Nominal flow rate at dp_nom"
            annotation(Dialog(tab="Sizing"));
          parameter SI.Pressure dp_nom = 3e5 "Nominal dp for metering curve"
            annotation(Dialog(tab="Sizing"));

          parameter Real q_fraction_P2A = 1 "Fraction of nominal flow rate"
            annotation(Dialog(tab="Sizing",group="Advanced Metering"));
          parameter Real q_fraction_P2B = 1 "Fraction of nominal flow rate"
            annotation(Dialog(tab="Sizing",group="Advanced Metering"));
          parameter Real q_fraction_A2T = 1 "Fraction of nominal flow rate"
            annotation(Dialog(tab="Sizing",group="Advanced Metering"));
          parameter Real q_fraction_B2T = 1 "Fraction of nominal flow rate"
            annotation(Dialog(tab="Sizing",group="Advanced Metering"));

          // dynamic response parameters
          parameter SI.Frequency bandwidth = 10
          "Bandwidth of 2nd order response"
            annotation(Dialog(tab="Dynamics"));
          parameter Real dampCoeff = 1
          "Damping coefficient of 2nd order response"
            annotation(Dialog(tab="Dynamics"));

          // initialization parameters
          parameter Boolean fixPressureA = false
          "True if pressure at port is fixed"
          annotation(Dialog(tab="Initialization",group="Pressures"));
          parameter Boolean fixPressureB = false
          "True if pressure at port is fixed"
          annotation(Dialog(tab="Initialization",group="Pressures"));

          // the components

          OpenHydraulics.Components.Valves.ShuttleValve shuttleValve(q_nom=0.01)
            annotation (Placement(transformation(
                origin={0,30},
                extent={{10,-10},{-10,10}},
                rotation=270)));

          // configuration components
          OpenHydraulics.Components.Valves.DirectionalValves.V4_3CCLSHydAntiCavitation
            valve4_3pos_wRelief(
            bandwidth=bandwidth,
            dampCoeff=dampCoeff,
            q_nom=q_nom,
            dp_nom=dp_nom,
            q_fraction_P2A=q_fraction_P2A,
            q_fraction_P2B=q_fraction_P2B,
            q_fraction_A2T=q_fraction_A2T,
            q_fraction_B2T=q_fraction_B2T,
            j1(V=0))
            annotation (
            Dialog(tab="Config Options"), Placement(transformation(extent={{-10,
                    -8},{10,12}}, rotation=0)));

          OpenHydraulics.Components.Lines.NJunction j1(n_ports=3)
            annotation (Placement(transformation(extent={{-14,-50},{6,-30}},
                  rotation=0)));

          OpenHydraulics.Components.Lines.NJunction j2(n_ports=3)
            annotation (Placement(transformation(extent={{-6,-90},{14,-70}},
                  rotation=0)));

          // the connectors
          OpenHydraulics.Interfaces.FluidPort portA(p(start=p_init, fixed=
                  fixPressureA))
            annotation (Placement(transformation(extent={{-58,94},{-46,106}},
                  rotation=0)));

          OpenHydraulics.Interfaces.FluidPort portB(p(start=p_init, fixed=
                  fixPressureB))
            annotation (Placement(transformation(extent={{46,94},{58,106}},
                  rotation=0)));

          OpenHydraulics.Interfaces.FluidPort portP2
            annotation (Placement(transformation(extent={{-106,-46},{-94,-34}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort portT2
            annotation (Placement(transformation(extent={{-106,-86},{-94,-74}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort portP1
            annotation (Placement(transformation(extent={{94,-46},{106,-34}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort portT1
            annotation (Placement(transformation(extent={{94,-86},{106,-74}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort portLS1
            annotation (Placement(transformation(extent={{94,14},{106,26}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort portLS2
            annotation (Placement(transformation(extent={{-106,14},{-94,26}},
                  rotation=0)));
          Modelica.Blocks.Interfaces.RealInput u[sizeOfInputs]
            annotation (Placement(transformation(
                origin={106,70},
                extent={{-14,-14},{14,14}},
                rotation=180)));
          parameter Integer sizeOfInputs=1 "Size of input array";
          Modelica.Blocks.Interfaces.RealOutput y[sizeOfInputs]
            annotation (Placement(transformation(
                origin={-106,70},
                extent={{-10,-10},{10,10}},
                rotation=180)));
          parameter Integer inputIndex=1 "Index of command for this valve";

          extends OpenHydraulics.Interfaces.PartialFluidComponent;
        equation
          connect(valve4_3pos_wRelief.portLS, shuttleValve.PortA) annotation (Line(
                points={{0,10},{0,20},{-1.83697e-015,20}},color={255,0,0}));
          connect(portLS1, shuttleValve.PortB) annotation (Line(points={{100,20},
                  {60,20},{60,50},{0,50},{0,40},{1.83697e-015,40}},  color={255,0,
                  0}));
          connect(shuttleValve.PortC, portLS2) annotation (Line(points={{-8,30},{
                  -60,30},{-60,20},{-100,20}}, color={255,0,0}));
          connect(portP2, j1.port[1]) annotation (Line(points={{-100,-40},{-4,
                -40},{-4,-40.6667}},
                                color={255,0,0}));
          connect(portP1, j1.port[2]) annotation (Line(points={{100,-40},{48,-40},{48,-40},
                  {-4,-40}},                color={255,0,0}));
          connect(portT2, j2.port[1]) annotation (Line(points={{-100,-80},{4,
                -80},{4,-80.6667}},
                               color={255,0,0}));
          connect(portT1, j2.port[2]) annotation (Line(points={{100,-80},{4,-80},{4,-80}},
                               color={255,0,0}));
          connect(j2.port[3], valve4_3pos_wRelief.portT)
            annotation (Line(points={{4,-79.3333},{4,-6}},
                                                         color={255,0,0}));
          connect(u, y)
            annotation (Line(points={{106,70},{-106,70}}, color={0,0,127}));
          connect(u[inputIndex], valve4_3pos_wRelief.control)
                                                       annotation (Line(points={{
                  106,70},{68,70},{68,2},{11,2}}, color={0,0,127}));
          connect(valve4_3pos_wRelief.portA, portA) annotation (Line(points={{-4,
                  10},{-4,12},{-52,12},{-52,100}}, color={255,0,0}));
          connect(valve4_3pos_wRelief.portB, portB) annotation (Line(points={{4,
                  10},{4,12},{52,12},{52,100}}, color={255,0,0}));
          connect(valve4_3pos_wRelief.portP, j1.port[3]) annotation (Line(points={{-4,-6},
                {-4,-39.3333}},          color={255,0,0}));
          annotation (Diagram(graphics),
                               Icon(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics={
                Text(
                  extent={{62,24},{96,14}},
                  lineColor={255,0,0},
                  textString="LS"),
                Text(
                  extent={{-94,24},{-60,14}},
                  lineColor={255,0,0},
                  textString="LS"),
                Text(
                  extent={{72,-34},{98,-44}},
                  lineColor={255,0,0},
                  textString="P"),
                Text(
                  extent={{-92,-36},{-66,-46}},
                  lineColor={255,0,0},
                  textString="P"),
                Text(
                  extent={{70,-74},{96,-84}},
                  lineColor={255,0,0},
                  textString="T"),
                Text(
                  extent={{-94,-76},{-68,-86}},
                  lineColor={255,0,0},
                  textString="T"),
                Text(
                  extent={{-66,90},{-38,76}},
                  lineColor={255,0,0},
                  textString="A"),
                Text(
                  extent={{38,90},{68,76}},
                  lineColor={255,0,0},
                  textString="B"),
                Text(
                  extent={{-100,20},{100,-20}},
                  lineColor={0,0,0},
                  textString="Valve"),
                Rectangle(extent={{-100,100},{100,-100}}, lineColor={0,0,0}),
                Text(
                  extent={{-100,-20},{100,-60}},
                  lineColor={0,0,0},
                  textString="Unit"),
                Text(
                  extent={{-100,80},{100,40}},
                  lineColor={0,0,255},
                  textString="%name")}));
        end LSValveUnit;

        model MechanicsBody_noFriction
          import MB = Modelica.Mechanics.MultiBody;

          // the swing parameters
          parameter Modelica.Mechanics.MultiBody.Types.Init swing_initType=
              Modelica.Mechanics.MultiBody.Types.Init.Free
          "Type of initialization (defines usage of start values below)"
            annotation (Dialog(group="Swing",tab="Initialization"));
          parameter SI.Angle
            swing_phi_start=0
          "Initial value of rotation angle phi (fixed or guess value)"
            annotation (Evaluate=false, Dialog(group="Swing",tab="Initialization"));
          parameter SI.AngularVelocity
            swing_w_start =                                     0
          "Initial value of relative angular velocity w = der(phi)"
            annotation (Evaluate=false, Dialog(group="Swing",tab="Initialization"));
          parameter SI.AngularAcceleration
            swing_a_start =                                          0
          "Initial value of relative angular acceleration a = der(w)"
            annotation (Evaluate=false, Dialog(group="Swing",tab="Initialization"));

          // the boom parameters
          parameter Modelica.Mechanics.MultiBody.Types.Init boom_initType=
              Modelica.Mechanics.MultiBody.Types.Init.Free
          "Type of initialization (defines usage of start values below)"
            annotation (Dialog(group="Boom",tab="Initialization"));
          parameter SI.Angle
            boom_phi_start=0
          "Initial value of rotation angle phi (fixed or guess value)"
            annotation (Evaluate=false, Dialog(group="Boom",tab="Initialization"));
          parameter SI.AngularVelocity
            boom_w_start =                                     0
          "Initial value of relative angular velocity w = der(phi)"
            annotation (Evaluate=false, Dialog(group="Boom",tab="Initialization"));
          parameter SI.AngularAcceleration
            boom_a_start =                                          0
          "Initial value of relative angular acceleration a = der(w)"
            annotation (Evaluate=false, Dialog(group="Boom",tab="Initialization"));

          // the arm parameters
          parameter Modelica.Mechanics.MultiBody.Types.Init arm_initType=
              Modelica.Mechanics.MultiBody.Types.Init.Free
          "Type of initialization (defines usage of start values below)"
            annotation (Dialog(group="Arm",tab="Initialization"));
          parameter SI.Angle
            arm_phi_start=0
          "Initial value of rotation angle phi (fixed or guess value)"
            annotation (Evaluate=false, Dialog(group="Arm",tab="Initialization"));
          parameter SI.AngularVelocity
            arm_w_start = 0
          "Initial value of relative angular velocity w = der(phi)"
            annotation (Evaluate=false, Dialog(group="Arm",tab="Initialization"));
          parameter SI.AngularAcceleration
            arm_a_start =                                          0
          "Initial value of relative angular acceleration a = der(w)"
            annotation (Evaluate=false, Dialog(group="Arm",tab="Initialization"));

          // the bucket parameters
          parameter Modelica.Mechanics.MultiBody.Types.Init bucket_initType=
              Modelica.Mechanics.MultiBody.Types.Init.Free
          "Type of initialization (defines usage of start values below)"
            annotation (Dialog(group="Bucket",tab="Initialization"));
          parameter SI.Angle
            bucket_phi_start=0
          "Initial value of rotation angle phi (fixed or guess value)"
            annotation (Evaluate=false, Dialog(group="Bucket",tab="Initialization"));
          parameter SI.AngularVelocity
            bucket_w_start =                                     0
          "Initial value of relative angular velocity w = der(phi)"
            annotation (Evaluate=false, Dialog(group="Bucket",tab="Initialization"));
          parameter SI.AngularAcceleration
            bucket_a_start =                                          0
          "Initial value of relative angular acceleration a = der(w)"
            annotation (Evaluate=false, Dialog(group="Bucket",tab="Initialization"));

          outer MB.World world;

          // the joints
          Modelica.Mechanics.MultiBody.Joints.Revolute swingRevolute(
            n={0,1,0},
            useAxisFlange=true,
            a(start=swing_a_start, fixed=if ((
                  swing_initType) == Modelica.Mechanics.MultiBody.Types.Init.SteadyState or (swing_initType) == Modelica.Mechanics.MultiBody.Types.Init.VelocityAcceleration or (
                  swing_initType) == Modelica.Mechanics.MultiBody.Types.Init.PositionVelocityAcceleration) then true else false),
            phi(fixed=if ((swing_initType) == Modelica.Mechanics.MultiBody.Types.Init.PositionVelocity or (swing_initType) == Modelica.Mechanics.MultiBody.Types.Init.Position or (
                  swing_initType) == Modelica.Mechanics.MultiBody.Types.Init.PositionVelocityAcceleration) then true else false, start=
                  swing_phi_start),
            w(fixed=if ((swing_initType) == Modelica.Mechanics.MultiBody.Types.Init.PositionVelocity or (swing_initType) == Modelica.Mechanics.MultiBody.Types.Init.SteadyState or (
                  swing_initType) == Modelica.Mechanics.MultiBody.Types.Init.Velocity or (swing_initType) == Modelica.Mechanics.MultiBody.Types.Init.VelocityAcceleration or (
                  swing_initType) == Modelica.Mechanics.MultiBody.Types.Init.PositionVelocityAcceleration) then true else false, start=
                  swing_w_start))
          "revolute joint (plus motor) representing the swing function"
            annotation (Placement(transformation(
                origin={-110,-100},
                extent={{-10,-10},{10,10}},
                rotation=90)));
          Modelica.Mechanics.MultiBody.Joints.Revolute boomRevolute(
            a(start=boom_a_start, fixed=if (
                  boom_initType == Modelica.Mechanics.MultiBody.Types.Init.SteadyState or boom_initType == Modelica.Mechanics.MultiBody.Types.Init.VelocityAcceleration or boom_initType
                   == Modelica.Mechanics.MultiBody.Types.Init.PositionVelocityAcceleration) then true else false),
            phi(fixed=if (boom_initType == Modelica.Mechanics.MultiBody.Types.Init.PositionVelocity or boom_initType == Modelica.Mechanics.MultiBody.Types.Init.Position or
                  boom_initType == Modelica.Mechanics.MultiBody.Types.Init.PositionVelocityAcceleration) then true else false, start=
                  boom_phi_start),
            w(fixed=if (boom_initType == Modelica.Mechanics.MultiBody.Types.Init.PositionVelocity or boom_initType == Modelica.Mechanics.MultiBody.Types.Init.SteadyState or
                  boom_initType == Modelica.Mechanics.MultiBody.Types.Init.Velocity or boom_initType == Modelica.Mechanics.MultiBody.Types.Init.VelocityAcceleration or boom_initType
                   == Modelica.Mechanics.MultiBody.Types.Init.PositionVelocityAcceleration) then true else false, start=boom_w_start))
            annotation (Placement(transformation(extent={{-133,12},{-113,32}},
                  rotation=0)));
          Modelica.Mechanics.MultiBody.Joints.Revolute armRevolute(
            a(start=arm_a_start, fixed=if (
                  arm_initType == Modelica.Mechanics.MultiBody.Types.Init.SteadyState or arm_initType == Modelica.Mechanics.MultiBody.Types.Init.VelocityAcceleration or arm_initType ==
                  Modelica.Mechanics.MultiBody.Types.Init.PositionVelocityAcceleration) then true else false),
            phi(fixed=if (arm_initType == Modelica.Mechanics.MultiBody.Types.Init.PositionVelocity or arm_initType == Modelica.Mechanics.MultiBody.Types.Init.Position or
                  arm_initType == Modelica.Mechanics.MultiBody.Types.Init.PositionVelocityAcceleration) then true else false, start=arm_phi_start),
            w(fixed=if (arm_initType == Modelica.Mechanics.MultiBody.Types.Init.PositionVelocity or arm_initType == Modelica.Mechanics.MultiBody.Types.Init.SteadyState or
                  arm_initType == Modelica.Mechanics.MultiBody.Types.Init.Velocity or arm_initType == Modelica.Mechanics.MultiBody.Types.Init.VelocityAcceleration or arm_initType ==
                  Modelica.Mechanics.MultiBody.Types.Init.PositionVelocityAcceleration) then true else false, start=arm_w_start))
            annotation (Placement(transformation(extent={{3,12},{23,32}},
                  rotation=0)));
          Modelica.Mechanics.MultiBody.Joints.Revolute bucketRevolute(
            a(start=bucket_a_start, fixed=if (
                  bucket_initType == Modelica.Mechanics.MultiBody.Types.Init.SteadyState or bucket_initType == Modelica.Mechanics.MultiBody.Types.Init.VelocityAcceleration or
                  bucket_initType == Modelica.Mechanics.MultiBody.Types.Init.PositionVelocityAcceleration) then true else false),
            phi(fixed=if (bucket_initType == Modelica.Mechanics.MultiBody.Types.Init.PositionVelocity or bucket_initType == Modelica.Mechanics.MultiBody.Types.Init.Position or
                  bucket_initType == Modelica.Mechanics.MultiBody.Types.Init.PositionVelocityAcceleration) then true else false, start=
                  bucket_phi_start),
            w(fixed=if (bucket_initType == Modelica.Mechanics.MultiBody.Types.Init.PositionVelocity or bucket_initType == Modelica.Mechanics.MultiBody.Types.Init.SteadyState or
                  bucket_initType == Modelica.Mechanics.MultiBody.Types.Init.Velocity or bucket_initType == Modelica.Mechanics.MultiBody.Types.Init.VelocityAcceleration or
                  bucket_initType == Modelica.Mechanics.MultiBody.Types.Init.PositionVelocityAcceleration) then true else false, start=
                  bucket_w_start))
            annotation (Placement(transformation(extent={{159,12},{179,32}},
                  rotation=0)));
          MB.Joints.Assemblies.JointRRR jointRRR1(
            rRod2_ib={-0.67,
                           0.07,
                               0},
            rRod1_ia={0.62,0.36,0},
            phi_guess=0,
            phi_offset=-45) annotation (Placement(transformation(extent={{170,-71},
                    {199,-40}}, rotation=0)));

          // joint friction

          // the outside interface
          Modelica.Mechanics.Rotational.Interfaces.Flange_a swingFlange
          "input connector for rotation of swing function revolute joint"
            annotation (Placement(transformation(extent={{-211,-133},{-191,-113}},
                  rotation=0)));
          Modelica.Mechanics.Translational.Interfaces.Flange_b cylBoomRightBase
          "flange a of force in cylinder 1 (between carriage and boom)"
            annotation (Placement(transformation(extent={{-24,-151},{-4,-131}},
                  rotation=0)));
          Modelica.Mechanics.Translational.Interfaces.Flange_a cylBoomRightRod
          "flange b of force in cylinder 1 (between carriage and boom )"
            annotation (Placement(transformation(extent={{-4,-151},{16,-131}},
                  rotation=0)));
          Modelica.Mechanics.Translational.Interfaces.Flange_b cylBoomLeftBase
            annotation (Placement(transformation(extent={{-210,17},{-190,37}},
                  rotation=0)));
          Modelica.Mechanics.Translational.Interfaces.Flange_a cylBoomLeftRod
            annotation (Placement(transformation(extent={{-210,37},{-190,57}},
                  rotation=0)));
          Modelica.Mechanics.Translational.Interfaces.Flange_b cylArmBase
          "flange a of force in cylinder 2 (between boom and arm)"
            annotation (Placement(transformation(extent={{-35,129},{-15,149}},
                  rotation=0)));
          Modelica.Mechanics.Translational.Interfaces.Flange_a cylArmRod
          "flange b of force in cylinder 2 (between boom and arm)"
            annotation (Placement(transformation(extent={{-15,129},{5,149}},
                  rotation=0)));
          Modelica.Mechanics.Translational.Interfaces.Flange_b cylBucketBase
            annotation (Placement(transformation(extent={{135,129},{155,149}},
                  rotation=0)));
          Modelica.Mechanics.Translational.Interfaces.Flange_a cylBucketRod
            annotation (Placement(transformation(extent={{155,129},{175,149}},
                  rotation=0)));
          MB.Interfaces.Frame_a baseFrame
            annotation (Placement(transformation(
                origin={-72,-136},
                extent={{-16,-16},{16,16}},
                rotation=90)));

          // the actuators
          MB.Forces.LineForceWithMass cylBoomRight(lineShapeWidth=0.095)
          "hydraulic force in cylinder 1 (between carriage and boom)"
            annotation (Placement(transformation(
                origin={-33,-21},
                extent={{-10,10},{10,-10}},
                rotation=90)));
          MB.Forces.LineForceWithMass cylBoomLeft(lineShapeWidth=0.095)
          "hydraulic force in cylinder 1 (between carriage and boom)"
            annotation (Placement(transformation(
                origin={-167,41},
                extent={{-10,-10},{10,10}},
                rotation=90)));
          MB.Forces.LineForceWithMass cylArm(lineShapeType="cylinder", lineShapeWidth=0.095)
          "hydraulic force in cylinder 2 (between boom and arm)"
            annotation (Placement(transformation(extent={{-21,69},{-1,89}},
                  rotation=0)));
          MB.Forces.LineForceWithMass cylBucket(lineShapeType="cylinder",
              lineShapeWidth=0.095)
          "hydraulic force in cylinder 2 (between boom and arm)"
            annotation (Placement(transformation(
                origin={155.5,90},
                extent={{15.5,15},{-15.5,-15}},
                rotation=180)));

          // the linkages
          MB.Parts.FixedTranslation base(
            lengthDirection={1,0,0},
            r={0,1.70,0},
            shapeType="modelica://OpenHydraulics/Resources/Shapes/Excavator/base.stl",
            color={0,0,0}) "object model for the base of the excavator"
            annotation (Placement(transformation(
                origin={-110,-129},
                extent={{-11,-13},{11,13}},
                rotation=90)));
          MB.Parts.FixedTranslation carriage(
            shapeType="modelica://OpenHydraulics/Resources/Shapes/Excavator/carriage.stl",
            lengthDirection={1,0,0},
            widthDirection={0,1,0},
            r_shape={0,0,0},
            color={255,255,0},
            r={-0.164,1.428,0})
          "object model for the carriage of the excavator"
            annotation (Placement(transformation(
                origin={-141.5,-23},
                extent={{-26,-13.5},{26,13.5}},
                rotation=90)));
          MB.Parts.FixedTranslation boom(
            r={7.11,0,0},
            shapeType="modelica://OpenHydraulics/Resources/Shapes/Excavator/boom.stl",
            color={155,0,0}) "object model for the boom of the excavator"
            annotation (Placement(transformation(extent={{-79,7},{-20,37}},
                  rotation=0)));
          MB.Parts.FixedTranslation boom1LinkRight(r={0.655,
                                                           0.703,
                                                                0.296})
          "from swing motor to lifting cylinder cap side pivot"
            annotation (Placement(transformation(
                origin={-33.5,-57},
                extent={{-20,-8.5},{20,8.5}},
                rotation=90)));
          MB.Parts.FixedTranslation boom1LinkLeft(r={0.655,
                                                          0.703,
                                                               -0.296})
          "from swing motor to lifting cylinder cap side pivot"
            annotation (Placement(transformation(
                origin={-167.5,-17},
                extent={{-20,-8.5},{20,8.5}},
                rotation=90)));
          MB.Parts.FixedTranslation boom2LinkRight(r={2.85,1.18,0.3})
          "from boom-lift pivot to lifting cylinder rod side pivot"
            annotation (Placement(transformation(extent={{-77,-7},{-32,12}},
                  rotation=0)));
          MB.Parts.FixedTranslation boom2LinkLeft(r={2.85,1.18,-0.3})
          "from boom-lift pivot to lifting cylinder rod side pivot"
            annotation (Placement(transformation(
                origin={-131,75.5},
                extent={{-28,-8.5},{28,8.5}},
                rotation=180)));
          MB.Parts.FixedTranslation boom3Link(r={4.22,1.33,0})
          "from boom-lift pivot to arm cylinder cap side pivot"
            annotation (Placement(transformation(extent={{-78,71},{-31,85}},
                  rotation=0)));
          MB.Parts.FixedTranslation boom4LinkX(r={-0.920,
                                                        0,0})
            annotation (Placement(transformation(
                origin={21.5,79},
                extent={{-17.5,-9},{17.5,9}},
                rotation=180)));
          MB.Parts.FixedTranslation boom4LinkY(r={0,0.217,
                                                         0})
            annotation (Placement(transformation(
                origin={60.5,53},
                extent={{-20,-8.5},{20,8.5}},
                rotation=90)));
          MB.Parts.FixedTranslation armLink(
            r_shape={0,0,0},
            r={3.654,0,0},
            animation=true,
            color={0,180,0},
            shapeType="modelica://OpenHydraulics/Resources/Shapes/Excavator/arm.stl")
          "object model for the arm of the excavator"
            annotation (Placement(transformation(extent={{86,11},{129,33}},
                  rotation=0)));
          MB.Parts.FixedTranslation arm1Link(
            r_shape={0,0,0},
            animation=true,
            color={0,180,0},
            r={0.49,0.96,0},
            shapeType="cylinder",
            width=0.1) "object model for the arm of the excavator"
            annotation (Placement(transformation(extent={{91,82},{126,98}},
                  rotation=0)));
          MB.Parts.FixedTranslation arm2Link(
            r_shape={0,0,0},
            animation=true,
            color={0,180,0},
            r={2.97,0.13,0},
            shapeType="cylinder",
            width=0.1) "object model for the arm of the excavator"
            annotation (Placement(transformation(extent={{86,-63},{129,-46}},
                  rotation=0)));
          MB.Parts.FixedTranslation bucketLink(
            color={0,0,255},
            width=0.1,
            r={0.52,
                   0.07,0},
            shapeType="modelica://OpenHydraulics/Resources/Shapes/Excavator/bucket.stl") annotation (Placement(transformation(
                origin={231,7.5},
                extent={{-14.5,-11},{14.5,11}},
                rotation=270)));
          MB.Parts.Body bCarriage(
            m=11312.161,
            I_11=9667,
            I_22=34850,
            I_33=30686,
            I_21=-3756,
            I_31=0,
            I_32=0,
            r_CM={-2.555,1.169,0},
            sphereDiameter=world.defaultBodyDiameter)
          "mass/inertia properties for carriage"
            annotation (Placement(transformation(extent={{-123,-59},{-103,-39}},
                  rotation=0)));
          MB.Parts.Body bBoom(
            r_CM={3.44,0.65,
                           0},
            I_11=390.5,
            I_22=7803,
            I_33=8060,
            I_21=-150.1,
            I_31=0,
            I_32=0,
            m=1307) "mass/inertia properties for boom"
            annotation (Placement(transformation(extent={{-58,38},{-38,58}},
                  rotation=0)));
          MB.Parts.Body bArm(
            r_CM={1.176,0.296,
                             0},
            I_11=130.4,
            I_22=2110,
            I_33=2191,
            I_21=-214,
            I_31=0,
            I_32=0,
            animation=true,
            m=700.5) "mass/inertia properties for arm"
            annotation (Placement(transformation(
                origin={60,-6},
                extent={{-10,10},{10,-10}},
                rotation=270)));
          MB.Parts.Body bBucket(
            I_31=0,
            I_32=0,
            r_CM={0.5,
                     -0.6,
                         0},
            m=50,
            I_11=0.1304,
            I_22=2.11,
            I_33=2.191,
            I_21=-0.214) "mass/inertia properties for arm"
            annotation (Placement(transformation(
                origin={230,54},
                extent={{-10,-10},{10,10}},
                rotation=90)));

        equation
          connect(swingRevolute.frame_a,base. frame_b)              annotation (Line(
              points={{-110,-110},{-110,-118}},
              color={0,0,0},
              thickness=0.5));
          connect(boom1LinkRight.frame_a, swingRevolute.frame_b)    annotation (Line(
              points={{-33.5,-77},{-34,-77},{-34,-82},{-110,-82},{-110,-90}},
              color={0,0,0},
              thickness=0.5));
          connect(boom4LinkX.frame_a, boom4LinkY.frame_b)       annotation (Line(
              points={{39,79},{61,79},{61,73},{60.5,73}},
              color={0,0,0},
              thickness=0.5));
          connect(cylArm.frame_a, boom3Link.frame_b)                  annotation (Line(
              points={{-21,79},{-26,79},{-26,78},{-31,78}},
              color={0,0,0},
              thickness=0.5));
          connect(cylArm.frame_b, boom4LinkX.frame_b)                annotation (Line(
              points={{-1,79},{4,79}},
              color={0,0,0},
              thickness=0.5));
          connect(boom2LinkRight.frame_b, cylBoomRight.frame_b)      annotation (Line(
              points={{-32,2.5},{-32,-11},{-33,-11}},
              color={0,0,0},
              thickness=0.5));
          connect(boom1LinkRight.frame_b, cylBoomRight.frame_a)      annotation (Line(
              points={{-33.5,-37},{-33,-37},{-33,-31}},
              color={0,0,0},
              thickness=0.5));
          connect(carriage.frame_a,swingRevolute. frame_b)
                                                      annotation (Line(
              points={{-141.5,-49},{-141,-49},{-141,-82},{-110,-82},{-110,-90}},
              color={0,0,0},
              thickness=0.5));
          connect(cylBoomRight.flange_a, cylBoomRightBase)
                                                  annotation (Line(points={{-23,
                  -27},{-14,-27},{-14,-141}}, color={0,191,0}));
          connect(cylBoomRight.flange_b, cylBoomRightRod)
                                                  annotation (Line(points={{-23,
                  -15},{6,-15},{6,-141}}, color={0,191,0}));
          connect(cylArm.flange_b, cylArmRod)     annotation (Line(points={{-5,89},
                  {-5,139}}, color={0,191,0}));
          connect(bCarriage.frame_a,carriage. frame_a) annotation (Line(
              points={{-123,-49},{-141.5,-49}},
              color={0,0,0},
              thickness=0.5));
          connect(bBoom.frame_a,boom. frame_a) annotation (Line(
              points={{-58,48},{-78,48},{-78,22},{-79,22}},
              color={0,0,0},
              thickness=0.5));
          connect(boom1LinkLeft.frame_a, swingRevolute.frame_b)
                                                  annotation (Line(
              points={{-167.5,-37},{-167,-37},{-167,-82},{-110,-82},{-110,-90}},
              color={0,0,0},
              thickness=0.5));
          connect(cylBoomLeft.frame_a, boom1LinkLeft.frame_b)
                                                annotation (Line(
              points={{-167,31},{-167,3},{-167.5,3}},
              color={0,0,0},
              thickness=0.5));
          connect(boom2LinkLeft.frame_b, cylBoomLeft.frame_b)
                                                annotation (Line(
              points={{-159,75.5},{-159,75.75},{-167,75.75},{-167,51}},
              color={0,0,0},
              thickness=0.5));
          connect(cylBoomLeft.flange_b, cylBoomLeftRod)
                                                    annotation (Line(points={{
                  -177,47},{-200,47}}, color={0,191,0}));
          connect(cylBoomLeft.flange_a, cylBoomLeftBase)
                                                    annotation (Line(points={{
                  -177,35},{-177,27},{-200,27}}, color={0,191,0}));
          connect(bArm.frame_a, armLink.frame_a)
                                             annotation (Line(
              points={{60,4},{60,22},{86,22}},
              color={0,0,0},
              thickness=0.5));
          connect(armLink.frame_a, arm1Link.frame_a)
                                             annotation (Line(
              points={{86,22},{86,90},{91,90}},
              color={0,0,0},
              thickness=0.5));
          connect(jointRRR1.frame_a, arm2Link.frame_b)
                                                   annotation (Line(
              points={{170,-55.5},{170,-55},{129,-55},{129,-54.5}},
              color={0,0,0},
              thickness=0.5));
          connect(cylBucket.frame_b, jointRRR1.frame_im)
                                                     annotation (Line(
              points={{171,90},{171,91},{184.5,91},{184.5,-40}},
              color={0,0,0},
              thickness=0.5));
          connect(cylBucket.frame_a, arm1Link.frame_b)
                                               annotation (Line(
              points={{140,90},{126,90}},
              color={0,0,0},
              thickness=0.5));
          connect(arm2Link.frame_a, armLink.frame_a)
                                             annotation (Line(
              points={{86,-54.5},{86,22}},
              color={0,0,0},
              thickness=0.5));
          connect(bucketLink.frame_b, jointRRR1.frame_b)
                                                  annotation (Line(
              points={{231,-7},{231,-54},{199,-54},{199,-55.5}},
              color={0,0,0},
              thickness=0.5));
          connect(bBucket.frame_a, bucketLink.frame_a)
                                                annotation (Line(
              points={{230,44},{230,22},{231,22}},
              color={0,0,0},
              thickness=0.5));
          connect(cylBucket.flange_b, cylBucketRod)
                                             annotation (Line(points={{164.8,105},
                  {164.8,128.25},{165,128.25},{165,139}}, color={0,191,0}));
          connect(cylBucket.flange_a, cylBucketBase)
                                             annotation (Line(points={{146.2,105},
                  {146.2,139.25},{145,139.25},{145,139}}, color={0,191,0}));
          connect(boom.frame_b,armRevolute. frame_a)      annotation (Line(
              points={{-20,22},{3,22}},
              color={95,95,95},
              thickness=0.5));
          connect(armRevolute.frame_b, boom4LinkY.frame_a)
                                                         annotation (Line(
              points={{23,22},{60,22},{60,33},{60.5,33}},
              color={95,95,95},
              thickness=0.5));
          connect(armRevolute.frame_b, armLink.frame_a)  annotation (Line(
              points={{23,22},{86,22}},
              color={95,95,95},
              thickness=0.5));
          connect(armLink.frame_b, bucketRevolute.frame_a)
                                                          annotation (Line(
              points={{129,22},{159,22}},
              color={95,95,95},
              thickness=0.5));
          connect(bucketRevolute.frame_b, bucketLink.frame_a)
                                                          annotation (Line(
              points={{179,22},{205,22},{205,22},{231,22}},
              color={95,95,95},
              thickness=0.5));
          connect(base.frame_a, baseFrame)
                                          annotation (Line(
              points={{-110,-140},{-110,-136},{-72,-136}},
              color={95,95,95},
              thickness=0.5));
          connect(boomRevolute.frame_b,boom. frame_a)      annotation (Line(
              points={{-113,22},{-79,22}},
              color={95,95,95},
              thickness=0.5));
          connect(boom2LinkLeft.frame_a, boomRevolute.frame_b)
                                                           annotation (Line(
              points={{-103,75.5},{-102,75.5},{-102,22},{-113,22}},
              color={95,95,95},
              thickness=0.5));
          connect(boom3Link.frame_a, boomRevolute.frame_b)
                                                         annotation (Line(
              points={{-78,78},{-78,22},{-113,22}},
              color={95,95,95},
              thickness=0.5));
          connect(boomRevolute.frame_a,carriage. frame_b)      annotation (Line(
              points={{-133,22},{-141.5,22},{-141.5,3}},
              color={95,95,95},
              thickness=0.5));
          connect(boom2LinkRight.frame_a, boomRevolute.frame_b)
                                                           annotation (Line(
              points={{-77,2.5},{-77,22},{-113,22}},
              color={95,95,95},
              thickness=0.5));
          connect(cylArmBase, cylArm.flange_a)    annotation (Line(points={{-25,
                  139},{-25,89},{-17,89}}, color={0,127,0}));

          connect(swingRevolute.axis, swingFlange) annotation (Line(points={{-120,
                  -100},{-177,-100},{-177,-123},{-201,-123}}, color={0,0,0}));

          annotation (Diagram(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-200,-200},{250,200}},
                grid={1,1}), graphics={Text(
                  extent={{50,-90},{205,-125}},
                  lineColor={0,0,255},
                  lineThickness=0.5,
                  fillColor={215,215,215},
                  fillPattern=FillPattern.Solid,
                  textString=
                       "Mechanical model of complete excavator"), Rectangle(
                    extent={{-200,140},{250,-141}}, lineColor={0,0,255})}),
            Icon(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-200,-200},{250,200}},
                grid={1,1}), graphics={
                Rectangle(
                  extent={{-200,140},{250,-140}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Bitmap(extent={{-197,219},{248,-223}}, fileName=
                      "modelica://OpenHydraulics/Resources/Images/excavator.png"),
                Line(
                  points={{-190,37},{-14,-1}},
                  color={0,127,0},
                  thickness=0.5),
                Line(
                  points={{-15,129},{23,92}},
                  color={0,127,0},
                  thickness=0.5),
                Line(
                  points={{155,129},{126,88}},
                  color={0,127,0},
                  thickness=0.5),
                Line(
                  points={{-30,-10},{-4,-131}},
                  color={0,127,0},
                  thickness=0.5),
                Ellipse(
                  extent={{-18,4},{-8,-6}},
                  lineColor={0,127,0},
                  lineThickness=0.5,
                  fillColor={0,127,0},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{18,97},{28,87}},
                  lineColor={0,127,0},
                  lineThickness=0.5,
                  fillColor={0,127,0},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{122,94},{132,84}},
                  lineColor={0,127,0},
                  lineThickness=0.5,
                  fillColor={0,127,0},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{-36,-3},{-26,-13}},
                  lineColor={0,127,0},
                  lineThickness=0.5,
                  fillColor={0,127,0},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{-55,-57},{-45,-67}},
                  lineColor={95,95,95},
                  lineThickness=0.5,
                  fillColor={95,95,95},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-200,-122},{-50,-60}},
                  color={95,95,95},
                  thickness=0.5),
                Line(
                  points={{-72,-137},{-72,-127}},
                  color={95,95,95},
                  thickness=0.5)}));
        end MechanicsBody_noFriction;
      end SubSystems;
    end Excavator;
    annotation (Documentation(info="<html>
<h4><font color=\"#008000\" size=5>Overview</font></h4>  
<p>The OpenHydraulics/Examples package includes comprehensive examples of how the Hydraulics library can be used.</p>
<h4><font color=\"#008000\" size=5>Licensing</font></h4>
<p>
The OpenHydraulics/Examples package is licensed by Georgia Institute of Technology under the
<a href=\"http://www.modelica.org/licenses/ModelicaLicense2\"><b>Modelica License 2</b></a>.</p> 
<p><b>Copyright &copy; 2008-2013, Georgia Insitute of Technology</b>
</p>
</html>
"));
  end Examples;


  package Basic
  "Models of basic physical phenomena relevant to the hydraulics domain"
    extends OpenHydraulics.Interfaces.VariantLibrary;

    model GenericPressureLoss
      // the sizing parameters
      parameter SI.Diameter D_a "Diameter at port_a"
        annotation (Dialog(tab="Sizing"));
      parameter SI.Diameter D_b "Diameter at port_b"
        annotation (Dialog(tab="Sizing"));

      // the flow behavior parameters
      parameter Real zeta1 = 2 "Loss factor for flow of port_a -> port_b"
        annotation (Dialog(tab="Flow Behavior"));
      parameter Real zeta2 = 2 "Loss factor for flow of port_a -> port_b"
        annotation (Dialog(tab="Flow Behavior"));
      parameter SI.ReynoldsNumber Re_turbulent = 1000
      "Loss factors suited for Re >= Re_turbulent"
        annotation (Dialog(tab="Flow Behavior"));
      parameter SI.Diameter D_Re = D_a "Diameter used to compute Re"
        annotation (Dialog(tab="Flow Behavior"));
      parameter Boolean zetaLaminarKnown=false
      "= true, if zeta = c0/Re in laminar region"
        annotation (Dialog(tab="Flow Behavior"));
      parameter Real c0=1
      "zeta = c0/Re; dp = zeta*d_Re*v_Re^2/2, Re=v_Re*D_Re*d_Re/eta_Re)"
        annotation(Dialog(enable=zetaLaminarKnown,tab="Flow Behavior"));

      extends BaseClasses.PartialPressureLoss;
    equation
      data.D_a=D_a;
      data.D_b=D_b;
      data.kinv1=BaseClasses.lossConstant_D_zeta(D_a, zeta1);
      data.kinv2=BaseClasses.lossConstant_D_zeta(D_a, zeta2);
      data.Re_turbulent=Re_turbulent;
      data.D_Re=D_Re;
      data.zetaLaminarKnown=zetaLaminarKnown;
      data.c0=c0;
    end GenericPressureLoss;

    model LaminarRestriction
      // the sizing parameters
      parameter SI.Length L( final min=0) "Length of restriction"
        annotation(Dialog(tab="Sizing"));

      extends BaseClasses.PartialLaminarRestriction;

    equation
      conductance = Modelica.Constants.pi*D^4*d/(128*eta*L);

    end LaminarRestriction;

    model SharpEdgedOrifice
    "Sudden expansion in flow diameter from port_a to port_b"
      // the sizing parameters
      parameter SI.Diameter D_pipe
      "Inner diameter of pipe (= same at port_a and port_b)"
        annotation (Dialog(tab="Sizing"));
      parameter SI.Diameter D_min "Smallest diameter of orifice"
        annotation (Dialog(tab="Sizing"));
      parameter SI.Diameter L "Length of orifice"
        annotation (Dialog(tab="Sizing"));
      parameter NonSI.Angle_deg alpha "Angle of orifice"
        annotation (Dialog(tab="Sizing"));
      extends BaseClasses.PartialPressureLoss;
  protected
      parameter Real D_rel = D_min/D_pipe;
      parameter Real LD = L/D_min;
      parameter Real k = 0.13 + 0.34*10^(-(3.4*LD+88.4*LD^2.3));
    equation
      data.D_a=D_pipe;
      data.D_b=D_pipe;
      data.kinv1=BaseClasses.lossConstant_D_zeta(
              D_pipe, ((1 - D_rel) + 0.707*(1 - D_rel)^0.375)^2*(1/D_rel)^2);
      data.kinv2=BaseClasses.lossConstant_D_zeta(
              D_pipe, k*(1 - D_rel)^0.75 + (1 - D_rel)^2 + 2*sqrt(k*(1 - D_rel)^
              0.375) + (1 - D_rel));
      data.Re_turbulent=1e4;
      data.D_Re=D_min;
      data.zetaLaminarKnown=false;
      data.c0=0;
    end SharpEdgedOrifice;

    model SuddenExpansion
    "Sudden expansion in flow diameter from port_a to port_b"
      // the sizing parameters
      parameter SI.Diameter D_a "Diameter at port_a"
        annotation (Dialog(tab="Sizing"));
      parameter SI.Diameter D_b "Diameter at port_b"
        annotation (Dialog(tab="Sizing"));

      extends BaseClasses.PartialPressureLoss;

    initial equation
      assert(D_a <= D_b, "D_a must be smaller than D_b");
    equation
      data.D_a=D_a;
      data.D_b=D_b;
      data.kinv1=BaseClasses.lossConstant_D_zeta(
              D_a, (1 - (D_a/D_b)^2)^2);
      data.kinv2=BaseClasses.lossConstant_D_zeta(
              D_a, 0.5*(1 - (D_a/D_b)^2)^0.75);
      data.Re_turbulent=100;
      data.D_Re=D_a;
      data.zetaLaminarKnown=true;
      data.c0=30;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),
                       graphics));
    end SuddenExpansion;

    model VariableFlow "Controllable flow (independent of pressure)"

      // the ports
      Modelica.Blocks.Interfaces.RealInput q_flow "Specified flow from A to B"
        annotation (Placement(transformation(
            origin={0,-80},
            extent={{-20,20},{20,-20}},
            rotation=90)));
      extends BaseClasses.RestrictionInterface;
    equation
      // impose the desired flow
      port_a.m_flow = q_flow*oil.density(p_a);

      // mass balance
      0 = port_a.m_flow + port_b.m_flow "Mass balance";

      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}}), graphics={Line(points={{-20,-40},{20,40}},
                color={0,0,0}), Polygon(
              points={{20,40},{4,24},{16,18},{20,40}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid)}),
                                Icon(coordinateSystem(preserveAspectRatio=false,
              extent={{-100,-100},{100,100}}), graphics={Line(points={{-20,-40},
                  {20,40}}, color={0,0,0}), Polygon(
              points={{20,40},{4,24},{16,18},{20,40}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid)}));
    end VariableFlow;

    model VariableLaminarRestriction

      // sizing parameters
      parameter SI.VolumeFlowRate q_nom = 0.001 "Nominal flow rate at dp_nom"
        annotation(Dialog(tab="Sizing"));
      parameter SI.Pressure dp_nom = 1e6 "Nominal dp for metering curve"
        annotation(Dialog(tab="Sizing"));

      // the metering curve parameters
      parameter Real table[:, :]=[0,0; 1,1]
      "Metering curve (control = 1st col; fraction of q_nom = 2nd col)"
           annotation(Dialog(tab="Metering Curve",group="Table"));
      parameter Modelica.Blocks.Types.Smoothness smoothness=
        Modelica.Blocks.Types.Smoothness.LinearSegments
      "smoothness of table interpolation"
        annotation(Dialog(tab="Metering Curve",group="Table"));
      parameter SI.Density d_nom = 850
      "Nominal fluid density for metering curve"
        annotation(Dialog(tab="Metering Curve",group="Nominal values"));

      // advanced parameters
      parameter Real min_contr = 0 "Lower bound on control input"
        annotation(Dialog(tab="Metering Curve",group="Control"));
      parameter Real max_contr = 1 "Upper bound on control input"
        annotation(Dialog(tab="Metering Curve",group="Control"));

      extends BaseClasses.PartialLaminarRestriction(
        conductance=varConductance,
        d=d_nom);

      Modelica.Blocks.Interfaces.RealInput control
      "control inside [min_contr,max_contr]"
        annotation (Placement(transformation(
            origin={0,-80},
            extent={{-20,20},{20,-20}},
            rotation=90)));

      Modelica.Blocks.Tables.CombiTable1Ds MeteringTable(
        tableOnFile=false,table=table,smoothness=smoothness)
        annotation (Placement(transformation(extent={{18,-32},{-2,-12}},
              rotation=0)));

  protected
      Real opening = max(min(MeteringTable.y[1],1),0)
      "clip the output of the Metering table to [0,1]";
      Real varConductance = d_nom*opening*q_nom/dp_nom
      "Loss factor (function of control input)";

    algorithm
      MeteringTable.u := max(min(control,max_contr),min_contr);
      annotation (Diagram(graphics={
            Line(
              points={{0,-60},{0,-60},{40,-60},{40,-22},{22,-22}},
              color={0,0,255},
              pattern=LinePattern.Dash),
            Polygon(
              points={{20,40},{4,24},{16,18},{20,40}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Line(points={{-20,-40},{20,40}}, color={0,0,0}),
            Line(
              points={{-20,-40},{-8,-40},{-8,-22},{-2,-22}},
              color={0,0,0},
              pattern=LinePattern.Dash)}),
                                Icon(coordinateSystem(preserveAspectRatio=false,
              extent={{-100,-100},{100,100}}), graphics={Polygon(
              points={{20,40},{4,24},{16,18},{20,40}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid), Line(points={{-20,-40},{20,40}},
                color={0,0,0})}));
    end VariableLaminarRestriction;

    model VariableRestriction "Flow loss due to controllable restriction"
      constant Real pi = Modelica.Constants.pi;

      // sizing parameters
      parameter SI.VolumeFlowRate q_nom = 0.001 "Nominal flow rate at dp_nom"
        annotation(Dialog(tab="Sizing"));
      parameter SI.Pressure dp_nom = 1e6 "Nominal dp for metering curve"
        annotation(Dialog(tab="Sizing"));

      // the metering curve parameters
      parameter Real table[:, :]=[0,0; 1,1]
      "Metering curve (control = 1st col; fraction of q_nom = 2nd col)"
           annotation(Dialog(tab="Metering Curve",group="Table"));
      parameter Modelica.Blocks.Types.Smoothness smoothness=
        Modelica.Blocks.Types.Smoothness.LinearSegments
      "smoothness of table interpolation"
        annotation(Dialog(tab="Metering Curve",group="Table"));
      parameter SI.Diameter D_nom = 0.005 "Nominal diameter when fully open"
        annotation(Dialog(tab="Metering Curve",group="Nominal values"));

      parameter SI.Density d_nom = 850
      "Nominal fluid density for metering curve"
        annotation(Dialog(tab="Metering Curve",group="Nominal values"));
      parameter Real zeta_nom = 2 "Loss factor when fully open"
        annotation(Dialog(tab="Metering Curve",group="Nominal values"));

      // advanced parameters
      parameter Real min_contr = 0 "Lower bound on control input"
        annotation(Dialog(tab="Metering Curve",group="Control"));
      parameter Real max_contr = 1 "Upper bound on control input"
        annotation(Dialog(tab="Metering Curve",group="Control"));
      parameter SI.ReynoldsNumber Re_turbulent = 3000
      "Reynolds number at transition to tubulent flow"
        annotation(Dialog(tab="Advanced"));

      extends BaseClasses.RestrictionInterface;

      parameter Boolean from_dp = true
      "= true, use m_flow = f(dp) else dp = f(m_flow)"
        annotation (Evaluate=true, Dialog(tab="Advanced"));
      parameter Boolean use_Re = false
      "= true, if turbulent region is defined by Re, otherwise by dp_small or m_flow_small"
        annotation(Evaluate=true, Dialog(tab="Advanced"));
      parameter SI.AbsolutePressure dp_small = 1
      "Turbulent flow if |dp| >= dp_small"
        annotation(Dialog(tab="Advanced", enable=not use_Re and from_dp));
      parameter SI.MassFlowRate m_flow_small = 0.01
      "Turbulent flow if |m_flow| >= m_flow_small"
        annotation(Dialog(tab="Advanced", enable=not use_Re and not from_dp));

      SI.ReynoldsNumber Re = BaseClasses.ReynoldsNumber_m_flow(
            port_a.m_flow,
            (oil.dynamicViscosity(p_a) + oil.dynamicViscosity(p_b))/2,
            data.D_Re) if use_Re "Reynolds number at diameter D_Re";

      // the ports
      Modelica.Blocks.Interfaces.RealInput control
      "control inside [min_contr,max_contr]"
        annotation (Placement(transformation(
            origin={0,-80},
            extent={{-20,20},{20,-20}},
            rotation=90)));

      // internal blocks
      Modelica.Blocks.Tables.CombiTable1Ds MeteringTable(
        tableOnFile=false,table=table,smoothness=smoothness)
        annotation (Placement(transformation(extent={{18,-32},{-2,-12}},
              rotation=0)));

  protected
      BaseClasses.LossFactorData data(
          D_a=D_nom,
          D_b=D_nom,
          kinv1=kinv,
          kinv2=kinv,
          Re_turbulent=Re_turbulent,
          D_Re=(8*kinv*zeta_nom/(pi*pi))^(1/4),
          zetaLaminarKnown=false,
          c0=0) "Data used when metering";
      Real openFraction "Fraction of Restriction that is open";
      Real kinv "Loss factor (function of control input)";
      SI.Density d_a = oil.density(p_a) "Density at port a";
      SI.Density d_b = oil.density(p_b) "Density at port b";
    initial equation
      assert(data.D_Re>0 or not use_Re,"If D_Re==0 then Re evaluates to infinity");

    equation
      MeteringTable.u =  max(min(control,max_contr),min_contr);
      openFraction = max(min(MeteringTable.y[1], 1), 0);
      kinv = d_nom*openFraction*openFraction*q_nom*q_nom/dp_nom;

      // NOTE: the smooth and noEvent avoid events being generated.  This is important to
      // avoid going through re-initialization of the solver which sometimes take a significant
      // amount of time.
      if from_dp then
         port_a.m_flow = smooth(1,if noEvent(data.kinv1<=0) or noEvent(data.kinv2<=0) then 0 else
              if use_Re then
                     BaseClasses.massFlowRate_dp_and_Re(
                        dp, d_a, d_b,
                        oil.dynamicViscosity(p_a),
                        oil.dynamicViscosity(p_b),
                        data) else
                     BaseClasses.massFlowRate_dp(dp, d_a, d_b, data, dp_small));
      else
         assert(not (data.kinv1<=0 or data.kinv2<=0),
           "Pressure drop cannot be determined when restriction is completely closed;  set from_dp=true");
         dp = if use_Re then
                 BaseClasses.pressureLoss_m_flow_and_Re(
                     port_a.m_flow, d_a, d_b,
                     oil.dynamicViscosity(p_a),
                     oil.dynamicViscosity(p_b),
                     data) else
                 BaseClasses.pressureLoss_m_flow(port_a.m_flow, d_a, d_b, data, m_flow_small);
      end if;

      // mass balance
      0 = port_a.m_flow + port_b.m_flow "Mass balance";

      annotation (Diagram(graphics={
            Line(points={{-20,-40},{20,40}}, color={0,0,0}),
            Polygon(
              points={{20,40},{4,24},{16,18},{20,40}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Line(
              points={{20,-22},{40,-22},{40,-60},{0,-60}},
              color={0,0,127},
              pattern=LinePattern.Dash),
            Line(
              points={{-20,-40},{-8,-40},{-8,-22},{-2,-22}},
              color={0,0,0},
              pattern=LinePattern.Dash)}),
                                Icon(coordinateSystem(preserveAspectRatio=false,
              extent={{-100,-100},{100,100}}), graphics={Line(points={{-20,-40},
                  {20,40}}, color={0,0,0}), Polygon(
              points={{20,40},{4,24},{16,18},{20,40}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid)}));
    end VariableRestriction;

    model VariableRestrictionSeriesValve
    "Flow loss due to controllable restriction with series check valves"
      constant Real pi = Modelica.Constants.pi;

      // sizing parameters
      parameter SI.VolumeFlowRate q_nom = 0.001 "Nominal flow rate at dp_nom"
        annotation(Dialog(tab="Sizing"));
      parameter SI.Pressure dp_nom = 1e6 "Nominal dp for metering curve"
        annotation(Dialog(tab="Sizing"));

      // the metering curve parameters
      parameter Real table[:, :]=[0,0; 1,1]
      "Metering curve (control = 1st col; fraction of q_nom = 2nd col)"
           annotation(Dialog(tab="Metering Curve",group="Table"));
      parameter Modelica.Blocks.Types.Smoothness smoothness=
        Modelica.Blocks.Types.Smoothness.LinearSegments
      "smoothness of table interpolation"
        annotation(Dialog(tab="Metering Curve",group="Table"));
      parameter SI.Diameter D_nom = 0.005 "Nominal diameter when fully open"
        annotation(Dialog(tab="Metering Curve",group="Nominal values"));
      parameter SI.Density d_nom = 850
      "Nominal fluid density for metering curve"
        annotation(Dialog(tab="Metering Curve",group="Nominal values"));
      parameter Real zeta_nom = 2 "Loss factor when fully open"
        annotation(Dialog(tab="Metering Curve",group="Nominal values"));
      parameter Real min_contr = 0 "Lower bound on control input"
        annotation(Dialog(tab="Metering Curve",group="Control"));
      parameter Real max_contr = 1 "Upper bound on control input"
        annotation(Dialog(tab="Metering Curve",group="Control"));

      // advanced parameters
      parameter SI.ReynoldsNumber Re_turbulent = 3000
      "Reynolds number at transition to tubulent flow"
        annotation(Dialog(tab="Advanced"));
      parameter Boolean use_Re = false
      "= true, if turbulent region is defined by Re, otherwise by dp_small or m_flow_small"
        annotation(Evaluate=true, Dialog(tab="Advanced"));
      parameter SI.AbsolutePressure dp_small = 1
      "Turbulent flow if |dp| >= dp_small"
        annotation(Dialog(tab="Advanced", enable=not use_Re and from_dp));
      parameter SI.MassFlowRate m_flow_small = 0.01
      "Turbulent flow if |m_flow| >= m_flow_small"
        annotation(Dialog(tab="Advanced", enable=not use_Re and not from_dp));

      extends BaseClasses.RestrictionInterface;

      SI.ReynoldsNumber Re = BaseClasses.ReynoldsNumber_m_flow(
            port_a.m_flow,
            (oil.dynamicViscosity(p_a) + oil.dynamicViscosity(p_b))/2,
            data.D_Re) if use_Re "Reynolds number at diameter D_Re";
      SI.Density d_a = oil.density(p_a) "Density at port a";
      SI.Density d_b = oil.density(p_b) "Density at port b";
      // the ports
      Modelica.Blocks.Interfaces.RealInput control
      "control inside [min_contr,max_contr]"
        annotation (Placement(transformation(
            origin={0,-80},
            extent={{-20,20},{20,-20}},
            rotation=90)));

      // internal blocks
      Modelica.Blocks.Tables.CombiTable1Ds MeteringTable(
        tableOnFile=false,table=table,smoothness=smoothness)
        annotation (Placement(transformation(extent={{18,-32},{-2,-12}},
              rotation=0)));

  protected
      BaseClasses.LossFactorData data(
          D_a=D_nom,
          D_b=D_nom,
          kinv1=kinv,
          kinv2=kinv,
          Re_turbulent=Re_turbulent,
          D_Re=(8*kinv*zeta_nom/(pi*pi))^(1/4),
          zetaLaminarKnown=false,
          c0=0) "Data used when metering";
      Real openFraction "Fraction of Restriction that is open";
      Real kinv "Loss factor (function of control input)";
      Real dummyState "just for diagnostic purposes";
    initial equation
      assert(data.D_Re>0 or not use_Re,"If D_Re==0 then Re evaluates to infinity");

    equation
      MeteringTable.u =  max(min(control,max_contr),min_contr);
      openFraction = max(min(MeteringTable.y[1], 1), 0);
      kinv = d_nom*openFraction*openFraction*q_nom*q_nom/dp_nom;

      // NOTE: the smooth and noEvent avoid events being generated.  This is important to
      // avoid going through re-initialization of the solver which sometimes take a significant
      // amount of time.
      port_a.m_flow = if noEvent(data.kinv1<=0 or data.kinv2<=0 or dp<0) then
                         0 else
                         if use_Re then
                            BaseClasses.massFlowRate_dp_and_Re(
                                            dp, d_a, d_b,
                                            oil.dynamicViscosity(p_a),
                                            oil.dynamicViscosity(p_b),
                                            data) else
                            BaseClasses.massFlowRate_dp(dp, d_a, d_b, data, dp_small);

      // for diagnostics only!!
      dummyState = if noEvent(data.kinv1<=0 or data.kinv2<=0 or dp<0) then
                         0 else
                         if use_Re then 1 else 2;

      // mass balance
      0 = port_a.m_flow + port_b.m_flow "Mass balance";

      annotation (Diagram(graphics={
            Line(points={{-20,-40},{20,40}}, color={0,0,0}),
            Polygon(
              points={{20,40},{4,24},{16,18},{20,40}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Line(
              points={{20,-22},{40,-22},{40,-60},{0,-60}},
              color={0,0,127},
              pattern=LinePattern.Dash),
            Line(
              points={{-20,-40},{-8,-40},{-8,-22},{-2,-22}},
              color={0,0,0},
              pattern=LinePattern.Dash)}),
                                Icon(coordinateSystem(preserveAspectRatio=false,
              extent={{-100,-100},{100,100}}), graphics={Line(points={{-20,-40},
                  {20,40}}, color={0,0,0}), Polygon(
              points={{20,40},{4,24},{16,18},{20,40}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid)}));
    end VariableRestrictionSeriesValve;

    model WallFriction

      // the sizing parameters
      parameter SI.Length L "Length of pipe"
        annotation(Dialog(tab="Sizing"));
      parameter SI.Diameter D "Inner (hydraulic) diameter of pipe"
        annotation(Dialog(tab="Sizing"));
      parameter SI.Length roughness(min=0) = 2.5e-5
      "Absolute roughness of pipe (default = smooth steel pipe)"
        annotation(Dialog(tab="Sizing"));

      parameter Boolean from_dp = true
      "= true, use m_flow = f(dp) else dp = f(m_flow)"
        annotation (Evaluate=true, Dialog(tab="Advanced"));

      extends BaseClasses.RestrictionInterface;

    equation
      // mass balance
      0 = port_a.m_flow + port_b.m_flow "Mass balance";

      // energy balance
    //  0 = port_a.H_flow + port_b.H_flow "Energy balance";

      if from_dp then
        port_a.m_flow =
          BaseClasses.massFlowRate_dp_WallFriction(
            dp,
            oil.density(p_a),
            oil.density(p_b),
            oil.dynamicViscosity(p_a),
            oil.dynamicViscosity(p_b),
            L,
            D,
            roughness);
      else
        dp =
          BaseClasses.pressureLoss_m_flow_WallFriction(
            port_a.m_flow,
            oil.density(p_a),
            oil.density(p_b),
            oil.dynamicViscosity(p_a),
            oil.dynamicViscosity(p_b),
            L,
            D,
            roughness);
      end if;

      annotation (Documentation(info="<html>
<p>
This component defines the complete regime of wall friction.
The details are described in the
<a href=\"Modelica://Modelica_Fluid.UsersGuide.ComponentDefinition.WallFriction\">UsersGuide</a>.
The functional relationship of the friction loss factor &lambda; is
displayed in the next figure. Function massFlowRate_dp() defines the \"red curve\"
(\"Swamee and Jain\"), where as function pressureLoss_m_flow() defines the
\"blue curve\" (\"Colebrook-White\"). The two functions are inverses from 
each other and give slightly different results in the transition region
between Re = 1500 .. 4000, in order to get explicit equations without
solving a non-linear equation.
</p>
 
<img src=\"../Images/Components/PipeFriction1.png\">
</html>"));
    end WallFriction;

    model FluidPower2MechTrans

      // parameterization and initialization are kept to minimum
      // the user of this basic building block is expected to be
      // familiar with its use

      parameter SI.Area A = 0.01 "Area of piston"
        annotation(Dialog(tab="Sizing"));
      parameter SI.AbsolutePressure maxPressure = 3e7 "Maximum rated pressure"
        annotation(Dialog(tab="Sizing"));
      parameter SI.Volume residualVolume = 1e-6
      "Volume remaining when s_rel<=0"
        annotation(Dialog(tab="Sizing"));
      parameter Real stopStiffness(
        final unit="N/m",
        final min=0) = maxPressure*A*A/residualVolume
      "stiffness when chamber becomes empty"
        annotation(Dialog(tab="Dynamics"));
      parameter Real stopDamping(
        final unit="N.s/m",
        final min=-1000) = stopStiffness/10
      "damping when chamber becomes empty"
        annotation(Dialog(tab="Dynamics"));
      // note: the default stiffness is such that the residual volume is reduced by
      // at most 10 percent

      SI.Volume V(start=residualVolume) "Volume of oil inside chamber";
      SI.Mass m(start=residualVolume*oil.density(p_init))
      "Mass of oil inside chamber";
      SI.Power Wmech "Mechanical work performed onto chamber";
      SI.Velocity v_rel(start=0) "relative velocity";

      // the media properties
      SI.AbsolutePressure p_vol(start=p_init) "Oil pressure in the chamber";

      extends Modelica.Mechanics.Translational.Interfaces.PartialCompliant;
      extends OpenHydraulics.Interfaces.NPort;
  protected
      parameter SI.Position s_relMin = -0.001
      "the s_rel value at which the volume is zero";
      Boolean empty "true when chamber reaches end of travel";
      SI.Force f_stop "contact force when chamber is empty";
      SI.Force f_damping "damping force when chamber is empty";
      SI.Force f_contact "contact force when the end of travel is reached";

    algorithm
      assert(V>0,"Volume in fluid chamber is negative or zero.\n"+
                  "Increase the residualVolume or the stopStiffness");
      assert(p_vol<maxPressure or s_rel<0,"Maxiumum pressure in chamber has been exceeded");
      when empty then
        Modelica.Utilities.Streams.print("\nWARNING: CylinderChamber has reached end of travel.");
        Modelica.Utilities.Streams.print("         This could cause erratic behavior of the simulation.");
        Modelica.Utilities.Streams.print("         (time = "+String(time)+")");
      end when;

    equation
      // medium equations
      // the pressure is the same everywhere
      for i in 1:n_ports loop
        p_vol = p[i];
      end for;

      // state of the volume
      V = max(s_rel,0)*A + residualVolume;
      m = V*oil.density(p_vol);

      v_rel = der(s_rel);
      empty = s_rel<0;

      // energy flows: work done by fluid
      Wmech = v_rel*(f + f_contact);

      // force equilibrium
      0 = A*(p_vol - environment.p_ambient) + f_contact + f;

      // NOTE: the nonlinear spring force is most likely not physically accurate
      // but since impact is such a complex phenomenon, most other models would not be
      // accurate either.  The advantage of this model is that it is stable and smooth.
      if empty then
         f_stop = -stopStiffness*s_rel*(s_relMin/(s_relMin-s_rel)); // nonlinear spring force
         f_damping = -stopDamping*v_rel; // damper force
         f_contact = if (f_stop+f_damping <= 0) then 0 else f_stop+f_damping;
      else
         f_stop = 0; // spring force
         f_damping = 0; // damper force
         f_contact = 0;
      end if;

      // conservation of mass
      der(m) = sum(port.m_flow);

      annotation (Diagram(graphics={
            Rectangle(extent={{-80,40},{80,-40}}, lineColor={0,0,0}),
            Rectangle(
              extent={{100,4},{40,-4}},
              lineColor={0,0,0},
              fillColor={175,175,175},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{30,40},{40,-40}},
              lineColor={0,0,0},
              fillColor={175,175,175},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-30,40},{30,-40}},
              lineColor={0,0,0},
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-40,40},{-30,-40}},
              lineColor={0,0,0},
              fillColor={175,175,175},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-40,4},{-100,-4}},
              lineColor={0,0,0},
              fillColor={175,175,175},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-16,16},{16,-16}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid)}),
                                             Icon(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
            graphics={
            Rectangle(
              extent={{-80,40},{80,-40}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{100,4},{44,-4}},
              lineColor={0,0,0},
              fillColor={175,175,175},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{34,39},{44,-39}},
              lineColor={0,0,0},
              fillColor={175,175,175},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-34,40},{34,-40}},
              lineColor={0,0,0},
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-44,39},{-34,-39}},
              lineColor={0,0,0},
              fillColor={175,175,175},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-44,4},{-100,-4}},
              lineColor={0,0,0},
              fillColor={175,175,175},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{0,100},{0,60}},
              lineColor={0,0,255},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="%name"),
            Ellipse(
              extent={{-16,16},{16,-16}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid)}));
    end FluidPower2MechTrans;

    model FluidPower2MechRotConst
    "Ideal constant displacement pump with mechanical connector for the shaft"
      extends BaseClasses.PartialPumpMotor;

      // parameters in default tab
      parameter SI.Volume Dconst = 0.001 "Constant pump displacement";

    equation
      D = Dconst;

      annotation (
        Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                100,100}}), graphics={Polygon(
              points={{-10,52},{0,42},{-10,32},{10,32},{0,42},{10,52},{-10,52}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid), Polygon(
              points={{-10,-32},{0,-42},{-10,-52},{10,-52},{0,-42},{10,-32},{-10,
                  -32}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid)}),
        Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}}), graphics={Polygon(
              points={{-10,52},{0,42},{-10,32},{10,32},{0,42},{10,52},{-10,52}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid), Polygon(
              points={{-10,-32},{0,-42},{-10,-52},{10,-52},{0,-42},{10,-32},{-10,
                  -32}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid)}),
      Icon(Rectangle(extent=[60,26; 84,12], style(
              color=10,
              rgbcolor={95,95,95},
              gradient=2,
              fillColor=10,
              rgbfillColor={95,95,95}))),
      Diagram);
    end FluidPower2MechRotConst;

    model FluidPower2MechRotVar
    "Ideal variable displacement pump with mechanical connector for the shaft"

      // parameters in sizing tab
      parameter SI.Volume Dmax = 0.001 "Maximum pump displacement"
        annotation(Dialog(tab="Sizing"));
      parameter SI.Volume Dmin = 0 "Minimum pump displacement"
        annotation(Dialog(tab="Sizing"));
      parameter SI.Volume Dlimit = max(abs(Dmax),abs(Dmin))
      "Displacement of pump"
        annotation(Dialog(tab="Sizing"));

      extends BaseClasses.PartialPumpMotor;

      Modelica.Blocks.Interfaces.RealInput dispFraction
        annotation (Placement(transformation(extent={{-100,-94},{-70,-64}},
              rotation=0)));
    equation
      D = min(max(dispFraction*Dlimit,Dmin),Dmax);

      annotation (
        Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                100,100}}), graphics={
            Polygon(
              points={{80,80},{52,66},{66,52},{80,80}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Line(points={{-80,-80},{80,80}}, color={0,0,0}),
            Polygon(
              points={{-10,52},{0,42},{-10,32},{10,32},{0,42},{10,52},{-10,52}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{-10,-32},{0,-42},{-10,-52},{10,-52},{0,-42},{10,-32},{-10,
                  -32}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid)}),
        Diagram(graphics={
            Line(points={{-80,-80},{80,80}}, color={0,0,0}),
            Polygon(
              points={{80,80},{52,66},{66,52},{80,80}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{-10,52},{0,42},{-10,32},{10,32},{0,42},{10,52},{-10,52}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{-10,-32},{0,-42},{-10,-52},{10,-52},{0,-42},{10,-32},{
                  -10,-32}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid)}),
      Icon(Rectangle(extent=[60,26; 84,12], style(
              color=10,
              rgbcolor={95,95,95},
              gradient=2,
              fillColor=10,
              rgbfillColor={95,95,95}))),
      Diagram);
    end FluidPower2MechRotVar;

    model AirChamber
      extends Modelica.Mechanics.Translational.Interfaces.PartialCompliant;

      // parameterization and initialization are kept to minimum
      // the user of this basic building block is expected to be
      // familiar with its use

      parameter SI.Area A = 1 "Area of piston";
      parameter SI.AbsolutePressure p_precharge = 1e6 "precharge pressure";
      parameter SI.Volume V_precharge = 0.5 "initial precharge volume";
      parameter SI.Volume residualVolume = 0
      "Volume when chamber is fully compressed";
      parameter Real stopStiffness(
        final unit="N/m",
        final min=0) = 1e9 "stiffness when piston reaches stop";

      parameter Boolean initializePressure = true
      "true = pressure; false = volume"
        annotation(Dialog(tab="Initialization",evaluate=true));
      parameter SI.AbsolutePressure p_init "Initial pressure"
        annotation(Dialog(tab="Initialization",enable=initializePressure));
      parameter SI.Volume V_init = V_precharge "Initial volume"
        annotation(Dialog(tab="Initialization",enable= not initializePressure));

      SI.AbsolutePressure p(start=p_precharge) "pressure of air in chamber";
      SI.Volume V "Volume of air in chamber";
  protected
      outer OpenHydraulics.Circuits.Environment environment;
      Boolean empty "true when chamber is empty";
      SI.Force f_stop "contact force when chamber is empty";
      Real pV "p*V";
    initial equation
      if initializePressure then
        p = p_init;
        V = p_precharge*V_precharge/p_init;
      else
        p = p_precharge*V_precharge/V_init;
        V = V_init;
      end if;
    equation
      // behavior of the gas: p*V = constant
      // NOTE: needs to be replaced by more sophisticated gas model!
      pV = p*V;
      der(pV) = 0;
      V = s_rel*A + residualVolume;
      0 = A*(p - environment.p_ambient) + f + f_stop;

      // the relation between gas state and cylinder behavior
      empty = s_rel<0;
      f_stop = if empty then -s_rel*stopStiffness-der(s_rel)*10 else 0;

      annotation (Diagram(graphics={
            Rectangle(
              extent={{-80,40},{80,-40}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{100,4},{40,-4}},
              lineColor={0,0,0},
              fillColor={175,175,175},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{30,40},{40,-40}},
              lineColor={0,0,0},
              fillColor={175,175,175},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-40,40},{-30,-40}},
              lineColor={0,0,0},
              fillColor={175,175,175},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-40,4},{-100,-4}},
              lineColor={0,0,0},
              fillColor={175,175,175},
              fillPattern=FillPattern.Solid)}),
                                             Icon(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
            graphics={
            Rectangle(
              extent={{-80,40},{80,-40}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{100,4},{44,-4}},
              lineColor={0,0,0},
              fillColor={175,175,175},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{34,39},{44,-39}},
              lineColor={0,0,0},
              fillColor={175,175,175},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-44,39},{-34,-39}},
              lineColor={0,0,0},
              fillColor={175,175,175},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-44,4},{-100,-4}},
              lineColor={0,0,0},
              fillColor={175,175,175},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{0,100},{0,60}},
              lineColor={0,0,255},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="%name")}));
    end AirChamber;

    model ConstPressureSource "Boundary pressure and temperature source"
      extends OpenHydraulics.Interfaces.PartialFluidComponent;

      OpenHydraulics.Interfaces.FluidPort port
        annotation (Placement(transformation(extent={{-10,90},{10,110}},
              rotation=0)));

      parameter SI.AbsolutePressure p_const = environment.p_ambient
      "Tank pressure";
    equation
      port.p = p_const;
      annotation (defaultComponentName = "source",
        Icon(coordinateSystem(
            preserveAspectRatio=false,
            extent={{-100,-100},{100,100}},
            grid={2,2}), graphics={
            Text(
              extent={{0,-32},{0,-66}},
              lineColor={255,0,0},
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid,
              textString="p=%p_const"),
            Line(points={{0,54},{0,100}}, color={255,0,0}),
            Ellipse(
              extent={{-40,54},{40,-26}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-16,30},{16,-2}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Text(extent={{0,90},{0,54}}, textString="%name")}),
        Documentation(info="<html>
<p>
Defines constant values for boundary conditions:
</p>
<ul>
<li> Tank pressure.</li>
<li> Tank temperature.</li>
</ul>
<p>
Note, that boundary temperature only has an effect if the mass flow
is out of the tank. If mass is flowing into the tank, the temperature is free.
</p>
</html>"),
        Diagram(coordinateSystem(
            preserveAspectRatio=false,
            extent={{-100,-100},{100,100}},
            grid={2,2}), graphics={
            Ellipse(extent={{-40,54},{40,-26}}, lineColor={0,0,0}),
            Line(points={{0,54},{0,100}}, color={255,0,0}),
            Ellipse(
              extent={{-16,30},{16,-2}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid)}));
    end ConstPressureSource;

    model ConstVolumeSource "Boundary pressure source"
      extends OpenHydraulics.Interfaces.PartialFluidComponent;

      OpenHydraulics.Interfaces.FluidPort port
        annotation (Placement(transformation(extent={{-10,90},{10,110}},
              rotation=0)));

      parameter SI.VolumeFlowRate q = 0.01 "Source Volume Rate" annotation(Evaluate=true);

    equation
      port.m_flow = -q*oil.density(port.p);

      annotation (defaultComponentName = "source",
        Icon(coordinateSystem(
            preserveAspectRatio=false,
            extent={{-100,-100},{100,100}},
            grid={2,2}), graphics={
            Text(
              extent={{0,-32},{0,-66}},
              lineColor={255,0,0},
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid,
              textString="q=%q"),
            Line(points={{0,54},{0,100}}, color={255,0,0}),
            Ellipse(
              extent={{-40,54},{40,-26}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Text(extent={{0,90},{0,54}}, textString="%name"),
            Text(
              extent={{0,48},{0,-26}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              textString="Q")}),
        Documentation(info="<html>
<p>
Defines constant values for boundary conditions:
</p>
<ul>
<li> Tank pressure.</li>
<li> Tank temperature.</li>
</ul>
<p>
Note, that boundary temperature only has an effect if the mass flow
is out of the tank. If mass is flowing into the tank, the temperature is free.
</p>
</html>"),
        Diagram(coordinateSystem(
            preserveAspectRatio=false,
            extent={{-100,-100},{100,100}},
            grid={2,2}), graphics={
            Ellipse(extent={{-40,54},{40,-26}}, lineColor={0,0,0}),
            Line(points={{0,54},{0,100}}, color={255,0,0}),
            Text(
              extent={{0,50},{0,-24}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              textString=
                   "Q")}));
    end ConstVolumeSource;

    model VarPressureSource "Boundary pressure and temperature source"
      extends OpenHydraulics.Interfaces.PartialFluidComponent;

      OpenHydraulics.Interfaces.FluidPort port
        annotation (Placement(transformation(extent={{-10,90},{10,110}},
              rotation=0)));

      Modelica.Blocks.Interfaces.RealInput control annotation (Placement(
            transformation(extent={{-120,-20},{-80,20}}, rotation=0)));
    equation
      port.p   = control;

      annotation (defaultComponentName = "source",
        Icon(coordinateSystem(
            preserveAspectRatio=false,
            extent={{-100,-100},{100,100}},
            grid={2,2}), graphics={
            Line(points={{0,40},{0,100}}, color={255,0,0}),
            Ellipse(
              extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Text(extent={{0,-46},{0,-82}}, textString="%name"),
            Polygon(
              points={{44,44},{30,36},{36,30},{44,44}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Line(points={{-40,-40},{40,40}}, color={0,0,0}),
            Line(points={{-40,0},{-80,0}}, color={0,0,127}),
            Ellipse(
              extent={{-16,16},{16,-16}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid)}),
        Documentation(info="<html>
<p>
Defines constant values for boundary conditions:
</p>
<ul>
<li> Tank pressure.</li>
<li> Tank temperature.</li>
</ul>
<p>
Note, that boundary temperature only has an effect if the mass flow
is out of the tank. If mass is flowing into the tank, the temperature is free.
</p>
</html>"),
        Diagram(coordinateSystem(
            preserveAspectRatio=false,
            extent={{-100,-100},{100,100}},
            grid={2,2}), graphics={
            Ellipse(extent={{-40,40},{40,-40}}, lineColor={0,0,0}),
            Line(points={{0,40},{0,100}}, color={255,0,0}),
            Line(points={{-40,-40},{40,40}}, color={0,0,0}),
            Polygon(
              points={{48,48},{30,40},{40,30},{48,48}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Line(points={{-40,0},{-80,0}}, color={0,0,127}),
            Ellipse(
              extent={{-16,16},{16,-16}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid)}));
    end VarPressureSource;

    model VarVolumeSource "Boundary volume flow and temperature source"
      extends OpenHydraulics.Interfaces.PartialFluidComponent;

      OpenHydraulics.Interfaces.FluidPort port
        annotation (Placement(transformation(extent={{-10,90},{10,110}},
              rotation=0)));

      Modelica.Blocks.Interfaces.RealInput control annotation (Placement(
            transformation(extent={{-120,-20},{-80,20}}, rotation=0)));
    equation
      port.m_flow = -oil.density(port.p)*control;

      annotation (defaultComponentName = "source",
        Icon(coordinateSystem(
            preserveAspectRatio=false,
            extent={{-100,-100},{100,100}},
            grid={2,2}), graphics={
            Ellipse(
              extent={{-40,40},{40,-40}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Line(points={{0,40},{0,100}}, color={255,0,0}),
            Text(
              extent={{0,36},{0,-38}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              textString="Q"),
            Line(points={{-40,0},{-80,0}}, color={0,0,127}),
            Polygon(
              points={{48,48},{30,40},{40,30},{48,48}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Line(points={{-40,-40},{40,40}}, color={0,0,0}),
            Text(extent={{0,-46},{0,-82}}, textString="%name")}),
        Documentation(info="<html>
<p>
Defines constant values for boundary conditions:
</p>
<ul>
<li> Tank pressure.</li>
<li> Tank temperature.</li>
</ul>
<p>
Note, that boundary temperature only has an effect if the mass flow
is out of the tank. If mass is flowing into the tank, the temperature is free.
</p>
</html>"),
        Diagram(coordinateSystem(
            preserveAspectRatio=false,
            extent={{-100,-100},{100,100}},
            grid={2,2}), graphics={
            Ellipse(extent={{-40,40},{40,-40}}, lineColor={0,0,0}),
            Line(points={{0,40},{0,100}}, color={255,0,0}),
            Text(
              extent={{0,36},{0,-38}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              textString=
                   "Q"),
            Line(points={{-40,0},{-80,0}}, color={0,0,127}),
            Polygon(
              points={{48,48},{30,40},{40,30},{48,48}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Line(points={{-40,-40},{40,40}}, color={0,0,0})}));
    end VarVolumeSource;

    model OpenTank "Boundary pressure, temperature and mass fraction source"

      OpenHydraulics.Interfaces.FluidPort port
        annotation (Placement(transformation(extent={{-10,90},{10,110}},
              rotation=0)));

      parameter SI.AbsolutePressure p_const = environment.p_ambient
      "Tank pressure";

      extends OpenHydraulics.Interfaces.PartialFluidComponent;
    equation
      port.p = p_const;

      annotation (defaultComponentName = "tank",
        Icon(coordinateSystem(
            preserveAspectRatio=false,
            extent={{-100,-100},{100,100}},
            grid={2,2}), graphics={
            Text(extent={{-100,20},{100,-20}}, textString="%name"),
            Line(points={{0,100},{0,20}}, color={255,0,0}),
            Line(points={{-80,20},{-80,-20},{80,-20},{80,20}}, color={0,0,0}),
            Text(
              extent={{-80,-20},{80,-60}},
              lineColor={255,0,0},
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid,
              textString="p=%p_const"),
            Text(
              extent={{-80,-60},{80,-100}},
              lineColor={255,0,0},
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid)}),
        Documentation(info="<html>
<p>
Defines constant values for boundary conditions:
</p>
<ul>
<li> Tank pressure.</li>
<li> Tank temperature.</li>
</ul>
<p>
Note, that boundary temperature only has an effect if the mass flow
is out of the tank. If mass is flowing into the tank, the temperature is free.
</p>
</html>"),
        Diagram(coordinateSystem(
            preserveAspectRatio=false,
            extent={{-100,-100},{100,100}},
            grid={2,2}), graphics));
    end OpenTank;

    model VolumeClosed "A constant compressible volume"

      // main parameters
      parameter SI.Volume V = 1e-6
      "Nominal volume size (at atmospheric pressure)"
        annotation(Dialog(tab="Sizing"));
      parameter Boolean compressible = true
      "=true if encclosure volume depends on pressure"
        annotation(Evaluate=true,Dialog(tab="Sizing"));
      parameter SI.BulkModulus volBulkMod = 1e7 "Bulk Modulus of the enclosure"
        annotation(Dialog(tab="Sizing",enable=compressible));

      // the variables
      SI.Volume V_actual "Volume size";
      SI.Mass m = V_actual*oil.density(p_vol) "Mass of fluid";
      SI.AbsolutePressure p_vol(start=p_init) "Pressure in the volume";

      extends OpenHydraulics.Interfaces.NPort(n_ports=1);

    equation
      V_actual = V + (if compressible then V*(p_vol - environment.p_ambient)/volBulkMod else 0);

      // the pressures are equal throughout the volume
      for i in 1:n_ports loop
        p[i] = p_vol;
      end for;

      // Mass balances
      if V>0 then
        der(m) = sum(port.m_flow);
      else
        0 = sum(port.m_flow);
      end if;

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
            Ellipse(
              extent={{-60,60},{60,-60}},
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere,
              fillColor={255,0,0}),
            Text(
              extent={{-100,100},{100,60}},
              lineColor={0,0,255},
              fillColor={0,128,255},
              fillPattern=FillPattern.Solid,
              textString="%name"),
            Ellipse(
              extent={{-30,30},{30,-30}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid)}),
                                             Diagram(graphics={Ellipse(
              extent={{-60,60},{60,-60}},
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere,
              fillColor={255,0,0}), Ellipse(
              extent={{-30,30},{30,-30}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid)}));
    end VolumeClosed;

    model VolumeOpen "An open constant-pressure volume"

      // main parameters
      parameter SI.Volume V_max = 1 "Tank Volume"
        annotation(Dialog(tab="Sizing"));
      parameter SI.AbsolutePressure p_const = environment.p_ambient
      "preload pressure"
        annotation(Dialog(tab="Initialization"));
      parameter SI.Volume V_init = 0.1 "Initial Volume" annotation(Dialog(tab="Initialization"));

      // the variables
      SI.Volume V_actual "Volume size";
      SI.Mass m = V_actual*oil.density(p_vol) "Mass of fluid";
      SI.AbsolutePressure p_vol(start=p_init) "Pressure in the volume";

      extends OpenHydraulics.Interfaces.NPort(n_ports=1);

  protected
      parameter SI.Mass m_init = V_init*oil.density(p_init)
      "Guess initial mass";
    initial equation
      V_actual = V_init;
    equation
      assert(V_actual<V_max,"Volume has exceeded limit");
      p_vol = p_const;

      // the pressures are equal throughout the volume
      for i in 1:n_ports loop
        p[i] = p_vol;
      end for;

      // Mass balances
      der(m) = sum(port.m_flow) "Mass balance";

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
            Rectangle(
              extent={{-60,60},{60,-60}},
              lineColor={0,0,0},
              fillPattern=FillPattern.VerticalCylinder,
              fillColor={255,0,0}),
            Text(
              extent={{-100,100},{100,60}},
              lineColor={0,0,255},
              fillColor={0,128,255},
              fillPattern=FillPattern.Solid,
              textString="%name"),
            Ellipse(
              extent={{-30,30},{30,-30}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Line(points={{-60,60},{-60,-60},{60,-60},{60,60}}, color={0,0,0})}),
                                         Diagram(graphics={
            Rectangle(
              extent={{-60,60},{60,-60}},
              lineColor={0,0,0},
              fillPattern=FillPattern.VerticalCylinder,
              fillColor={255,0,0}),
            Ellipse(
              extent={{-30,30},{30,-30}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Line(points={{-60,60},{-60,-60},{60,-60},{60,60}}, color={0,0,0})}));
    end VolumeOpen;

    package BaseClasses "Base classes for flow models"

      partial model RestrictionInterface
        extends OpenHydraulics.Interfaces.HorizontalTwoPort;

        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-100,-100},{100,100}}), graphics={
              Line(points={{-100,0},{100,0}}, color={0,0,0}),
              Line(points={{-60,20},{-44,14},{-30,10},{-20,8},{-6,6},{6,6},{20,
                    8},{30,10},{44,14},{60,20}}, color={0,0,0}),
              Line(points={{-60,-20},{-44,-14},{-30,-10},{-20,-8},{-6,-6},{6,-6},
                    {20,-8},{30,-10},{44,-14},{60,-20}}, color={0,0,0})}),
                                  Icon(coordinateSystem(preserveAspectRatio=false,
                         extent={{-100,-100},{100,100}}), graphics={
              Rectangle(
                extent={{-80,60},{80,-40}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{-100,0},{100,0}}, color={0,0,0}),
              Line(points={{-60,20},{-44,14},{-30,10},{-20,8},{-6,6},{6,6},{20,
                    8},{30,10},{44,14},{60,20}}, color={0,0,0}),
              Line(points={{-60,-20},{-44,-14},{-30,-10},{-20,-8},{-6,-6},{6,-6},
                    {20,-8},{30,-10},{44,-14},{60,-20}}, color={0,0,0}),
              Text(
                extent={{-106,54},{-64,14}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="A"),
              Text(
                extent={{64,54},{106,14}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="B"),
              Text(
                extent={{100,-20},{-100,-60}},
                lineColor={0,0,255},
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid,
                textString="%name")}));
      end RestrictionInterface;

      partial model PartialPressureLoss
        extends RestrictionInterface;

        parameter Boolean from_dp = true
        "= true, use m_flow = f(dp) else dp = f(m_flow)"
          annotation (Evaluate=true, Dialog(tab="Advanced"));
        parameter Boolean use_Re = false
        "= true, if turbulent region is defined by Re, otherwise by dp_small or m_flow_small"
          annotation(Evaluate=true, Dialog(tab="Advanced"));
        parameter SI.AbsolutePressure dp_small = 1
        "Turbulent flow if |dp| >= dp_small"
          annotation(Dialog(tab="Advanced", enable=not use_Re and from_dp));
        parameter SI.MassFlowRate m_flow_small = 0.01
        "Turbulent flow if |m_flow| >= m_flow_small"
          annotation(Dialog(tab="Advanced", enable=not use_Re and not from_dp));

        SI.ReynoldsNumber Re = ReynoldsNumber_m_flow(
              port_a.m_flow,
              (oil.dynamicViscosity(p_a) + oil.dynamicViscosity(p_b))/2,
              data.D_Re) if use_Re "Reynolds number at diameter D_Re";
        SI.Density d_a = oil.density(p_a) "Density at port a";
        SI.Density d_b = oil.density(p_b) "Density at port b";
    protected
        LossFactorData data "Data";
      initial equation
        assert(data.D_Re>0 or not use_Re,"If D_Re==0 then Re evaluates to infinity");
      equation
        // mass balance
        0 = port_a.m_flow + port_b.m_flow "Mass balance";

        // NOTE: the smooth and noEvent avoid events being generated.  This is important to
        // avoid going through re-initialization of the solver which sometimes take a significant
        // amount of time.
        if from_dp then
           port_a.m_flow = smooth(1,if noEvent(data.kinv1<=0) or noEvent(data.kinv2<=0) then 0 else
                if use_Re then
                       massFlowRate_dp_and_Re(
                          dp, d_a, d_b,
                          oil.dynamicViscosity(p_a),
                          oil.dynamicViscosity(p_b),
                          data) else
                       massFlowRate_dp(dp, d_a, d_b, data, dp_small));
        else
           assert(not (data.kinv1<=0 or data.kinv2<=0),
             "Pressure drop cannot be determined when restriction is completely closed;  set from_dp=true");
           dp = if use_Re then
                   pressureLoss_m_flow_and_Re(
                       port_a.m_flow, d_a, d_b,
                       oil.dynamicViscosity(p_a),
                       oil.dynamicViscosity(p_b),
                       data) else
                   pressureLoss_m_flow(port_a.m_flow, d_a, d_b, data, m_flow_small);
        end if;
      end PartialPressureLoss;

      partial model PartialLaminarRestriction
        // the sizing parameters
        parameter Modelica.SIunits.Diameter D(final min=0)= 0.01
        "Hydraulic diameter of restriction (for computation of Re)"
          annotation(Dialog(tab="Sizing"));

        // advanced parameters
        parameter Boolean check_Re = false "true, check whether Re<Re_laminar"
          annotation(Evaluate=true, Dialog(tab="Advanced"));
        parameter Modelica.SIunits.ReynoldsNumber Re_laminar=2000
        "Boundary of laminar flow regime"
          annotation(Dialog(tab="Advanced", enable=check_Re));

        // since Re is used only for diagnostics, do not generate events --> noEvent
        Modelica.SIunits.ReynoldsNumber Re=noEvent(abs(port_a.m_flow))*4/(Modelica.Constants.pi
            *max(D, 1e-20)*eta) "Reynolds number";

        SI.DynamicViscosity eta = (oil.dynamicViscosity(p_a) +
                                       oil.dynamicViscosity(p_b))/2
        "Average dynamic viscosity";
        SI.Density d = (oil.density(p_a) + oil.density(p_b))/2
        "Average density";
        OpenHydraulics.Types.HydraulicConductance conductance
        "Hydraulic Conductance of restriction";

         extends RestrictionInterface;
      equation
        if check_Re and D>0 then
          assert(Re<=Re_laminar,"Flow is outside laminar region: Re = "+String(Re));
        end if;

        // mass balance
        0 = port_a.m_flow + port_b.m_flow "Mass balance";

        // pressure vs. flow relationship
        // assumes laminar flow
        //conductance = Modelica.Constants.pi*D^4*d/(128*eta*L);
      algorithm
        port_a.m_flow := conductance*dp;

        annotation (Diagram(graphics={
              Line(points={{-100,0},{100,0}}, color={0,0,0}),
              Line(points={{-60,20},{-44,14},{-30,10},{-20,8},{-6,6},{6,6},{20,
                    8},{30,10},{44,14},{60,20}}, color={0,0,0}),
              Line(points={{-60,-20},{-44,-14},{-30,-10},{-20,-8},{-6,-6},{6,-6},
                    {20,-8},{30,-10},{44,-14},{60,-20}}, color={0,0,0})}),
                                  Icon(coordinateSystem(preserveAspectRatio=false,
                         extent={{-100,-100},{100,100}}), graphics={
              Line(points={{-100,0},{100,0}}, color={0,0,0}),
              Line(points={{-60,20},{-44,14},{-30,10},{-20,8},{-6,6},{6,6},{20,
                    8},{30,10},{44,14},{60,20}}, color={0,0,0}),
              Line(points={{-60,-20},{-44,-14},{-30,-10},{-20,-8},{-6,-6},{6,-6},
                    {20,-8},{30,-10},{44,-14},{60,-20}}, color={0,0,0})}));
      end PartialLaminarRestriction;

      record LossFactorData
      "Data structure defining constant loss factor data for dp = zeta*rho*v*|v|/2 and functions providing the data for some loss types"

        SI.Diameter D_a "Diameter at port_a" annotation (Dialog);
        SI.Diameter D_b "Diameter at port_b" annotation (Dialog);
        Real kinv1 "Inverse loss factor for flow port_a -> port_b" annotation (Dialog);
        Real kinv2 "Inverse loss factor for flow port_b -> port_a" annotation (Dialog);
        SI.ReynoldsNumber Re_turbulent
        "Loss factors suited for Re >= Re_turbulent"
          annotation (Dialog);
        SI.Diameter D_Re "Diameter used to compute Re" annotation (Dialog);
        Boolean zetaLaminarKnown "= true, if zeta = c0/Re in laminar region"
          annotation (Dialog);
        Real c0
        "zeta = c0/Re; dp = zeta*d_Re*v_Re^2/2, Re=v_Re*D_Re*d_Re/eta_Re)"
          annotation(Dialog(enable=zetaLaminarKnown));

        annotation (Documentation(info="<html>
<p>
This record defines the pressure loss factors of a pipe
segment (orifice, bending etc.) with a minimum amount of data.
If available, data should be provided for <b>both flow directions</b>,
i.e., flow from port_a to port_b and from port_b to port_a, 
as well as for the <b>laminar</b> and the <b>turbulent</b> region.
It is also an option to provide the loss factor <b>only</b> for the
<b>turbulent</b> region for a flow from port_a to port_b.
</p>
<p>
The following equations are used:
</p>
<pre>   &Delta;p = 0.5*&zeta;*&rho;*v*|v|
      = 0.5*&zeta;/A^2 * (1/&rho;) * m_flow*|m_flow|
      = 8*&zeta;/(&pi;^2*D^4*&rho;) * m_flow*|m_flow|
      = 1/(kinv*&rho;) * m_flow*|m_flow|
        Re = |v|*D*&rho;/&eta;
</pre>
<table border=1 cellspacing=0 cellpadding=2>
<tr><td><b>flow type</b></td>
    <td><b>&zeta;</b> = </td>
    <td><b>flow region</b></td></tr>
<tr><td>turbulent</td>
    <td><b>zeta1</b> = const.</td>
    <td>Re &ge;  Re_turbulent, v &ge; 0</td></tr>
<tr><td></td>
    <td><b>zeta2</b> = const.</td>
    <td>Re &ge; Re_turbulent, v &lt; 0</td></tr>
<tr><td>laminar</td>
    <td><b>c0</b>/Re</td>
    <td>both flow directions, Re small; c0 = const.</td></tr>
</table>
<p>
where
</p>
<ul>
<li> &Delta;p is the pressure drop: &Delta;p = port_a.p - port_b.p</li>
<li> v is the mean velocity.</li>
<li> &rho; is the density.</li>
<li> &zeta; is the loss factor that depends on the geometry of
     the pipe. In the turbulent flow regime, it is assumed that
     &zeta; is constant and is given by \"zeta1\" and
     \"zeta2\" depending on the flow direction.<br>
     When the Reynolds number Re is below \"Re_turbulent\", the
     flow is laminar for small flow velocities. For higher 
     velocities there is a transition region from 
     laminar to turbulent flow. The loss factor for
     laminar flow at small velocities is defined by the often occuring
     approximation c0/Re. If c0 is different for the two
     flow directions, the mean value has to be used 
     (c0 = (c0_ab + c0_ba)/2).<li>
<li> The equation \"&Delta;p = 0.5*&zeta;*&rho;*v*|v|\" is either with
     respect to port_a or to port_b, depending on the definition
     of the particular loss factor &zeta; (in some references loss
     factors are defined with respect to port_a, in other references
     with respect to port_b).</li>
 
<li> Re = |v|*D_Re*&rho;/&eta; = |m_flow|*D_Re/(A_Re*&eta;) 
     is the Reynolds number at the smallest cross
     section area. This is often at port_a or at port_b, but can
     also be between the two ports. In the record, the diameter
     D_Re of this smallest cross section area has to be provided, as
     well, as Re_turbulent, the absolute value of the 
     Reynolds number at which
     the turbulent flow starts. If Re_turbulent is different for
     the two flow directions, use the smaller value as Re_turbulent.</li>
<li> D is the diameter of the pipe. If the pipe has not a 
     circular cross section, D = 4*A/P, where A is the cross section
     area and P is the wetted perimeter.</li>
<li> A is the cross section area with A = &pi;(D/2)^2.
<li> &eta; is the dynamic viscosity.</li>
</ul>
<p>
The laminar and the transition region is usually of
not much technical interest because the operating point is
mostly in the turbulent regime. For simplification and for
numercial reasons, this whole region is described by two
polynomials of third order, one polynomial for m_flow &ge; 0 
and one for m_flow &lt; 0. The polynomials start at 
Re = |m_flow|*4/(&pi;*D_Re*&eta;), where D_Re is the
smallest diameter between port_a and port_b.
The common derivative
of the two polynomials at Re = 0 is
computed from the equation \"c0/Re\". Note, the pressure drop
equation above in the laminar region is always defined
with respect to the smallest diameter D_Re.
</p>
<p>
If no data for c0 is available, the derivative at Re = 0 is computed in such
a way, that the second derivatives of the two polynomials
are identical at Re = 0. The polynomials are constructed, such that
they smoothly touch the characteristic curves in the turbulent
regions. The whole characteristic is therefore <b>continuous</b>
and has a <b>finite</b>, <b>continuous first derivative everywhere</b>.
In some cases, the constructed polynomials would \"vibrate\". This is 
avoided by reducing the derivative at Re=0 in such a way that
the polynomials are guaranteed to be monotonically increasing.
The used sufficient criteria for monotonicity follows from:
</p>
 
<dl>
<dt> Fritsch F.N. and Carlson R.E. (1980):</dt>
<dd> <b>Monotone piecewise cubic interpolation</b>.
     SIAM J. Numerc. Anal., Vol. 17, No. 2, April 1980, pp. 238-246</dd>
</dl>
</html>"));

      end LossFactorData;

      function massFlowRate_dp
      "Return mass flow rate from constant loss factor data and pressure drop (m_flow = f(dp))"

        input SI.Pressure dp "Pressure drop (dp = port_a.p - port_b.p)";
        input SI.Density d_a "Density at port_a";
        input SI.Density d_b "Density at port_b";
        input LossFactorData data
        "Constant loss factors for both flow directions";
        input SI.AbsolutePressure dp_small = 1
        "Turbulent flow if |dp| >= dp_small";
        output SI.MassFlowRate m_flow "Mass flow rate from port_a to port_b";

      algorithm
        /*
   dp = 0.5*zeta*d*v*|v|
      = 0.5*zeta*d*1/(d*A)^2 * m_flow * |m_flow|
      = 0.5*zeta/A^2 *1/d * m_flow * |m_flow|
      = k/d * m_flow * |m_flow| 
   k  = 0.5*zeta/A^2
      = 0.5*zeta/(pi*(D/2)^2)^2
      = 8*zeta/(pi*D^2)^2
   kinv = 1/k;
  */
      m_flow := OpenHydraulics.Utilities.regRoot2(
              dp,
              dp_small,
              d_a*data.kinv1,
              d_b*data.kinv2);
        annotation (smoothOrder=1, Documentation(info="<html>
<p>
Compute mass flow rate from constant loss factor and pressure drop (m_flow = f(dp)).
For small pressure drops (dp &lt; dp_small), the characteristic is approximated by 
a polynomial in order to have a finite derivative at zero mass flow rate.
</p>
</html>"));
      end massFlowRate_dp;

      function massFlowRate_dp_and_Re
      "Return mass flow rate from constant loss factor data, pressure drop and Re (m_flow = f(dp))"

        input SI.Pressure dp "Pressure drop (dp = port_a.p - port_b.p)";
        input SI.Density d_a "Density at port_a";
        input SI.Density d_b "Density at port_b";
        input SI.DynamicViscosity eta_a "Dynamic viscosity at port_a";
        input SI.DynamicViscosity eta_b "Dynamic viscosity at port_b";
        input LossFactorData data
        "Constant loss factors for both flow directions";
        output SI.MassFlowRate m_flow "Mass flow rate from port_a to port_b";

    protected
        constant Real pi=Modelica.Constants.pi;
        Real k0= 2*data.c0/(pi*data.D_Re^3);
        Real yd0
        "Derivative of m_flow=m_flow(dp) at zero, if data.zetaLaminarKnown";
        SI.AbsolutePressure dp_turbulent
        "The turbulent region is: |dp| >= dp_turbulent";
      algorithm
      /*
Turbulent region:
   Re = m_flow*(4/pi)/(D_Re*eta)  
   dp = 0.5*zeta*d*v*|v|
      = 0.5*zeta*d*1/(d*A)^2 * m_flow * |m_flow|
      = 0.5*zeta/A^2 *1/d * m_flow * |m_flow|
      = k/d * m_flow * |m_flow| 
   k  = 0.5*zeta/A^2
      = 0.5*zeta/(pi*(D/2)^2)^2
      = 8*zeta/(pi*D^2)^2
   m_flow_turbulent = (pi/4)*D_Re*eta*Re_turbulent
   dp_turbulent     =  k/d *(D_Re*eta*pi/4)^2 * Re_turbulent^2
 
   The start of the turbulent region is computed with mean values
   of dynamic viscosity eta and density rho. Otherwise, one has
   to introduce different "delta" values for both flow directions.
   In order to simplify the approach, only one delta is used.  
 
Laminar region:
   dp = 0.5*zeta/(A^2*d) * m_flow * |m_flow|
      = 0.5 * c0/(|m_flow|*(4/pi)/(D_Re*eta)) / ((pi*(D_Re/2)^2)^2*d) * m_flow*|m_flow|
      = 0.5 * c0*(pi/4)*(D_Re*eta) * 16/(pi^2*D_Re^4*d) * m_flow*|m_flow|
      = 2*c0/(pi*D_Re^3) * eta/d * m_flow
      = k0 * eta/d * m_flow
   k0 = 2*c0/(pi*D_Re^3)
 
   In order that the derivative of dp=f(m_flow) is continuous 
   at m_flow=0, the mean values of eta and d are used in the
   laminar region: eta/d = (eta_a + eta_b)/(d_a + d_b)
   If data.zetaLaminarKnown = false then eta_a and eta_b are potentially zero
   (because dummy values) and therefore the division is only performed
   if zetaLaminarKnown = true.
*/
         // guard agains the case were the D_Re=0 and thus kinv=0
         dp_turbulent := (1/data.kinv1 + 1/data.kinv2)/(d_a + d_b)*((eta_a + eta_b)*data.D_Re*pi/8)^2
                         *data.Re_turbulent^2;
         yd0 :=if data.zetaLaminarKnown then
                  (d_a + d_b)/(k0*(eta_a + eta_b)) else 0;
      m_flow := OpenHydraulics.Utilities.regRoot2(
              dp,
              dp_turbulent,
              d_a*data.kinv1,
              d_b*data.kinv2,
              data.zetaLaminarKnown,
              yd0);
        annotation (smoothOrder=1, Documentation(info="<html>
<p>
Compute mass flow rate from constant loss factor and pressure drop (m_flow = f(dp)).
If the Reynolds-number Re &ge; data.Re_turbulent, the flow
is treated as a turbulent flow with constant loss factor zeta.
If the Reynolds-number Re &lt; data.Re_turbulent, the flow
is laminar and/or in a transition region between laminar and
turbulent. This region is approximated by two
polynomials of third order, one polynomial for m_flow &ge; 0 
and one for m_flow &lt; 0. 
The common derivative
of the two polynomials at Re = 0 is
computed from the equation \"data.c0/Re\". 
</p>
<p>
If no data for c0 is available, the derivative at Re = 0 is computed in such
a way, that the second derivatives of the two polynomials
are identical at Re = 0. The polynomials are constructed, such that
they smoothly touch the characteristic curves in the turbulent
regions. The whole characteristic is therefore <b>continuous</b>
and has a <b>finite</b>, <b>continuous first derivative everywhere</b>.
In some cases, the constructed polynomials would \"vibrate\". This is 
avoided by reducing the derivative at Re=0 in such a way that
the polynomials are guaranteed to be monotonically increasing.
The used sufficient criteria for monotonicity follows from:
</p>
 
<dl>
<dt> Fritsch F.N. and Carlson R.E. (1980):</dt>
<dd> <b>Monotone piecewise cubic interpolation</b>.
     SIAM J. Numerc. Anal., Vol. 17, No. 2, April 1980, pp. 238-246</dd>
</dl>
</html>"));
      end massFlowRate_dp_and_Re;

      function massFlowRate_dp_WallFriction
      "Return mass flow rate from constant loss factor data, pressure drop and Re (m_flow = f(dp))"
        input SI.Pressure dp "Pressure drop (dp = port_a.p - port_b.p)";
        input SI.Density d_a "Density at port_a";
        input SI.Density d_b "Density at port_b";
        input SI.DynamicViscosity eta_a
        "Dynamic viscosity at port_a (dummy if use_eta = false)";
        input SI.DynamicViscosity eta_b
        "Dynamic viscosity at port_b (dummy if use_eta = false)";
        input SI.Length length "Length of pipe";
        input SI.Diameter diameter "Inner (hydraulic) diameter of pipe";
        input SI.Length roughness(min=0) = 2.5e-5
        "Absolute roughness of pipe, with a default for a smooth steel pipe";
        output SI.MassFlowRate m_flow "Mass flow rate from port_a to port_b";

    protected
        constant Real pi = Modelica.Constants.pi;
        Real Delta = roughness/diameter "Relative roughness";
        SI.ReynoldsNumber Re1 = (745*Modelica.Math.exp(if Delta <= 0.0065 then 1 else 0.0065/Delta))^0.97
        "Re leaving laminar curve";
        SI.ReynoldsNumber Re2 = 4000 "Re entering turbulent curve";
        SI.DynamicViscosity eta "Upstream viscosity";
        SI.Density d "Upstream density";
        SI.ReynoldsNumber Re "Reynolds number";
        Real lambda2 "Modified friction coefficient (= lambda*Re^2)";

        function interpolateInRegion2
           input Real Re_turbulent;
           input SI.ReynoldsNumber Re1;
           input SI.ReynoldsNumber Re2;
           input Real Delta;
           input Real lambda2;
           output SI.ReynoldsNumber Re;
          // point lg(lambda2(Re1)) with derivative at lg(Re1)
      protected
          Real x1=Modelica.Math.log10(64*Re1);
          Real y1=Modelica.Math.log10(Re1);
          Real yd1=1;

          // Point lg(lambda2(Re2)) with derivative at lg(Re2)
          Real aux1=(0.5/Modelica.Math.log(10))*5.74*0.9;
          Real aux2=Delta/3.7 + 5.74/Re2^0.9;
          Real aux3=Modelica.Math.log10(aux2);
          Real L2=0.25*(Re2/aux3)^2;
          Real aux4=2.51/sqrt(L2) + 0.27*Delta;
          Real aux5=-2*sqrt(L2)*Modelica.Math.log10(aux4);
          Real x2=Modelica.Math.log10(L2);
          Real y2=Modelica.Math.log10(aux5);
          Real yd2=0.5 + (2.51/Modelica.Math.log(10))/(aux5*aux4);

          // Constants: Cubic polynomial between lg(Re1) and lg(Re2)
          Real diff_x=x2 - x1;
          Real m=(y2 - y1)/diff_x;
          Real c2=(3*m - 2*yd1 - yd2)/diff_x;
          Real c3=(yd1 + yd2 - 2*m)/(diff_x*diff_x);
          Real lambda2_1=64*Re1;
          Real dx;
        algorithm
           dx := Modelica.Math.log10(lambda2/lambda2_1);
           Re := Re1*(lambda2/lambda2_1)^(1 + dx*(c2 + dx*c3));
           annotation(smoothOrder=1);
        end interpolateInRegion2;

      algorithm
        // Determine upstream density, upstream viscosity, and lambda2
        d       := if dp >= 0 then d_a else d_b;
        eta     := if dp >= 0 then eta_a else eta_b;
        lambda2 := abs(dp)*2*diameter^3*d/(length*eta*eta);

        // Determine Re under the assumption of laminar flow
        Re := lambda2/64;

        // Modify Re, if turbulent flow
        if Re > Re1 then
           Re :=-2*sqrt(lambda2)*Modelica.Math.log10(2.51/sqrt(lambda2) + 0.27*Delta);
           if Re < Re2 then
              Re := interpolateInRegion2(Re, Re1, Re2, Delta, lambda2);
           end if;
        end if;

        // Determine mass flow rate
        m_flow := (pi*diameter/4)*eta*(if dp >= 0 then Re else -Re);
      end massFlowRate_dp_WallFriction;

      function pressureLoss_m_flow
      "Return pressure drop from constant loss factor and mass flow rate (dp = f(m_flow))"

        input SI.MassFlowRate m_flow "Mass flow rate from port_a to port_b";
        input SI.Density d_a "Density at port_a";
        input SI.Density d_b "Density at port_b";
        input LossFactorData data
        "Constant loss factors for both flow directions";
        input SI.MassFlowRate m_flow_small = 0.01
        "Turbulent flow if |m_flow| >= m_flow_small";
        output SI.Pressure dp "Pressure drop (dp = port_a.p - port_b.p)";

      algorithm
        /*
   dp = 0.5*zeta*d*v*|v|
      = 0.5*zeta*d*1/(d*A)^2 * m_flow * |m_flow|
      = 0.5*zeta/A^2 *1/d * m_flow * |m_flow|
      = k/d * m_flow * |m_flow| 
   k  = 0.5*zeta/A^2
      = 0.5*zeta/(pi*(D/2)^2)^2
      = 8*zeta/(pi*D^2)^2
  */
      dp := OpenHydraulics.Utilities.regSquare2(
              m_flow,
              m_flow_small,
              1/(d_a*data.kinv1),
              1/(d_b*data.kinv2));
        annotation (smoothOrder=1, Documentation(info="<html>
<p>
Compute pressure drop from constant loss factor and mass flow rate (dp = f(m_flow)).
For small mass flow rates(|m_flow| &lt; m_flow_small), the characteristic is approximated by 
a polynomial in order to have a finite derivative at zero mass flow rate.
</p>
</html>"));
      end pressureLoss_m_flow;

      function pressureLoss_m_flow_and_Re
      "Return pressure drop from constant loss factor, mass flow rate and Re (dp = f(m_flow))"

        input SI.MassFlowRate m_flow "Mass flow rate from port_a to port_b";
        input SI.Density d_a "Density at port_a";
        input SI.Density d_b "Density at port_b";
        input SI.DynamicViscosity eta_a "Dynamic viscosity at port_a";
        input SI.DynamicViscosity eta_b "Dynamic viscosity at port_b";
        input LossFactorData data
        "Constant loss factors for both flow directions";
        output SI.Pressure dp "Pressure drop (dp = port_a.p - port_b.p)";

    protected
        constant Real pi=Modelica.Constants.pi;
        Real k0 = 2*data.c0/(pi*data.D_Re^3);
        Real yd0
        "Derivative of dp = f(m_flow) at zero, if data.zetaLaminarKnown";
        SI.MassFlowRate m_flow_turbulent
        "The turbulent region is: |m_flow| >= m_flow_turbulent";
      algorithm
      /*
Turbulent region:
   Re = m_flow*(4/pi)/(D_Re*eta)  
   dp = 0.5*zeta*d*v*|v|
      = 0.5*zeta*d*1/(d*A)^2 * m_flow * |m_flow|
      = 0.5*zeta/A^2 *1/d * m_flow * |m_flow|
      = k/d * m_flow * |m_flow| 
   k  = 0.5*zeta/A^2
      = 0.5*zeta/(pi*(D/2)^2)^2
      = 8*zeta/(pi*D^2)^2
   m_flow_turbulent = (pi/4)*D_Re*eta*Re_turbulent
   dp_turbulent     =  k/d *(D_Re*eta*pi/4)^2 * Re_turbulent^2
 
   The start of the turbulent region is computed with mean values
   of dynamic viscosity eta and density rho. Otherwise, one has
   to introduce different "delta" values for both flow directions.
   In order to simplify the approach, only one delta is used.  
 
Laminar region:
   dp = 0.5*zeta/(A^2*d) * m_flow * |m_flow|
      = 0.5 * c0/(|m_flow|*(4/pi)/(D_Re*eta)) / ((pi*(D_Re/2)^2)^2*d) * m_flow*|m_flow|
      = 0.5 * c0*(pi/4)*(D_Re*eta) * 16/(pi^2*D_Re^4*d) * m_flow*|m_flow|
      = 2*c0/(pi*D_Re^3) * eta/d * m_flow
      = k0 * eta/d * m_flow
   k0 = 2*c0/(pi*D_Re^3)
 
   In order that the derivative of dp=f(m_flow) is continuous 
   at m_flow=0, the mean values of eta and d are used in the
   laminar region: eta/d = (eta_a + eta_b)/(d_a + d_b)
   If data.zetaLaminarKnown = false then eta_a and eta_b are potentially zero
   (because dummy values) and therefore the division is only performed
   if zetaLaminarKnown = true.
*/
        m_flow_turbulent :=(pi/8)*data.D_Re*(eta_a + eta_b)*data.Re_turbulent;
        yd0 :=if data.zetaLaminarKnown then k0*(eta_a + eta_b)/(d_a + d_b) else 0;
      dp := OpenHydraulics.Utilities.regSquare2(
              m_flow,
              m_flow_turbulent,
              1/(d_a*data.kinv1),
              1/(d_b*data.kinv2),
              data.zetaLaminarKnown,
              yd0);
        annotation (smoothOrder=1, Documentation(info="<html>
<p>
Compute pressure drop from constant loss factor and mass flow rate (dp = f(m_flow)).
If the Reynolds-number Re &ge; data.Re_turbulent, the flow
is treated as a turbulent flow with constant loss factor zeta.
If the Reynolds-number Re &lt; data.Re_turbulent, the flow
is laminar and/or in a transition region between laminar and
turbulent. This region is approximated by two
polynomials of third order, one polynomial for m_flow &ge; 0 
and one for m_flow &lt; 0. 
The common derivative
of the two polynomials at Re = 0 is
computed from the equation \"data.c0/Re\". 
</p>
<p>
If no data for c0 is available, the derivative at Re = 0 is computed in such
a way, that the second derivatives of the two polynomials
are identical at Re = 0. The polynomials are constructed, such that
they smoothly touch the characteristic curves in the turbulent
regions. The whole characteristic is therefore <b>continuous</b>
and has a <b>finite</b>, <b>continuous first derivative everywhere</b>.
In some cases, the constructed polynomials would \"vibrate\". This is 
avoided by reducing the derivative at Re=0 in such a way that
the polynomials are guaranteed to be monotonically increasing.
The used sufficient criteria for monotonicity follows from:
</p>
 
<dl>
<dt> Fritsch F.N. and Carlson R.E. (1980):</dt>
<dd> <b>Monotone piecewise cubic interpolation</b>.
     SIAM J. Numerc. Anal., Vol. 17, No. 2, April 1980, pp. 238-246</dd>
</dl>
</html>"));
      end pressureLoss_m_flow_and_Re;

      function pressureLoss_m_flow_WallFriction
      "Return pressure drop from constant loss factor, mass flow rate and Re (dp = f(m_flow))"
        input SI.MassFlowRate m_flow "Mass flow rate from port_a to port_b";
        input SI.Density d_a "Density at port_a";
        input SI.Density d_b "Density at port_b";
        input SI.DynamicViscosity eta_a
        "Dynamic viscosity at port_a (dummy if use_eta = false)";
        input SI.DynamicViscosity eta_b
        "Dynamic viscosity at port_b (dummy if use_eta = false)";
        input SI.Length length "Length of pipe";
        input SI.Diameter diameter "Inner (hydraulic) diameter of pipe";
        input SI.Length roughness(min=0) = 2.5e-5
        "Absolute roughness of pipe, with a default for a smooth steel pipe";
        output SI.Pressure dp "Pressure drop (dp = port_a.p - port_b.p)";

    protected
          constant Real pi = Modelica.Constants.pi;
          Real Delta = roughness/diameter "Relative roughness";
          SI.ReynoldsNumber Re1 = 745*Modelica.Math.exp(if Delta <= 0.0065 then 1 else 0.0065/Delta)
        "Re leaving laminar curve";
          SI.ReynoldsNumber Re2 = 4000 "Re entering turbulent curve";
          SI.DynamicViscosity eta "Upstream viscosity";
          SI.Density d "Upstream density";
          SI.ReynoldsNumber Re "Reynolds number";
          Real lambda2 "Modified friction coefficient (= lambda*Re^2)";

          function interpolateInRegion2
             input SI.ReynoldsNumber Re;
             input SI.ReynoldsNumber Re1;
             input SI.ReynoldsNumber Re2;
             input Real Delta;
             output Real lambda2;
             // point lg(lambda2(Re1)) with derivative at lg(Re1)
      protected
            Real x1 = Modelica.Math.log10(Re1);
            Real y1 = Modelica.Math.log10(64*Re1);
            Real yd1=1;

            // Point lg(lambda2(Re2)) with derivative at lg(Re2)
            Real aux1=(0.5/Modelica.Math.log(10))*5.74*0.9;
            Real aux2=Delta/3.7 + 5.74/Re2^0.9;
            Real aux3=Modelica.Math.log10(aux2);
            Real L2=0.25*(Re2/aux3)^2;
            Real aux4=2.51/sqrt(L2) + 0.27*Delta;
            Real aux5=-2*sqrt(L2)*Modelica.Math.log10(aux4);
            Real x2 =  Modelica.Math.log10(Re2);
            Real y2 =  Modelica.Math.log10(L2);
            Real yd2 = 2 + 4*aux1/(aux2*aux3*(Re2)^0.9);

            // Constants: Cubic polynomial between lg(Re1) and lg(Re2)
            Real diff_x=x2 - x1;
            Real m=(y2 - y1)/diff_x;
            Real c2=(3*m - 2*yd1 - yd2)/diff_x;
            Real c3=(yd1 + yd2 - 2*m)/(diff_x*diff_x);
            Real dx;
          algorithm
             dx := Modelica.Math.log10(Re/Re1);
             lambda2 := 64*Re1*(Re/Re1)^(1 + dx*(c2 + dx*c3));
             annotation(smoothOrder=1);
          end interpolateInRegion2;
      algorithm
          // Determine upstream density and upstream viscosity
          d       :=if m_flow >= 0 then d_a else d_b;
          eta     :=if m_flow >= 0 then eta_a else eta_b;

          // Determine Re, lambda2 and pressure drop
          Re :=(4/pi)*abs(m_flow)/(diameter*eta);
          lambda2 := if Re <= Re1 then 64*Re else
                    (if Re >= Re2 then 0.25*(Re/Modelica.Math.log10(Delta/3.7 + 5.74/Re^0.9))^2 else
                     interpolateInRegion2(Re, Re1, Re2, Delta));
          dp :=length*eta*eta/(2*d*diameter*diameter*diameter)*
               (if m_flow >= 0 then lambda2 else -lambda2);
          annotation (smoothOrder=1);
      end pressureLoss_m_flow_WallFriction;

      function lossConstant_D_zeta "Return the loss constant 8*zeta/(pi^2*D^4)"

        input SI.Diameter D "Diameter at port_a or port_b";
        input Real zeta
        "Constant pressure loss factor with respect to D (i.e., either port_a or port_b)";
        output Real kinv "Loss constant (= pi^2*D^4/(8*zeta))";
      algorithm
        kinv := Modelica.Constants.pi*Modelica.Constants.pi*D*D*D*D/(8*zeta);
      end lossConstant_D_zeta;

      function ReynoldsNumber_m_flow
      "Return Reynolds number as a function of mass flow rate m_flow"

        input SI.MassFlowRate m_flow "Mass flow rate";
        input SI.DynamicViscosity eta "Dynamic viscosity of medium";
        input SI.Diameter diameter "Diameter of pipe/orifice";
        output SI.ReynoldsNumber Re "Reynolds number";
      algorithm
        Re :=abs(m_flow)*(4/Modelica.Constants.pi)/(diameter*eta);
      end ReynoldsNumber_m_flow;

      partial model PartialPumpMotor
      "Partial model for displacement pumps or motors"

        // the variables
        SI.Volume D "Pump displacement";
        // the rotational variables
        SI.AngularVelocity omega "Shaft angular velocity";
        NonSI.AngularVelocity_rpm N=Cv.to_rpm(omega) "Shaft rotational speed";
        SI.Torque tau "Torque needed for pumping fluid";
        SI.Power Wmech "Mechanical power applied to fluid";

        extends PumpMotorInterface;

      equation
        // rotational equations
        omega = der(phi);
        tau = flange_a.tau + flange_b.tau;
        Wmech = omega*tau "Mechanical work";

        // relate torque to pressure
        tau = -D*dp/(2*Modelica.Constants.pi);

        // relate flow to rotational velocity
        q_flow_a = D*N/60;

        // mass balance
        0 = port_a.m_flow + port_b.m_flow "Mass balance";

        // energy balance
      //  0 = port_a.H_flow + port_b.H_flow + Wmech "Energy balance";
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-100,-100},{100,100}}),
                            graphics));
      end PartialPumpMotor;

      partial model PumpMotorInterface
      "Interface for displacement pumps or motors"

        extends OpenHydraulics.Interfaces.VerticalTwoPort;
        extends Modelica.Mechanics.Rotational.Interfaces.PartialTwoFlanges;

        SI.Angle phi "Angle of rotation of pump";

      equation
        flange_a.phi = phi;
        flange_b.phi = phi;
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={
              Ellipse(
                extent={{-54,54},{54,-54}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{0,-54},{0,-100}}, color={255,0,0}),
              Line(points={{0,100},{0,54}}, color={255,0,0}),
              Rectangle(
                extent={{-90,8},{-54,-8}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{54,8},{90,-8}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(extent={{100,-54},{-100,-90}}, textString="%name"),
              Text(
                extent={{10,-80},{40,-120}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="T"),
              Text(
                extent={{10,120},{40,80}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="P")}),
          Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics={
              Ellipse(
                extent={{-54,54},{54,-54}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-90,8},{-54,-8}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{54,8},{90,-8}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{0,100},{0,54}}, color={255,0,0}),
              Line(points={{0,-54},{0,-100}}, color={255,0,0})}));
      end PumpMotorInterface;
    end BaseClasses;
    annotation (Documentation(info="<html>
<h4><font color=\"#008000\" size=5>Overview</font></h4>  
<p>The OpenHydraulics/Basic package includes models of basic physical phenomena relevant to the hydraulics domain.  
These basic models are used in the components package to model actual hydraulic components.</p>
<h4><font color=\"#008000\" size=5>Licensing</font></h4>
<p>
The OpenHydraulics/Basic package is licensed by Georgia Institute of Technology under the
<a href=\"http://www.modelica.org/licenses/ModelicaLicense2\"><b>Modelica License 2</b></a>.</p> 
<p><b>Copyright &copy; 2008-2013, Georgia Insitute of Technology</b>
</p>
<p>
This Modelica package is free software and the use is completely at your own risk; 
it can be redistributed and/or modified under the terms of the Modelica License 2. 
For license conditions (including the disclaimer of warranty) see 
<a href=\"modelica://Hydraulics.UsersGuide.ModelicaLicense2\">Hydraulics.UsersGuide.ModelicaLicense2</a> or visit 
<a href=\"http://www.modelica.org/licenses/ModelicaLicense2\">http://www.modelica.org/licenses/ModelicaLicense2</a>.
</p>
</html>
"));
  end Basic;


  package Components "Models for typical hydraulic components"
    extends OpenHydraulics.Interfaces.VariantLibrary;

    package Cylinders
      extends OpenHydraulics.Interfaces.VariantLibrary;

      model DoubleActingCylinder
        import Modelica.Constants.pi;

        // the parameters
        parameter SI.Length boreDiameter = 0.05 "Bore diameter"
          annotation (Dialog(tab="Sizing",group="Dimensions"));
        parameter SI.Length rodDiameter = 0.01 "Rod diameter"
          annotation (Dialog(tab="Sizing",group="Dimensions"));
        parameter SI.Length strokeLength = 0.1 "Stroke length of the cylinder"
          annotation (Dialog(tab="Sizing",group="Dimensions"));
        parameter SI.Length closedLength = 0.3
        "Total length of cylinder fully retracted"
          annotation (Dialog(tab="Sizing",group="Dimensions"));
        parameter SI.VolumeFlowRate q_nom = 0.01
        "Nominal flow rate for in/outlet"
          annotation (Dialog(tab="Sizing",group="Hydraulics"));
        parameter SI.Pressure dp_nom = 1e4 "Nominal pressure drop for q_nom"
          annotation (Dialog(tab="Sizing",group="Hydraulics"));
        parameter SI.AbsolutePressure maxPressure = 3e7
        "Maximum rated pressure"
          annotation (Dialog(tab="Sizing",group="Hydraulics"));

        // dynamics parameters
        parameter SI.Mass pistonMass = 0 "Mass of the piston and rod"
          annotation (Dialog(tab="Dynamics"));
        parameter Real damping( final unit="N/ (m/s)",
          final min=0) = 1e4 "damping between piston and cylinder [N/ (m/s)]"
          annotation (Dialog(tab="Dynamics"));

        parameter SI.Distance endOfTravelDistance = 0.01
        "Maximum distance beyond the end of travel point"
          annotation (Dialog(tab="Dynamics",group="End-of-travel"));
        parameter Real stopStiffness(
          final unit="N/m",
          final min=0) = 1e9 "stiffness at impact"
          annotation(Dialog(tab="Dynamics",group="End-of-travel"));
        parameter Real stopDamping(
          final unit="N.s/m",
          final min=-1000) = 1e12 "damping at impact"
          annotation(Dialog(tab="Dynamics",group="End-of-travel"));

        // cushion parameters
        parameter Boolean useCushionHead = true
        "false = constant restriction with q_nom & dp_nom"
          annotation(Evaluate=true, Dialog(tab="Cushions",group="Head Cushion"));
        parameter Real cushionTableHead[:, :]=[0,0.001;0.001,0.001;0.029,0.01;0.03,1]
        "Cushion flow rate (1st col = s_rel; 2nd col = fraction of q_nom)"
          annotation(Dialog(tab="Cushions",group="Head Cushion",enable=useCushionHead));
        parameter Modelica.Blocks.Types.Smoothness smoothnessHead=
          Modelica.Blocks.Types.Smoothness.LinearSegments
        "smoothness of table interpolation"
          annotation(Dialog(tab="Cushions",group="Head Cushion",enable=useCushionHead));
        parameter Boolean useCushionRod = true
        "false = constant restriction with q_nom & dp_nom"
          annotation(Evaluate=true, Dialog(tab="Cushions",group="Rod Cushion"));
        parameter Real cushionTableRod[:, :]=[0,0.001;0.001,0.001;0.029,0.01;0.03,1]
        "Cushion flow rate (1st col = s_rel; 2nd col = fraction of q_nom)"
          annotation(Dialog(tab="Cushions",group="Rod Cushion",enable=useCushionRod));
        parameter Modelica.Blocks.Types.Smoothness smoothnessRod=
          Modelica.Blocks.Types.Smoothness.LinearSegments
        "smoothness of table interpolation"
          annotation(Dialog(tab="Cushions",group="Rod Cushion",enable=useCushionRod));

        // sealing parameters
        parameter SI.Length L_A2B = 0.01
        "Length of seal between chambers A and B"
          annotation (Dialog(tab="Seals",group="Piston"));
        parameter SI.Diameter D_A2B = 1e-5
        "Hydraulic diameter of seal between chambers A and B"
          annotation (Dialog(tab="Seals",group="Piston"));
        parameter SI.Length L_A2Env = 0.01
        "Length of seal between chamber A and Environment"
          annotation (Dialog(tab="Seals",group="Piston"));
        parameter SI.Diameter D_A2Env = 0
        "Hydraulic diameter of seal between chamber A and Environment"
          annotation (Dialog(tab="Seals",group="Piston"));
        parameter SI.Length L_B2Env = 0.01
        "Length of seal between chamber B and Environment"
          annotation (Dialog(tab="Seals",group="Piston"));
        parameter SI.Diameter D_B2Env = 0
        "Hydraulic diameter of seal between chamber B and Environment"
          annotation (Dialog(tab="Seals",group="Piston"));

        // initialization parameters
        parameter Modelica.Mechanics.MultiBody.Types.Init initType=
            Modelica.Mechanics.MultiBody.Types.Init.Free
        "Type of initialization (defines usage of start values below)"
          annotation (Dialog(tab="Initialization",group="Mechanical"));
        parameter SI.Distance s_init = 0 "Initial position >0 and <stroke"
          annotation (Dialog(tab="Initialization",group="Mechanical"));
        parameter SI.Velocity v_init = 0 "Initial velocity"
          annotation (Dialog(tab="Initialization",group="Mechanical"));
        parameter SI.Acceleration a_init = 0 "Initial acceleration"
          annotation (Dialog(tab="Initialization",group="Mechanical"));
        parameter Boolean fixHeadPressure = false
        "Initialize the pressure at the head side"
          annotation (Dialog(tab="Initialization",group="Fluid"));
        parameter Boolean fixRodPressure = false
        "Initialize the pressure at the rod side"
          annotation (Dialog(tab="Initialization",group="Fluid"));

        // the connectors
        OpenHydraulics.Interfaces.FluidPort port_a
          annotation (Placement(transformation(extent={{-90,-90},{-70,-70}},
                rotation=0)));
        OpenHydraulics.Interfaces.FluidPort port_b
          annotation (Placement(transformation(extent={{90,-90},{70,-70}},
                rotation=0)));

        // the components
        Basic.FluidPower2MechTrans cylinderChamberHead(
          A = pi/4*boreDiameter^2,
          stopStiffness = stopStiffness,
          stopDamping = stopDamping,
          n_ports=3,
          p_init=p_init,
          maxPressure=maxPressure*10)
          annotation (Placement(transformation(extent={{-50,-10},{-30,10}},
                rotation=0)));

        Basic.FluidPower2MechTrans cylinderChamberRod(
          A=pi/4*(boreDiameter^2 - rodDiameter^2),
          stopStiffness = stopStiffness,
          stopDamping = stopDamping,
          n_ports=3,
          p_init=p_init,
          maxPressure=maxPressure*10)
          annotation (Placement(transformation(extent={{30,-10},{50,10}},
                rotation=0)));
        BaseClasses.CylinderCushion cushionHead(
          cushionTable=if useCushionHead then cushionTableHead else [0,0.001;strokeLength/1000,1;1,1],
          smoothness=smoothnessHead,
          q_nom=q_nom,
          dp_nom=dp_nom,
          dp_relief=maxPressure*0.9)
          annotation (Placement(transformation(extent={{-50,-60},{-30,-40}},
                rotation=0)));
        BaseClasses.CylinderCushion cushionRod(
          cushionTable=if useCushionRod then cushionTableRod else [0,0.001;strokeLength/1000,1;1,1],
          smoothness=smoothnessHead,
          q_nom=q_nom,
          dp_nom=dp_nom,
          dp_relief=maxPressure*0.9)
          annotation (Placement(transformation(extent={{30,-60},{50,-40}},
                rotation=0)));
        Basic.LaminarRestriction leakage_Head2Rod(
          L=L_A2B,
          D=D_A2B)
          annotation (Placement(transformation(extent={{-10,-30},{10,-10}},
                rotation=0)));
        Modelica.Mechanics.Translational.Components.Mass piston(
                                                            m=pistonMass)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=0)));
        Modelica.Mechanics.Translational.Components.Rod cylinder(
                                                      L=strokeLength)
          annotation (Placement(transformation(extent={{-10,70},{10,90}},
                rotation=0)));
        Modelica.Mechanics.Translational.Components.Rod rod(
                                                 L=closedLength)
          annotation (Placement(transformation(extent={{70,-10},{90,10}},
                rotation=0)));
        Modelica.Mechanics.Translational.Interfaces.Flange_a flange_a
        "(left) driving flange (flange axis directed INTO cut plane, e. g. from left to right)"
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}},
                rotation=0)));
        Modelica.Mechanics.Translational.Interfaces.Flange_b flange_b
        "(right) driven flange (flange axis directed OUT OF cut plane, i. e. from right to left)"
          annotation (Placement(transformation(extent={{90,-10},{110,10}},
                rotation=0)));
        Modelica.Mechanics.Translational.Components.Damper damper(
                                                       d=damping)
          annotation (Placement(transformation(extent={{-48,58},{-28,78}},
                rotation=0)));
        Basic.ConstPressureSource envSinkA
          annotation (Placement(transformation(
              origin={-90,-20},
              extent={{-10,-10},{10,10}},
              rotation=270)));
        Basic.ConstPressureSource envSinkB
          annotation (Placement(transformation(
              origin={90,-20},
              extent={{-10,-10},{10,10}},
              rotation=90)));
        Basic.LaminarRestriction leakage_Head2Env(
          L=L_A2Env,
          D=D_A2Env)
          annotation (Placement(transformation(extent={{-74,-30},{-54,-10}},
                rotation=0)));
        Basic.LaminarRestriction leakage_Rod2Env(
          L=L_B2Env,
          D=D_B2Env)
          annotation (Placement(transformation(
              origin={64,-20},
              extent={{-10,-10},{10,10}},
              rotation=180)));
        Lines.NJunction jA(
          n_ports=2)
          annotation (Placement(transformation(extent={{-50,-90},{-30,-70}},
                rotation=0)));
        Lines.NJunction jB(
          n_ports=2)
          annotation (Placement(transformation(extent={{30,-90},{50,-70}},
                rotation=0)));

        extends OpenHydraulics.Interfaces.PartialFluidComponent;

    protected
        outer OpenHydraulics.Circuits.Environment environment;

    public
      Modelica.Blocks.Interfaces.RealOutput strokeLength_i= cylinderChamberHead.s_rel annotation (Placement(transformation(extent={{-100,76},{-120,96}})));
      initial equation
        assert(cylinderChamberHead.s_rel>=0,"Initial position is smaller than zero");
        assert(cylinderChamberRod.s_rel>=0,"Initial position is larger than strokeLength");

        // state initialization
        if initType == Modelica.Mechanics.MultiBody.Types.Init.Position then
          cylinderChamberHead.s_rel = s_init;
        elseif initType == Modelica.Mechanics.MultiBody.Types.Init.Velocity then
          cylinderChamberHead.v_rel = v_init;
        elseif initType == Modelica.Mechanics.MultiBody.Types.Init.PositionVelocity then
          cylinderChamberHead.s_rel = s_init;
          cylinderChamberHead.v_rel = v_init;
        elseif initType == Modelica.Mechanics.MultiBody.Types.Init.VelocityAcceleration then
          cylinderChamberHead.v_rel = v_init;
          piston.a = a_init;
        elseif initType == Modelica.Mechanics.MultiBody.Types.Init.SteadyState then
          cylinderChamberHead.v_rel = 0;
          piston.a = a_init;
        elseif initType == Modelica.Mechanics.MultiBody.Types.Init.PositionVelocityAcceleration then
          cylinderChamberHead.s_rel = s_init;
          cylinderChamberHead.v_rel = v_init;
          piston.a = a_init;
        elseif initType == Modelica.Mechanics.MultiBody.Types.Init.Free then
          // nothing
        else
          assert(true,"Invalid initialization type in FluidPower2MechTrans");
        end if;

        if fixHeadPressure then
          cylinderChamberHead.p_vol = p_init;
        end if;
        if fixRodPressure then
          cylinderChamberRod.p_vol = p_init;
        end if;

      equation
        when cushionRod.reliefValve.valvePositionSteadyState>0 then
          Modelica.Utilities.Streams.print("\nWARNING: Cylinder exceeds maximum pressure at the rod end.");
          Modelica.Utilities.Streams.print("         This could just be due to end-of-travel behavior.");
          Modelica.Utilities.Streams.print("         (time = "+String(time)+")");
        end when;
        when cushionHead.reliefValve.valvePositionSteadyState>0 then
          Modelica.Utilities.Streams.print("\nWARNING: Cylinder exceeds maximum pressure at the head end.");
          Modelica.Utilities.Streams.print("         This could just be due to end-of-travel behavior.");
          Modelica.Utilities.Streams.print("         (time = "+String(time)+")");
        end when;

        connect(cylinderChamberHead.flange_b, piston.flange_a)
          annotation (Line(points={{-30,0},{-10,0}}, color={0,127,0}));
        connect(rod.flange_a, piston.flange_b)
          annotation (Line(points={{70,0},{70,20},{62,20},{62,22},{58,22},{58,20},
                {14,20},{14,0},{10,0}}, color={0,127,0}));
        connect(piston.flange_b, cylinderChamberRod.flange_a)
          annotation (Line(points={{10,0},{30,0}}, color={0,127,0}));
        connect(cylinder.flange_b, cylinderChamberRod.flange_b)
          annotation (Line(points={{10,80},{60,80},{60,0},{50,0}}, color={0,127,0}));
        connect(cylinderChamberHead.flange_a, cylinder.flange_a)
          annotation (Line(points={{-50,0},{-60,0},{-60,80},{-10,80}}, color={0,
                127,0}));
        connect(cylinderChamberHead.flange_a, flange_a)
          annotation (Line(points={{-50,0},{-100,0}}, color={0,127,0}));
        connect(rod.flange_b, flange_b)
          annotation (Line(points={{90,0},{100,0}}, color={0,127,0}));
        connect(flange_a, damper.flange_a)
          annotation (Line(points={{-100,0},{-80,0},{-80,68},{-62,68},{-62,70},{
                -58,70},{-58,68},{-48,68}}, color={0,127,0}));
        connect(damper.flange_b,cylinderChamberHead. flange_b)
          annotation (Line(points={{-28,68},{-14,68},{-14,0},{-30,0}}, color={0,
                127,0}));
        connect(envSinkA.port, leakage_Head2Env.port_a)
          annotation (Line(points={{-80,-20},{-78,-20},{-74,-20}},
              color={255,0,0}));
        connect(envSinkB.port, leakage_Rod2Env.port_a)
          annotation (Line(points={{80,-20},{74,-20}}, color={255,0,0}));
        connect(port_a,jA. port[1]) annotation (Line(points={{-80,-80},{-40,-80},
                {-40,-80.5}}, color={255,0,0}));
        connect(port_b,jB. port[1]) annotation (Line(points={{80,-80},{40,-80},{
                40,-80.5}}, color={255,0,0}));

        connect(cylinderChamberHead.port[1], cushionHead.port_a) annotation (Line(
              points={{-40,-0.75},{-40,-40}}, color={255,0,0}));

        connect(cushionHead.port_b, jA.port[2]) annotation (Line(points={{-40,-60},
                {-40,-79.5}}, color={255,0,0}));
        connect(cylinderChamberHead.flange_a, cushionHead.flange_a) annotation (Line(
              points={{-50,0},{-50,-50}}, color={0,127,0}));
        connect(cylinderChamberHead.flange_b, cushionHead.flange_b) annotation (Line(
              points={{-30,0},{-30,-50}}, color={0,127,0}));
        connect(cylinderChamberRod.flange_a, cushionRod.flange_a) annotation (Line(
              points={{30,0},{30,-50}}, color={0,127,0}));
        connect(cylinderChamberRod.flange_b, cushionRod.flange_b) annotation (Line(
              points={{50,0},{50,-50}}, color={0,127,0}));
        connect(cushionRod.port_b, jB.port[2]) annotation (Line(points={{40,-60},
                {40,-79.5}}, color={255,0,0}));
        connect(cylinderChamberRod.port[1], cushionRod.port_a) annotation (Line(
              points={{40,-0.75},{40,-40}}, color={255,0,0}));
        connect(leakage_Head2Rod.port_b, cylinderChamberRod.port[2]) annotation (Line(
              points={{10,-20},{38,-20},{38,0},{40,0},{40,-0.05}}, color={255,0,0}));
        connect(leakage_Head2Rod.port_a, cylinderChamberHead.port[2]) annotation (Line(
              points={{-10,-20},{-38,-20},{-38,0},{-40,0},{-40,-0.05}}, color={
                255,0,0}));
        connect(leakage_Head2Env.port_b, cylinderChamberHead.port[3]) annotation (Line(
              points={{-54,-20},{-42,-20},{-42,0},{-40,0},{-40,0.65}}, color={255,
                0,0}));
        connect(leakage_Rod2Env.port_b, cylinderChamberRod.port[3]) annotation (Line(
              points={{54,-20},{42,-20},{42,0},{40,0},{40,0.65}}, color={255,0,0}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),
                            graphics),
                             Icon(coordinateSystem(preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}), graphics={
              Rectangle(
                extent={{-90,80},{90,-90}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-90,40},{90,-40}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{100,10},{0,-10}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-18,39},{0,-39}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{-80,-40},{-80,-40},{-80,-40},{-80,-80}}, color={255,0,
                    0}),
              Line(points={{80,-40},{80,-40},{80,-40},{80,-78}}, color={255,0,0}),
              Polygon(
                points={{-88,-40},{-80,-30},{-72,-40},{-88,-40}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{72,-40},{80,-30},{88,-40},{72,-40}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-64,-56},{-34,-96}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="A"),
              Text(
                extent={{34,-56},{64,-96}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="B"),
              Text(
                extent={{0,84},{0,60}},
                lineColor={0,0,255},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="%name"),
              Rectangle(
                extent={{-34,18},{16,-18}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{-22,-26},{8,34}}, color={0,0,0}),
              Polygon(
                points={{8,34},{-8,18},{4,12},{8,34}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid)}));
      end DoubleActingCylinder;

      package BaseClasses
        extends Modelica.Icons.BasesPackage;
        model CylinderCushion

          // the parameters
          parameter Real cushionTable[:, :]=[0,0.001;0.029,0.01;0.03,1]
          "Cushion flow rate (1st col = s_rel; 2nd col = fraction of q_nom)"
            annotation(Dialog(tab="Sizing",group="Cushion Table"));
          parameter Modelica.Blocks.Types.Smoothness smoothness=
            Modelica.Blocks.Types.Smoothness.LinearSegments
          "smoothness of table interpolation"
            annotation(Dialog(tab="Sizing",group="Cushion Table"));

          parameter SI.VolumeFlowRate q_nom = 0.01
          "Nominal flow rate at dp_nom"
            annotation(Dialog(tab="Sizing",group="Nominal Values"));
          parameter SI.AbsolutePressure dp_nom = 1e4
          "Nominal pressure drop at q_nom"
            annotation(Dialog(tab="Sizing",group="Nominal Values"));

          parameter SI.Diameter D_nom = 0.05 "Nominal diameter when fully open"
            annotation(Dialog(tab="Sizing",group="Nominal Values"));
          parameter SI.Density d_nom = 850
          "Nominal fluid density for metering curve"
            annotation(Dialog(tab="Sizing",group="Nominal Values"));
          parameter Real zeta_nom = 2 "Loss factor when fully open"
            annotation(Dialog(tab="Sizing",group="Nominal Values"));

          parameter SI.Pressure dp_relief(final min=0) = 1e20 "Relief pressure"
            annotation (Dialog(tab="Advanced"));

          // main variables
          SI.Distance s_rel = flange_b.s - flange_a.s
          "distance until end-of-travel";
          SI.Velocity v_rel = der(s_rel) "relative velocity";
          SI.Pressure dp(start=0,fixed=true) = port_a.p - port_b.p
          "Pressure drop from port_a to port_b";

          // internal component
          OpenHydraulics.Basic.VariableRestriction cushionRestriction(
            q_nom=q_nom,
            dp_nom=dp_nom,
            D_nom=D_nom,
            d_nom=d_nom,
            zeta_nom=zeta_nom,
            final min_contr=0,
            final max_contr=1,
            p_init=p_init)
            annotation (Placement(transformation(
                origin={0,0},
                extent={{10,-10},{-10,10}},
                rotation=270)));
          Valves.ReliefValve reliefValve(
            p_init=p_init,
            q_nom=q_nom,
            dp_relief=dp_relief)
            annotation (Placement(transformation(
                origin={60,-30},
                extent={{-10,-10},{10,10}},
                rotation=270)));
          Modelica.Blocks.Tables.CombiTable1D cushionTableBlock(
            table=cushionTable,
            columns=2:2,
            smoothness=smoothness)
            annotation (Placement(transformation(extent={{-60,-10},{-40,10}},
                  rotation=0)));

          // the connectors
          OpenHydraulics.Interfaces.FluidPort port_a
            annotation (Placement(transformation(extent={{-10,90},{10,110}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort port_b
            annotation (Placement(transformation(
                origin={0,-100},
                extent={{10,-10},{-10,10}},
                rotation=180)));
          Modelica.Mechanics.Translational.Interfaces.Flange_b flange_b
          "(right) driven flange (flange axis directed OUT OF cut plane)"
            annotation (Placement(transformation(extent={{90,-10},{110,10}},
                  rotation=0)));
          Modelica.Mechanics.Translational.Interfaces.Flange_a flange_a
          "(left) driving flange (flange axis directed INTO cut plane, e. g. from left to right)"
             annotation (Placement(transformation(extent={{-110,-10},{-90,10}},
                  rotation=0)));

          extends OpenHydraulics.Interfaces.PartialFluidComponent;

      protected
          Real flowFraction "fraction of flow allowed by cushion";
          Real flowFractionSteadyState "desired steady state flow fraction";
          Real flowFractionCushion
          "flow fraction as specified in cushion table";

        equation
          cushionTableBlock.u[1] = s_rel;
          cushionTableBlock.y[1] = flowFractionCushion;
          cushionRestriction.control = flowFraction;

          if flowFractionCushion<1 and s_rel>0 and v_rel<0 then
            flowFractionSteadyState = flowFractionCushion;
          else
            flowFractionSteadyState = 1;
          end if;

          der(flowFraction) = (flowFractionSteadyState - flowFraction)/0.001;

          // pure sensor without forces
          flange_a.f = 0;
          flange_b.f = 0;
          connect(port_a, cushionRestriction.port_b) annotation (Line(points={{0,100},
                  {0,10},{1.83697e-015,10}},       color={255,0,0}));

          connect(port_b, cushionRestriction.port_a) annotation (Line(points={{0,-100},
                  {0,-10},{-1.83697e-015,-10}},      color={255,0,0}));
          connect(reliefValve.port_b, port_b) annotation (Line(points={{60,-40},{
                  60,-80},{0,-80},{0,-100}}, color={255,0,0}));
          connect(port_a, reliefValve.port_a) annotation (Line(points={{0,100},{0,
                  80},{60,80},{60,-20}}, color={255,0,0}));
          annotation (
            Diagram(graphics={
                Text(
                  extent={{-98,-30},{-4,-42}},
                  lineColor={0,0,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  textString=
                       "restriction relationship"),
                Text(
                  extent={{-98,-18},{-4,-30}},
                  lineColor={0,0,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  textString=
                       "see equations section"),
                Rectangle(extent={{-98,-14},{-4,-46}}, lineColor={0,0,255})}),
            Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                    {100,100}}), graphics={
                Rectangle(
                  extent={{-80,92},{80,-88}},
                  lineColor={255,255,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-90,0},{90,0}},
                  color={0,127,0},
                  pattern=LinePattern.Dash),
                Rectangle(
                  extent={{20,56},{60,-56}},
                  lineColor={255,255,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Line(points={{-40,56},{-40,-56}}, color={0,0,0}),
                Line(points={{-28,-44},{-28,-44},{-32,-30},{-34,-20},{-36,-6},{-36,
                      6},{-34,20},{-32,30},{-28,44},{-28,44}}, color={0,0,0}),
                Line(points={{-10,-16},{-78,20}}, color={0,0,0}),
                Text(
                  extent={{-44,-74},{-6,-114}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid,
                  textString="B"),
                Text(
                  extent={{-48,120},{0,80}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid,
                  textString="A"),
                Text(
                  extent={{100,90},{-100,60}},
                  lineColor={0,0,0},
                  fillColor={255,0,0},
                  fillPattern=FillPattern.Solid,
                  textString="cushion"),
                Line(points={{56,-4},{40,-24},{24,-4}}, color={0,0,0}),
                Line(points={{34,24},{34,24},{34,24},{46,20},{34,16},{46,12},{34,
                      8},{46,4},{34,0}}, color={0,0,0}),
                Line(points={{-52,-44},{-52,-44},{-48,-30},{-46,-20},{-44,-6},{-44,
                      6},{-46,20},{-48,30},{-52,44},{-52,44}}, color={0,0,0}),
                Polygon(
                  points={{-78,20},{-62,4},{-56,16},{-78,20}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{40,56},{40,-56}}, color={0,0,0}),
                Line(points={{0,100},{0,56}}, color={0,0,0}),
                Line(points={{0,-56},{0,-100}}, color={0,0,0}),
                Line(points={{-40,-56},{40,-56}}, color={0,0,0}),
                Line(points={{-40,56},{40,56}}, color={0,0,0}),
                Ellipse(
                  extent={{30,2},{50,-18}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid)}));
        end CylinderCushion;
      end BaseClasses;
    end Cylinders;

    package Lines
      extends OpenHydraulics.Interfaces.VariantLibrary;

      model Line "Short line with one volume and wall friction"

        // sizing parameters
        parameter SI.Length L "Length of line"
          annotation(Dialog(tab="Sizing"));
        parameter SI.Diameter D "Inner (hydraulic) diameter of line"
          annotation(Dialog(tab="Sizing"));
        parameter SI.Length roughness(min=0) = 2.5e-5
        "Absolute roughness of pipe (default = smooth steel pipe)"
          annotation(Dialog(tab="Sizing"));
        parameter SI.BulkModulus lineBulkMod = 1e7 "Bulk Modulus of the line"
          annotation(Dialog(tab="Sizing"));

        // initialization parameters
        parameter Boolean uniformPressure = true
        "True if initial pressure is equal throughout line"
        annotation(Dialog(tab="Initialization"));

        // the connectors
        OpenHydraulics.Interfaces.FluidPort port_a
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}},
                  rotation=0)));
        OpenHydraulics.Interfaces.FluidPort port_b
          annotation (Placement(transformation(extent={{110,-10},{90,10}}, rotation=
                   0)));

        Basic.WallFriction wallFriction_a(
            L=L/2,
            D=D,
            roughness=roughness)
            annotation (Placement(transformation(extent={{-60,-10},{-40,10}},
                  rotation=0)));
        Basic.VolumeClosed volumeMiddle(
          volBulkMod=lineBulkMod,
          n_ports=2,
          V=Modelica.Constants.pi*(D/2)^2*L/2)
          annotation (Placement(transformation(extent={{-10,10},{10,-10}}, rotation=
                   0)));
        Basic.WallFriction wallFriction_b(
            L=L/2,
            D=D,
            roughness=roughness)
            annotation (Placement(transformation(extent={{40,-10},{60,10}},
                  rotation=0)));

        extends OpenHydraulics.Interfaces.PartialFluidComponent;

        Basic.VolumeClosed volumeA(
          volBulkMod=lineBulkMod,
          n_ports=2,
          V=Modelica.Constants.pi*(D/2)^2*L/4)
          annotation (Placement(transformation(extent={{-90,10},{-70,-10}},
                  rotation=0)));
        Basic.VolumeClosed volumeB(
          volBulkMod=lineBulkMod,
          n_ports=2,
          V=Modelica.Constants.pi*(D/2)^2*L/4)
          annotation (Placement(transformation(extent={{70,10},{90,-10}}, rotation=
                    0)));
      initial equation
        if uniformPressure then
          volumeMiddle.p_vol = port_a.p;
          volumeMiddle.p_vol = port_b.p;
        end if;
      equation

        connect(wallFriction_a.port_b, volumeMiddle.port[1])
                                                         annotation (Line(points={{-40,0},
                  {0,0},{0,0.575}},        color={255,0,0}));
        connect(wallFriction_b.port_a, volumeMiddle.port[2])
                                                          annotation (Line(points={
                  {40,0},{0,0},{0,-0.475}}, color={255,0,0}));
        connect(port_a, volumeA.port[1]) annotation (Line(points={{-100,0},{-80,0},
                  {-80,0.575}}, color={255,0,0}));
        connect(wallFriction_a.port_a, volumeA.port[2]) annotation (Line(points={{
                  -60,0},{-80,0},{-80,-0.475}}, color={255,0,0}));
        connect(port_b, volumeB.port[1]) annotation (Line(points={{100,0},{80,0},{
                  80,0.575}}, color={255,0,0}));
        connect(wallFriction_b.port_b, volumeB.port[2]) annotation (Line(points={{
                  60,0},{80,0},{80,-0.475}}, color={255,0,0}));
        annotation (defaultComponentName="line",Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
                graphics={
                Rectangle(
                  extent={{-100,20},{100,-20}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-100,6},{100,-6}},
                  lineColor={0,0,0},
                  fillPattern=FillPattern.HorizontalCylinder,
                  fillColor={255,0,0}),
                Text(
                  extent={{-100,-14},{100,-54}},
                  lineColor={0,0,255},
                  fillColor={255,0,0},
                  fillPattern=FillPattern.Solid,
                  textString="%name"),
                Text(
                  extent={{70,54},{100,14}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid,
                  textString="B"),
                Text(
                  extent={{-100,54},{-70,14}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid,
                  textString="A")}),             Documentation(info="<html>
<p>
Simple pipe model consisting of one volume, 
wall friction (with different friction correlations)
and gravity effect. This model is mostly used to demonstrate how
to build up more detailed models from the basic components.
Note, if the \"thermalPort\" is not connected, then the pipe
is totally insulated (= no thermal flow from the fluid to the
pipe wall/environment).
</p>
</html>"),Diagram(graphics));
      end Line;

      model LineNoVolume
        // the sizing parameters
        parameter SI.Length L "Length of pipe"
          annotation(Dialog(tab="Sizing"));
        parameter SI.Diameter D "Inner (hydraulic) diameter of pipe"
          annotation(Dialog(tab="Sizing"));
        parameter SI.Length roughness(min=0) = 2.5e-5
        "Absolute roughness of pipe (default = smooth steel pipe)"
          annotation(Dialog(tab="Sizing"));

        parameter Boolean from_dp = true
        "= true, use m_flow = f(dp) else dp = f(m_flow)"
          annotation (Evaluate=true, Dialog(tab="Advanced"));

        // the connectors
        OpenHydraulics.Interfaces.FluidPort port_a
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}},
                rotation=0)));
        OpenHydraulics.Interfaces.FluidPort port_b
          annotation (Placement(transformation(extent={{110,-10},{90,10}},
                rotation=0)));

        // the components
        Basic.WallFriction wallFriction(
          L=L,
          D=D,
          roughness=roughness,
          from_dp = from_dp)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=0)));

        extends OpenHydraulics.Interfaces.PartialFluidComponent;
      equation
        connect(port_a, wallFriction.port_a) annotation (Line(points={{-100,0},{
                -10,0}}, color={255,0,0}));
        connect(wallFriction.port_b, port_b) annotation (Line(points={{10,0},{100,
                0}}, color={255,0,0}));

        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                  -100,-100},{100,100}}), graphics={
              Rectangle(
                extent={{-100,20},{100,-20}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-100,6},{100,-6}},
                lineColor={0,0,0},
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,0,0}),
              Text(
                extent={{-100,54},{-70,14}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="A"),
              Text(
                extent={{70,54},{100,14}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="B"),
              Text(
                extent={{-100,-14},{100,-54}},
                lineColor={0,0,255},
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid,
                textString="%name")}),     Diagram(graphics));
      end LineNoVolume;

      model NJunction
      "Splitting/joining component with static balances for an infinitesimal control volume"
        parameter Integer n_ports(min=1) = 3 "Number of ports (min=1)";
        parameter SI.Volume V = 1e-6 "Volume of junction"
          annotation(Dialog(tab="Sizing"));

        parameter Boolean fixPressure = false
        "True if pressure at junction is fixed"
        annotation(Dialog(tab="Initialization"));

        OpenHydraulics.Interfaces.FluidPort port[n_ports](m_flow(each start=0), p(
              each start=p_init))
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=0)));

        Basic.VolumeClosed volumeClosed(
          final n_ports=n_ports,
          final V = V,
          compressible=false)
          annotation (Placement(transformation(extent={{-10,-40},{10,-20}},
                rotation=0)));

        extends OpenHydraulics.Interfaces.PartialFluidComponent;
      initial equation
        if fixPressure then
          volumeClosed.p_vol = p_init;
        end if;

      equation
        connect(port, volumeClosed.port)
          annotation (Line(points={{0,0},{0,-30.05}}, color={255,0,0}));

        annotation (defaultComponentName="j1",Icon(coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
              graphics={
              Rectangle(
                extent={{-50,48},{50,-38}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{0,-26},{0,-56}},
                lineColor={0,0,255},
                textString="%name"),
              Ellipse(
                extent={{-20,20},{20,-20}},
                lineColor={0,0,0},
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid)}),
                                Diagram(graphics),
                   Documentation(info="<html>
  This model is the simplest implementation for a splitting/joining component for
  N flows. Its use is not required. It just formulates the balance
  equations in the same way that the connect symmantics would formulate them anyways.
  The main advantage of using this component is, that the user does not get
  confused when looking at the specific enthalpy at each port which might be confusing
  when not using a splitting/joining component. The reason for the confusion is that one exmanins the mixing
  enthalpy of the infinitesimal control volume introduced with the connect statement when
  looking at the specific enthalpy in the connector which
  might not be equal to the specific enthalpy at the port in the \"real world\".</html>"));
      end NJunction;
    end Lines;

    package MotorsPumps
      extends OpenHydraulics.Interfaces.VariantLibrary;

      model ConstantDisplacementPump "Variable Displacement Pump with losses"

        // parameters in sizing tab
        parameter SI.Volume Dconst = 0.001 "Pump displacement"
          annotation(Dialog(tab="Sizing"));

        // loss parameters
        parameter Real Cv = 60000 "Coefficient of viscous drag"
          annotation(Dialog(tab="Efficiency",group="Mechanical Efficiency"));
        parameter Real Cf = 0.007
        "Coefficient of Coulomb friction (fraction of full stroke torque)"
          annotation(Dialog(tab="Efficiency",group="Mechanical Efficiency"));
        parameter Real Cs = 1.8e-9 "Leakage coefficient"
          annotation(Dialog(tab="Efficiency",group="Volumetric Efficiency"));
        parameter Real Vr = 0.54 "Volume ratio of pump or motor"
          annotation(Dialog(tab="Efficiency",group="Volumetric Efficiency"));
        parameter SI.DynamicViscosity mu = oil.dynamicViscosity(p_init)
        "Dynamic viscosity (used only for efficiency computation)"
          annotation(Dialog(tab="Efficiency",group="Related Parameters"));
        parameter SI.BulkModulus B = oil.approxBulkModulus(p_init)
        "Approximate bulk modulus (used only for efficiency models)"
          annotation(Dialog(tab="Efficiency",group="Related Parameters"));

        // friction
        BaseClasses.MechanicalPumpLosses mechanicalPumpLosses(
          Cv=Cv,
          Cf=Cf,
          Dmax=Dconst)
          annotation (Placement(transformation(extent={{-80,-10},{-60,10}},
                rotation=0)));

        // the components
        Basic.FluidPower2MechRotConst fluidPower2MechRot(
          final Dconst=Dconst) annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=0)));
        Basic.VariableFlow leakage_P2T annotation (Placement(transformation(
              origin={40,0},
              extent={{-10,10},{10,-10}},
              rotation=270)));
        Lines.NJunction j1 annotation (Placement(transformation(extent={{-10,-50},{10,-30}},
                rotation=0)));
        Lines.NJunction j2 annotation (Placement(transformation(extent={{-10,30},{10,50}},
                rotation=0)));

        // the connectors
        OpenHydraulics.Interfaces.FluidPort portP
          annotation (Placement(transformation(extent={{-10,90},{10,110}},
                rotation=0)));
        OpenHydraulics.Interfaces.FluidPort portT
          annotation (Placement(transformation(extent={{-10,-110},{10,-90}},
                rotation=0)));
        Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a
        "(left) driving flange (flange axis directed INTO cut plane)"
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}},
                rotation=0)));

        extends OpenHydraulics.Interfaces.PartialFluidComponent;
    protected
        constant Real dispFraction = 1
        "introduced as constant to keep equations consistent with other pumps";
        SI.Pressure dp = portP.p - portT.p;
      equation
        // connect the input of the leakage model and the mechanical loss model
        leakage_P2T.q_flow = Cs*dp*Dconst/mu
            + dp*mechanicalPumpLosses.w*Dconst*(Vr + (1+dispFraction)/2)/B;
        mechanicalPumpLosses.dp = dp;

        connect(portT, j1.port[1]) annotation (Line(points={{0,-100},{0,-40.6667}},
              color={255,0,0}));
        connect(portP, j2.port[1])
          annotation (Line(points={{0,100},{0,39.3333}}, color={255,0,0}));
        connect(fluidPower2MechRot.port_b, j2.port[2])
          annotation (Line(points={{0,10},{0,40}}, color={255,0,0}));
        connect(fluidPower2MechRot.port_a, j1.port[2]) annotation (Line(points={{
                0,-10},{0,-40}}, color={255,0,0}));
        connect(leakage_P2T.port_a, j2.port[3]) annotation (Line(points={{40,10},
                {40,40},{0,40},{0,40.6667}}, color={255,0,0}));
        connect(leakage_P2T.port_b, j1.port[3]) annotation (Line(points={{40,-10},
                {40,-40},{0,-40},{0,-39.3333}}, color={255,0,0}));
        connect(flange_a, mechanicalPumpLosses.flange_a)
          annotation (Line(points={{-100,0},{-80,0}}, color={0,0,0}));
        connect(mechanicalPumpLosses.flange_b, fluidPower2MechRot.flange_a)
          annotation (Line(points={{-60,0},{-10,0}}, color={0,0,0}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                  -100,-100},{100,100}}), graphics={
              Ellipse(
                extent={{-54,54},{54,-54}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{0,-54},{0,-100}}, color={255,0,0}),
              Line(points={{0,100},{0,54}}, color={255,0,0}),
              Rectangle(
                extent={{-90,8},{-54,-8}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(extent={{100,-54},{-100,-90}}, textString="%name"),
              Text(
                extent={{10,-80},{40,-120}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="T"),
              Polygon(
                points={{-20,34},{0,54},{20,34},{-20,34}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-20,-34},{0,-54},{20,-34},{-20,-34}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{10,120},{40,80}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="P")}),Diagram(graphics={
              Text(
                extent={{52,76},{52,64}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString=
                     "section for"),
              Text(
                extent={{52,88},{52,76}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString=
                     "see equations"),
              Rectangle(extent={{12,88},{90,52}}, lineColor={0,0,255}),
              Text(
                extent={{52,64},{52,52}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString=
                     "loss relationships")}));
      end ConstantDisplacementPump;

      model VariableDisplacementPump "Variable Displacement Pump with losses"

        // parameters in sizing tab
        parameter SI.Volume Dmax = 0.001 "Maximum pump displacement"
          annotation(Dialog(tab="Sizing"));
        parameter SI.Volume Dmin = 0
        "Minimum pump displacement (<0 for over-center)"
          annotation(Dialog(tab="Sizing"));
        parameter SI.Volume Dlimit = max(abs(Dmax),abs(Dmin))
        "Displacement of pump"
          annotation(Dialog(tab="Sizing"));

        // loss parameters
        parameter Real Cv = 60000 "Coefficient of viscous drag"
          annotation(Dialog(tab="Efficiency",group="Mechanical Efficiency"));
        parameter Real Cf = 0.007
        "Coefficient of Coulomb friction (fraction of full stroke torque)"
          annotation(Dialog(tab="Efficiency",group="Mechanical Efficiency"));
        parameter Real Cs = 1.8e-9 "Leakage coefficient"
          annotation(Dialog(tab="Efficiency",group="Volumetric Efficiency"));
        parameter Real Vr = 0.54 "Volume ratio of pump or motor"
          annotation(Dialog(tab="Efficiency",group="Volumetric Efficiency"));
        parameter SI.DynamicViscosity mu = oil.dynamicViscosity(p_init)
        "Dynamic viscosity (used only for efficiency computation)"
          annotation(Dialog(tab="Efficiency",group="Related Parameters"));
        parameter SI.BulkModulus B = oil.approxBulkModulus(p_init)
        "Approximate bulk modulus (used only for efficiency models)"
          annotation(Dialog(tab="Efficiency",group="Related Parameters"));

        // friction
        BaseClasses.MechanicalPumpLosses mechanicalPumpLosses(
          Cv=Cv,
          Cf=Cf,
          Dmax=Dlimit,
          mu = mu)
          annotation (Placement(transformation(extent={{-80,-10},{-60,10}},
                rotation=0)));

        // the components
        Basic.FluidPower2MechRotVar fluidPower2MechRot(
          final Dmax=Dmax,
          final Dmin=Dmin,
          final Dlimit=Dlimit)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=0)));
        Basic.VariableFlow leakage_P2T
          annotation (Placement(transformation(
              origin={40,0},
              extent={{-10,10},{10,-10}},
              rotation=270)));
        Lines.NJunction j1
          annotation (Placement(transformation(extent={{-10,-50},{10,-30}},
                rotation=0)));
        Lines.NJunction j2
          annotation (Placement(transformation(extent={{-10,30},{10,50}},
                rotation=0)));

        // the connectors
        OpenHydraulics.Interfaces.FluidPort portP
          annotation (Placement(transformation(extent={{-10,90},{10,110}},
                rotation=0)));
        OpenHydraulics.Interfaces.FluidPort portT
          annotation (Placement(transformation(extent={{-10,-110},{10,-90}},
                rotation=0)));
        Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a
        "(left) driving flange (flange axis directed INTO cut plane)"
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}},
                rotation=0)));
        Modelica.Blocks.Interfaces.RealInput dispFraction
          annotation (Placement(transformation(extent={{-100,-96},{-68,-64}},
                rotation=0)));

        extends OpenHydraulics.Interfaces.PartialFluidComponent;
    protected
        SI.Pressure dp = portP.p - portT.p;
      equation
        // connect the input of the leakage model and the mechanical loss model
        leakage_P2T.q_flow = Cs*dp*Dlimit/mu
            + dp*mechanicalPumpLosses.w*Dlimit*(Vr + (1+dispFraction)/2)/B;
        mechanicalPumpLosses.dp = dp;

        connect(fluidPower2MechRot.dispFraction, dispFraction) annotation (Line(
              points={{-8.5,-7.9},{-42,-7.9},{-42,-80},{-84,-80}}, color={0,0,127}));
        connect(portT, j1.port[1]) annotation (Line(points={{0,-100},{0,-40.6667}},
              color={255,0,0}));
        connect(portP, j2.port[1])
          annotation (Line(points={{0,100},{0,39.3333}}, color={255,0,0}));
        connect(fluidPower2MechRot.port_b, j2.port[2])
          annotation (Line(points={{0,10},{0,40}}, color={255,0,0}));
        connect(fluidPower2MechRot.port_a, j1.port[2]) annotation (Line(points={{
                0,-10},{0,-40}}, color={255,0,0}));
        connect(leakage_P2T.port_a, j2.port[3]) annotation (Line(points={{40,10},
                {40,40},{0,40},{0,40.6667}}, color={255,0,0}));
        connect(leakage_P2T.port_b, j1.port[3]) annotation (Line(points={{40,-10},
                {40,-40},{0,-40},{0,-39.3333}}, color={255,0,0}));
        connect(flange_a, mechanicalPumpLosses.flange_a)
          annotation (Line(points={{-100,0},{-80,0}}, color={0,0,0}));
        connect(mechanicalPumpLosses.flange_b, fluidPower2MechRot.flange_a)
          annotation (Line(points={{-60,0},{-10,0}}, color={0,0,0}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics={
              Ellipse(
                extent={{-54,54},{54,-54}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{0,-54},{0,-100}}, color={255,0,0}),
              Line(points={{0,100},{0,54}}, color={255,0,0}),
              Rectangle(
                extent={{-90,8},{-54,-8}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(extent={{100,-54},{-100,-90}}, textString="%name"),
              Text(
                extent={{10,-80},{40,-120}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="T"),
              Polygon(
                points={{-20,34},{0,54},{20,34},{-20,34}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-20,-34},{0,-54},{20,-34},{-20,-34}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{10,120},{40,80}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="P"),
              Polygon(
                points={{80,80},{52,66},{66,52},{80,80}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Line(points={{-80,-80},{80,80}}, color={0,0,0})}),
                                  Diagram(graphics={
              Text(
                extent={{52,76},{52,64}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString=
                     "section for"),
              Text(
                extent={{52,88},{52,76}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString=
                     "see equations"),
              Rectangle(extent={{12,88},{90,52}}, lineColor={0,0,255}),
              Text(
                extent={{52,64},{52,52}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString=
                     "loss relationships")}));
      end VariableDisplacementPump;

      model PCLSPumpSignalControlled

        // parameters in sizing tab
        parameter SI.Volume Dmax = 0.001 "Maximum pump displacement"
          annotation(Dialog(tab="Sizing"));
        parameter SI.Volume Dmin = 0
        "Minimum pump displacement (<0 for over-center)"
          annotation(Dialog(tab="Sizing"));
        parameter SI.Volume Dlimit = max(abs(Dmax),abs(Dmin))
        "Displacement of pump"
          annotation(Dialog(tab="Sizing"));
        parameter SI.Pressure p_margin = 1e5
        "Desired margin over measured pressure"
          annotation(Dialog(tab="Sizing"));

        // parameters in Dynamics tab
        parameter Real propGain = 2e-5 "Proportional controller gain"
          annotation(Dialog(tab="Dynamics"));
        parameter Real timeConst = 0.1 "Time constant of swashplate controller"
          annotation(Dialog(tab="Dynamics"));

        // loss parameters
        parameter Real Cv = 60000 "Coefficient of viscous drag"
          annotation(Dialog(tab="Efficiency",group="Mechanical Efficiency"));
        parameter Real Cf = 0.007
        "Coefficient of Coulomb friction (fraction of full stroke torque)"
          annotation(Dialog(tab="Efficiency",group="Mechanical Efficiency"));
        parameter Real Cs = 1.8e-9 "Leakage coefficient"
          annotation(Dialog(tab="Efficiency",group="Volumetric Efficiency"));
        parameter Real Vr = 0.54 "Volume ratio of pump or motor"
          annotation(Dialog(tab="Efficiency",group="Volumetric Efficiency"));
        parameter SI.DynamicViscosity mu = oil.dynamicViscosity(p_init)
        "Dynamic viscosity (used only for efficiency computation)"
          annotation(Dialog(tab="Efficiency",group="Related Parameters"));
        parameter SI.BulkModulus B = oil.approxBulkModulus(p_init)
        "Approximate bulk modulus (used only for efficiency models)"
          annotation(Dialog(tab="Efficiency",group="Related Parameters"));

        // the sub-components
        Basic.FluidPower2MechRotVar fluidPower2MechRotVar(
            Dmax=Dmax,
            Dmin = Dmin,
            Dlimit = Dlimit)
          annotation (Placement(transformation(extent={{30,-10},{50,10}},
                rotation=0)));
        BaseClasses.MechanicalPumpLosses mechanicalPumpLosses(
          Cv=Cv,
          Cf=Cf,
          Dmax=Dlimit,
          mu = mu)
          annotation (Placement(transformation(extent={{-80,-10},{-60,10}},
                rotation=0)));
        Basic.VariableFlow leakage_P2T
          annotation (Placement(transformation(
              origin={60,0},
              extent={{-10,10},{10,-10}},
              rotation=270)));

        Sensors.PressureSensor pressureSensorP
          annotation (Placement(transformation(
              origin={80,40},
              extent={{-10,-10},{10,10}},
              rotation=270)));
        Modelica.Blocks.Continuous.LimPID swashPlatePD(
          final controllerType=Modelica.Blocks.Types.SimpleController.PD,
          k=propGain,
          Td=timeConst,
          final yMin=0,
          initType=Modelica.Blocks.Types.InitPID.InitialState)
          annotation (Placement(transformation(extent={{0,-36},{20,-16}},
                rotation=0)));
        Modelica.Blocks.Math.Add desiredPressure
          annotation (Placement(transformation(extent={{-30,-36},{-10,-16}},
                rotation=0)));
        Modelica.Blocks.Sources.RealExpression pressureMargin(
          y=p_margin)
          annotation (Placement(transformation(extent={{-60,-30},{-40,-10}},
                rotation=0)));
        Lines.NJunction j1
          annotation (Placement(transformation(extent={{30,-50},{50,-30}},
                rotation=0)));
        Lines.NJunction j2(
          n_ports=4)
          annotation (Placement(transformation(extent={{30,30},{50,50}}, rotation=
                 0)));

        // the ports
        OpenHydraulics.Interfaces.FluidPort portP
          annotation (Placement(transformation(extent={{-10,90},{10,110}},
                rotation=0)));
        OpenHydraulics.Interfaces.FluidPort portT
          annotation (Placement(transformation(extent={{-10,-110},{10,-90}},
                rotation=0)));
        Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a
        "(left) driving flange (flange axis directed INTO cut plane)"
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}},
                rotation=0)));

        extends OpenHydraulics.Interfaces.PartialFluidComponent;

    protected
        SI.Pressure dp = portP.p - portT.p;
    public
        Modelica.Blocks.Interfaces.RealInput p_meas
        "Connector of Real input signal 2"
          annotation (Placement(transformation(extent={{-100,-96},{-68,-64}},
                rotation=0)));
      equation
        // connect the input of the leakage model and the mechanical loss model
        leakage_P2T.q_flow = Cs*dp*Dlimit/mu
            + dp*mechanicalPumpLosses.w*Dlimit*(Vr + (1+fluidPower2MechRotVar.dispFraction)/2)/B;
        mechanicalPumpLosses.dp = dp;

        connect(desiredPressure.y, swashPlatePD.u_s)  annotation (Line(points={{
                -9,-26},{-2,-26}}, color={0,0,127}));
        connect(pressureSensorP.y, swashPlatePD.u_m)  annotation (Line(points={{
                80,33},{80,-56},{10,-56},{10,-38}}, color={0,0,127}));
        connect(flange_a, mechanicalPumpLosses.flange_a)
          annotation (Line(points={{-100,0},{-80,0}}, color={0,0,0}));
        connect(mechanicalPumpLosses.flange_b, fluidPower2MechRotVar.flange_a)
          annotation (Line(points={{-60,0},{30,0}}, color={0,0,0}));
        connect(portT, j1.port[1])
          annotation (Line(points={{0,-100},{40,-100},{40,-40.6667}},
                                                                    color={255,0,
                0}));
        connect(portP, j2.port[1])
          annotation (Line(points={{0,100},{40,100},{40,39.25}},   color={255,0,0}));
        connect(fluidPower2MechRotVar.port_b, j2.port[2])
          annotation (Line(points={{40,10},{40,39.75}},   color={255,0,0}));
        connect(fluidPower2MechRotVar.port_a, j1.port[2])
          annotation (Line(points={{40,-10},{40,-40}},    color={255,0,0}));
        connect(leakage_P2T.port_a, j2.port[3]) annotation (Line(points={{60,10},{60,40},
                {40,40},{40,40.25}},           color={255,0,0}));
        connect(leakage_P2T.port_b, j1.port[3]) annotation (Line(points={{60,-10},
                {60,-40},{40,-40},{40,-39.3333}},
                                                color={255,0,0}));
        connect(pressureSensorP.port_a, j2.port[4]) annotation (Line(points={{70,40},{
                40,40},{40,40.75}},        color={255,0,0}));
        connect(pressureMargin.y, desiredPressure.u1) annotation (Line(points={{
                -39,-20},{-32,-20}}, color={0,0,127}));
        connect(swashPlatePD.y, fluidPower2MechRotVar.dispFraction) annotation (Line(
              points={{21,-26},{26,-26},{26,-7.9},{31.5,-7.9}}, color={0,0,127}));
        connect(desiredPressure.u2, p_meas) annotation (Line(points={{-32,-32},{
                -40,-32},{-40,-80},{-84,-80}}, color={0,0,127}));
        annotation (Diagram(graphics={
              Text(
                extent={{-38,64},{-38,52}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString=
                     "section for"),
              Text(
                extent={{-38,76},{-38,64}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString=
                     "see equations"),
              Rectangle(extent={{-78,76},{0,40}}, lineColor={0,0,255}),
              Text(
                extent={{-38,52},{-38,40}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString=
                     "loss relationships")}),
                             Icon(coordinateSystem(preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}), graphics={
              Ellipse(
                extent={{-54,54},{54,-54}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{0,-54},{0,-100}}, color={255,0,0}),
              Line(points={{0,100},{0,54}}, color={255,0,0}),
              Rectangle(
                extent={{-90,8},{-54,-8}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{-80,-80},{80,80}}, color={0,0,0}),
              Polygon(
                points={{80,80},{52,66},{66,52},{80,80}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-20,34},{0,54},{20,34},{-20,34}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-20,-34},{0,-54},{20,-34},{-20,-34}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Text(extent={{100,-54},{-100,-90}}, textString="%name"),
              Text(
                extent={{10,-80},{40,-120}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="T"),
              Text(
                extent={{10,120},{40,80}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="P")}));
      end PCLSPumpSignalControlled;

      model PCLSPump

        // parameters in sizing tab
        parameter SI.Volume Dmax = 0.001 "Maximum pump displacement"
          annotation(Dialog(tab="Sizing"));
        parameter SI.Volume Dmin = 0
        "Minimum pump displacement (<0 for over-center)"
          annotation(Dialog(tab="Sizing"));
        parameter SI.Volume Dlimit = max(abs(Dmax),abs(Dmin))
        "Displacement of pump"
          annotation(Dialog(tab="Sizing"));
        parameter SI.Pressure p_margin = 1e5
        "Desired margin over measured pressure"
          annotation(Dialog(tab="Sizing"));

        // parameters in Dynamics tab
        parameter Real propGain = 2e-5 "Proportional controller gain"
          annotation(Dialog(tab="Dynamics"));
        parameter Real timeConst = 0.1 "Time constant of swashplate controller"
          annotation(Dialog(tab="Dynamics"));

        // loss parameters
        parameter Real Cv = 60000 "Coefficient of viscous drag"
          annotation(Dialog(tab="Efficiency",group="Mechanical Efficiency"));
        parameter Real Cf = 0.007
        "Coefficient of Coulomb friction (fraction of full stroke torque)"
          annotation(Dialog(tab="Efficiency",group="Mechanical Efficiency"));
        parameter Real Cs = 1.8e-9 "Leakage coefficient"
          annotation(Dialog(tab="Efficiency",group="Volumetric Efficiency"));
        parameter Real Vr = 0.54 "Volume ratio of pump or motor"
          annotation(Dialog(tab="Efficiency",group="Volumetric Efficiency"));
        parameter SI.DynamicViscosity mu = oil.dynamicViscosity(p_init)
        "Dynamic viscosity (used only for efficiency computation)"
          annotation(Dialog(tab="Efficiency",group="Related Parameters"));
        parameter SI.BulkModulus B = oil.approxBulkModulus(p_init)
        "Approximate bulk modulus (used only for efficiency models)"
          annotation(Dialog(tab="Efficiency",group="Related Parameters"));

        // the sub-components
        Basic.FluidPower2MechRotVar fluidPower2MechRotVar(
            Dmax=Dmax,
            Dmin = Dmin,
            Dlimit = Dlimit)
          annotation (Placement(transformation(extent={{30,-10},{50,10}},
                rotation=0)));
        BaseClasses.MechanicalPumpLosses mechanicalPumpLosses(
          Cv=Cv,
          Cf=Cf,
          Dmax=Dlimit,
          mu = mu)
          annotation (Placement(transformation(extent={{-80,-10},{-60,10}},
                rotation=0)));
        Basic.VariableFlow leakage_P2T
          annotation (Placement(transformation(
              origin={60,0},
              extent={{-10,10},{10,-10}},
              rotation=270)));

        Sensors.PressureSensor pressureSensorP
          annotation (Placement(transformation(
              origin={80,40},
              extent={{-10,-10},{10,10}},
              rotation=270)));
        Modelica.Blocks.Continuous.LimPID swashPlatePD(
          final controllerType=Modelica.Blocks.Types.SimpleController.PD,
          k=propGain,
          Td=timeConst,
          final yMin=0,
          initType=Modelica.Blocks.Types.InitPID.InitialState)
          annotation (Placement(transformation(extent={{0,-36},{20,-16}},
                rotation=0)));
        Sensors.PressureSensor pressureSensorLS
          annotation (Placement(transformation(extent={{-90,-42},{-70,-22}},
                rotation=0)));
        Modelica.Blocks.Math.Add desiredPressure
          annotation (Placement(transformation(extent={{-30,-36},{-10,-16}},
                rotation=0)));
        Modelica.Blocks.Sources.RealExpression pressureMargin(
          y=p_margin)
          annotation (Placement(transformation(extent={{-60,-30},{-40,-10}},
                rotation=0)));
        Lines.NJunction j1
          annotation (Placement(transformation(extent={{30,-50},{50,-30}},
                rotation=0)));
        Lines.NJunction j2(
          n_ports=4)
          annotation (Placement(transformation(extent={{30,30},{50,50}}, rotation=
                 0)));

        // the ports
        OpenHydraulics.Interfaces.FluidPort portP
          annotation (Placement(transformation(extent={{-10,90},{10,110}},
                rotation=0)));
        OpenHydraulics.Interfaces.FluidPort portT
          annotation (Placement(transformation(extent={{-10,-110},{10,-90}},
                rotation=0)));
        OpenHydraulics.Interfaces.FluidPort portLS
          annotation (Placement(transformation(extent={{-90,-90},{-70,-70}},
                rotation=0)));
        Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a
        "(left) driving flange (flange axis directed INTO cut plane)"
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}},
                rotation=0)));

        extends OpenHydraulics.Interfaces.PartialFluidComponent;

    protected
        SI.Pressure dp = portP.p - portT.p;
      equation
        // connect the input of the leakage model and the mechanical loss model
        leakage_P2T.q_flow = Cs*dp*Dlimit/mu
            + dp*mechanicalPumpLosses.w*Dlimit*(Vr + (1+fluidPower2MechRotVar.dispFraction)/2)/B;
        mechanicalPumpLosses.dp = dp;

        connect(pressureSensorLS.port_a, portLS) annotation (Line(points={{-80,
                -42},{-80,-80}}, color={255,0,0}));
        connect(desiredPressure.y, swashPlatePD.u_s)  annotation (Line(points={{
                -9,-26},{-2,-26}}, color={0,0,127}));
        connect(pressureSensorP.y, swashPlatePD.u_m)  annotation (Line(points={{
                80,33},{80,-56},{10,-56},{10,-38}}, color={0,0,127}));
        connect(flange_a, mechanicalPumpLosses.flange_a)
          annotation (Line(points={{-100,0},{-80,0}}, color={0,0,0}));
        connect(mechanicalPumpLosses.flange_b, fluidPower2MechRotVar.flange_a)
          annotation (Line(points={{-60,0},{30,0}}, color={0,0,0}));
        connect(portT, j1.port[1])
          annotation (Line(points={{0,-100},{40,-100},{40,-40.6667}}, color={255,
                0,0}));
        connect(portP, j2.port[1])
          annotation (Line(points={{0,100},{40,100},{40,39.25}}, color={255,0,0}));
        connect(fluidPower2MechRotVar.port_b, j2.port[2])
          annotation (Line(points={{40,10},{40,39.75}}, color={255,0,0}));
        connect(fluidPower2MechRotVar.port_a, j1.port[2])
          annotation (Line(points={{40,-10},{40,-40}}, color={255,0,0}));
        connect(leakage_P2T.port_a, j2.port[3]) annotation (Line(points={{60,10},
                {60,40},{40,40},{40,40.25}}, color={255,0,0}));
        connect(leakage_P2T.port_b, j1.port[3]) annotation (Line(points={{60,-10},
              {60,-40},{40,-40},{40,-39.3333}},   color={255,0,0}));
        connect(pressureSensorP.port_a, j2.port[4]) annotation (Line(points={{70,
                40},{40,40},{40,40.75}}, color={255,0,0}));
        connect(pressureMargin.y, desiredPressure.u1) annotation (Line(points={{
                -39,-20},{-32,-20}}, color={0,0,127}));
        connect(pressureSensorLS.y, desiredPressure.u2) annotation (Line(points={
                {-73,-32},{-32,-32}}, color={0,0,127}));
        connect(swashPlatePD.y, fluidPower2MechRotVar.dispFraction) annotation (Line(
              points={{21,-26},{26,-26},{26,-7.9},{31.5,-7.9}}, color={0,0,127}));
        annotation (Diagram(graphics={
              Text(
                extent={{-38,64},{-38,52}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString=
                     "section for"),
              Text(
                extent={{-38,76},{-38,64}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString=
                     "see equations"),
              Rectangle(extent={{-78,76},{0,40}}, lineColor={0,0,255}),
              Text(
                extent={{-38,52},{-38,40}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString=
                     "loss relationships")}),
                             Icon(coordinateSystem(preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}), graphics={
              Ellipse(
                extent={{-54,54},{54,-54}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{0,-54},{0,-100}}, color={255,0,0}),
              Line(points={{0,100},{0,54}}, color={255,0,0}),
              Rectangle(
                extent={{-90,8},{-54,-8}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{-80,-80},{80,80}}, color={0,0,0}),
              Polygon(
                points={{80,80},{52,66},{66,52},{80,80}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-20,34},{0,54},{20,34},{-20,34}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-20,-34},{0,-54},{20,-34},{-20,-34}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Text(extent={{100,-54},{-100,-90}}, textString="%name"),
              Text(
                extent={{10,-80},{40,-120}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="T"),
              Text(
                extent={{10,120},{40,80}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="P")}));
      end PCLSPump;

      model Motor

        // the parameters
        parameter SI.Volume Dconst = 1e-5 "Displacement of the motor"
          annotation(Dialog(tab="Sizing"));
        parameter Real damp=100000 "Viscous damping constant"
          annotation(Dialog(tab="Losses"));

        // the ports
        OpenHydraulics.Interfaces.FluidPort portB
          annotation (Placement(transformation(extent={{-10,90},{10,110}},
                rotation=0)));
        OpenHydraulics.Interfaces.FluidPort portA
          annotation (Placement(transformation(extent={{-10,-110},{10,-90}},
                rotation=0)));

        // the components
        OpenHydraulics.Basic.FluidPower2MechRotConst idealMotor(Dconst=Dconst)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=0)));
        OpenHydraulics.Basic.LaminarRestriction leakeage_A2B(L=0.1,D=1e-4)
        "Laminar leakage between ports A to B"
          annotation (
          Dialog(tab="Losses"), Placement(transformation(
              origin={-20,2},
              extent={{-10,-10},{10,10}},
              rotation=90)));

        // configuration options
        parameter Boolean usePRV = true
        "True if pressure relieve valves are present"
          annotation(Dialog(tab="Config Options"));
        OpenHydraulics.Components.Valves.ReliefValve PRV_A2B if usePRV
        "Relief from port A to B"
          annotation (
          Dialog(tab="Config Options",group="PRV Characteristics",enable=usePRV),
            Placement(transformation(
              origin={-48,2},
              extent={{-10,-10},{10,10}},
              rotation=90)));
        OpenHydraulics.Components.Valves.ReliefValve PRV_B2A if usePRV
        "Relief from port B to A"
          annotation (
          Dialog(tab="Config Options",group="PRV Characteristics",enable=usePRV),
            Placement(transformation(
              origin={-80,2},
              extent={{-10,-10},{10,10}},
              rotation=270)));

        Modelica.Mechanics.Rotational.Interfaces.Flange_b flange_b
        "(right) driven flange (flange axis directed OUT OF cut plane)"
          annotation (Placement(transformation(extent={{88,-10},{108,10}},
                rotation=0)));
        Modelica.Mechanics.Rotational.Components.Damper damper(
                                                    d=damp)
          annotation (Placement(transformation(extent={{10,12},{30,32}}, rotation=
                 0)));
        Modelica.Mechanics.Rotational.Components.Fixed fixed
          annotation (Placement(transformation(extent={{34,12},{54,32}}, rotation=
                 0)));
        OpenHydraulics.Components.Lines.NJunction j2(n_ports=5)
          annotation (Placement(transformation(extent={{-10,30},{10,50}},
                rotation=0)));
        OpenHydraulics.Components.Lines.NJunction j1(n_ports=5)
          annotation (Placement(transformation(extent={{-10,-50},{10,-30}},
                rotation=0)));

       extends OpenHydraulics.Interfaces.PartialFluidComponent;

      equation
        connect(idealMotor.port_b, j2.port[1])       annotation (Line(points={{0,10},{
                0,39.2}},       color={255,0,0}));
        connect(leakeage_A2B.port_b, j2.port[2])       annotation (Line(points={{-20,12},
                {-20,40},{0,40},{0,39.6}},          color={255,0,0}));
        connect(idealMotor.port_a, j1.port[1])       annotation (Line(points={{0,-10},
                {0,-40.8}},       color={255,0,0}));
        connect(j1.port[2], leakeage_A2B.port_a)       annotation (Line(points={{0,-40.4},
                {0,-40},{-20,-40},{-20,-8}},           color={255,0,0}));
        connect(idealMotor.flange_b, flange_b)
          annotation (Line(points={{10,0},{98,0}}, color={0,0,0}));
        connect(j2.port[3], portB)
                                  annotation (Line(points={{0,40},{0,100}},
              color={255,0,0}));
        connect(portA,j1. port[3]) annotation (Line(points={{0,-100},{0,-40}},
              color={255,0,0}));
        connect(idealMotor.flange_b, damper.flange_a)
          annotation (Line(points={{10,0},{10,22}}, color={0,0,0}));
        connect(damper.flange_b,fixed.flange)
          annotation (Line(points={{30,22},{44,22}}, color={0,0,0}));
        connect(PRV_A2B.port_b, j2.port[4])     annotation (Line(points={{-48,12},
                {-48,40},{0,40},{0,40.4}},  color={255,0,0}));
        connect(PRV_B2A.port_a,j2. port[5])      annotation (Line(points={{-80,12},
                {-80,40},{0,40},{0,40.8}},  color={255,0,0}));
        connect(PRV_B2A.port_b,j1. port[5])      annotation (Line(points={{-80,-8},
                {-80,-40},{0,-40},{0,-39.2}},  color={255,0,0}));
        connect(PRV_A2B.port_a, j1.port[4])     annotation (Line(points={{-48,-8},
                {-48,-40},{0,-40},{0,-39.6}},  color={255,0,0}));
      annotation (     Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                  -100,-100},{100,100}}), graphics={
              Ellipse(
                extent={{-54,54},{54,-54}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{0,-54},{0,-100}}, color={255,0,0}),
              Line(points={{0,100},{0,54}}, color={255,0,0}),
              Rectangle(
                extent={{54,8},{90,-8}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-20,-50},{0,-30},{20,-50},{-20,-50}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-20,50},{0,30},{20,50},{-20,50}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Text(extent={{100,-54},{-100,-90}}, textString="%name"),
              Text(
                extent={{10,-80},{40,-120}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="A"),
              Text(
                extent={{10,120},{40,80}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="B")}),                         Diagram(graphics));
      end Motor;

      package BaseClasses
        extends Modelica.Icons.BasesPackage;
        model MechanicalPumpLosses "Coulomb and viscous friction in pump "
          extends
          Modelica.Mechanics.Rotational.Interfaces.PartialTwoFlangesAndSupport;

          parameter Real Cv = 0.1 "Coefficient of viscous drag";
          parameter Real Cf = 0.01
          "Coefficient of Coulomb friction (fraction of full stroke torque)";
          parameter SI.Volume Dmax = 1e-4 "Full stroke pump Displacement";
          parameter SI.DynamicViscosity mu = 0.036
          "Dynamic Viscosity of liquid";

          extends Modelica.Mechanics.Rotational.Interfaces.PartialFriction;

          SI.Torque tau;
          SI.Angle phi;
          SI.AngularVelocity w
          "Absolute angular velocity of flange_a and flange_b";
          SI.AngularAcceleration a
          "Absolute angular acceleration of flange_a and flange_b";
      protected
          parameter Real b = Cv*Dmax*mu "Viscous friction constant";
      public
          Modelica.Blocks.Interfaces.RealInput dp
            annotation (Placement(transformation(extent={{-120,-80},{-80,-40}},
                  rotation=0)));
        equation
          // Constant auxiliary variables
          tau0 = Cf*dp*Dmax;
          tau0_max = tau0;
          free = false;

          phi = flange_a.phi;
          phi = flange_b.phi;

          // Angular velocity and angular acceleration of flanges
          w = der(phi);
          a = der(w);
          w_relfric = w;
          a_relfric = a;

          // Equilibrium of torques
          0 = flange_a.tau + flange_b.tau - tau;

          // Friction torque
          tau = if locked then sa else
                    (if startForward then tau0+b*w else
                     if startBackward then -tau0+b*w else
                     if pre(mode) == Forward then tau0+b*w else
                     -tau0+b*w);
          annotation (
            Documentation(info="<html>
<p>
This element describes <b>frictional losses</b> in a <b>hydraulic pump or motor</b>.
</p>
<p>The model is based on the paper:<br>
<dl>
<dt>McCandlish, D., and Dorey, R. E.,
<dd>'The Mathematical Modelling of Hydrostatic Pumps and Motors,'
<i>Proceedings of the Institution of Mechanical Engineers</i>,
Part B, Vol. 198, No. 10, 1984, pp 165-174.
</dl></p>
<p>
The model implementation is derived from the bearing friction
model in the standard Modelica library.
</p>
</HTML>
"),         Window(
              x=0.25,
              y=0.01,
              width=0.53,
              height=0.61),
            Icon(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}},
                grid={1,1}), graphics={
                Rectangle(
                  extent={{-96,20},{96,-21}},
                  lineColor={0,0,0},
                  fillPattern=FillPattern.HorizontalCylinder,
                  fillColor={192,192,192}),
                Line(points={{-30,-40},{30,-40}}, color={0,0,0}),
                Line(points={{0,-40},{0,-90}}, color={0,0,0}),
                Polygon(
                  points={{-30,-20},{60,-20},{60,-80},{70,-80},{50,-100},{30,-80},
                      {40,-80},{40,-30},{-30,-30},{-30,-20},{-30,-20}},
                  lineColor={0,0,0},
                  fillColor={255,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{30,-50},{20,-60}}, color={0,0,0}),
                Line(points={{30,-40},{10,-60}}, color={0,0,0}),
                Line(points={{20,-40},{0,-60}}, color={0,0,0}),
                Line(points={{10,-40},{-10,-60}}, color={0,0,0}),
                Line(points={{0,-40},{-20,-60}}, color={0,0,0}),
                Line(points={{-10,-40},{-30,-60}}, color={0,0,0}),
                Line(points={{-20,-40},{-30,-50}}, color={0,0,0}),
                Text(extent={{-150,80},{150,40}}, textString="%name")}),
            Diagram(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}},
                grid={1,1}), graphics={
                Rectangle(
                  extent={{-96,20},{96,-21}},
                  lineColor={0,0,0},
                  fillPattern=FillPattern.HorizontalCylinder,
                  fillColor={192,192,192}),
                Line(points={{-30,-40},{30,-40}}, color={0,0,0}),
                Line(points={{0,60},{0,40}}, color={0,0,0}),
                Line(points={{-30,40},{29,40}}, color={0,0,0}),
                Line(points={{0,-40},{0,-90}}, color={0,0,0}),
                Polygon(
                  points={{-30,-20},{60,-20},{60,-80},{70,-80},{50,-100},{30,-80},
                      {40,-80},{40,-30},{-30,-30},{-30,-20},{-30,-20}},
                  lineColor={0,0,0},
                  fillColor={255,0,0},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{16,83},{84,70}},
                  lineColor={128,128,128},
                  textString="rotation axis"),
                Polygon(
                  points={{12,76},{-8,81},{-8,71},{12,76}},
                  lineColor={128,128,128},
                  fillColor={128,128,128},
                  fillPattern=FillPattern.Solid),
                Line(points={{-78,76},{-7,76}}, color={128,128,128}),
                Line(points={{30,-50},{20,-60}}, color={0,0,0}),
                Line(points={{30,-40},{10,-60}}, color={0,0,0}),
                Line(points={{20,-40},{0,-60}}, color={0,0,0}),
                Line(points={{10,-40},{-10,-60}}, color={0,0,0}),
                Line(points={{0,-40},{-20,-60}}, color={0,0,0}),
                Line(points={{-10,-40},{-30,-60}}, color={0,0,0}),
                Line(points={{-20,-40},{-30,-50}}, color={0,0,0})}));
        end MechanicalPumpLosses;
      end BaseClasses;
    end MotorsPumps;

    package Sensors
      extends OpenHydraulics.Interfaces.VariantLibrary;

      model PressureSensor
        extends OpenHydraulics.Interfaces.PartialFluidComponent;

        // the parameters
        parameter Boolean absolute = true "Measure absolute pressure if true";
        parameter SI.Volume V = 0 "Volume for non-ideal pressure sensor"
          annotation(Dialog(tab="Advanced"));

        // the ports
        OpenHydraulics.Interfaces.FluidPort port_a
          annotation (Placement(transformation(extent={{-10,-110},{10,-90}},
                rotation=0)));
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{60,-10},{80,10}},
                rotation=0)));

        Basic.VolumeClosed volumeClosed(
          final V=V,
          final n_ports=1)
          annotation (Placement(transformation(
              origin={0,0},
              extent={{-10,-10},{10,10}},
              rotation=180)));
      equation
        y = port_a.p - (if absolute then 0 else environment.p_ambient);

        connect(port_a, volumeClosed.port[1])
          annotation (Line(points={{0,-100},{0,-49.625},{0,0.05},{0,0.05}}, color=
               {255,0,0}));

        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics={
              Ellipse(
                extent={{-54,54},{54,-54}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{32,32},{-32,-32}}, color={0,0,0}),
              Polygon(
                points={{-32,-32},{-24,-14},{-14,-24},{-32,-32}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Line(points={{0,-54},{0,-100}}, color={255,0,0}),
              Text(
                extent={{0,56},{0,82}},
                lineColor={0,0,255},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="%name"),
              Line(points={{60,0},{54,0}}, color={0,0,127})}),
                                  Diagram(coordinateSystem(preserveAspectRatio=
                false, extent={{-100,-100},{100,100}}),
                                          graphics={Line(
                points={{60,0},{10,0}},
                color={0,0,255},
                pattern=LinePattern.Dash)}));
      end PressureSensor;

      model FlowSensor
        extends OpenHydraulics.Interfaces.PartialFluidComponent;

        // the parameters
        parameter SI.Diameter D = 1 "Diameter at the ports"
          annotation (Dialog(tab="Advanced"));
        parameter Real zeta = 2 "Loss factor for flow of port_a -> port_b"
          annotation (Dialog(tab="Advanced"));

        // the connectors
        OpenHydraulics.Interfaces.FluidPort port_a(p(start=p_init))
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}},
                rotation=0)));
        OpenHydraulics.Interfaces.FluidPort port_b(p(start=p_init))
          annotation (Placement(transformation(extent={{110,-10},{90,10}},
                rotation=0)));

        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(
              origin={0,-70},
              extent={{-10,-10},{10,10}},
              rotation=270)));

        Basic.GenericPressureLoss genericPressureLoss(
          D_a=D,
          D_b=D,
          zeta1=zeta,
          zeta2=zeta,
          use_Re=true)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=0)));
      equation
        y = genericPressureLoss.q_flow_a;

        connect(port_a, genericPressureLoss.port_a) annotation (Line(points={{
                -100,0},{-10,0}}, color={255,0,0}));
        connect(genericPressureLoss.port_b, port_b) annotation (Line(points={{10,
                0},{100,0}}, color={255,0,0}));

        annotation (Diagram(graphics={Line(
                points={{0,-8},{0,-38},{0,-38},{0,-60}},
                color={0,0,127},
                pattern=LinePattern.Dash)}),
                             Icon(coordinateSystem(preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}), graphics={
              Text(
                extent={{0,56},{0,82}},
                lineColor={0,0,255},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="%name"),
              Ellipse(extent={{-54,54},{54,-54}}, lineColor={0,0,0}),
              Line(points={{-52,-16},{-44,-14},{-30,-10},{-20,-8},{-6,-6},{6,-6},
                    {20,-8},{30,-10},{44,-14},{52,-16}}, color={0,0,0}),
              Line(points={{-52,16},{-44,14},{-30,10},{-20,8},{-6,6},{6,6},{20,8},
                    {30,10},{44,14},{52,16}}, color={0,0,0}),
              Line(points={{-100,0},{-54,0}}, color={255,0,0}),
              Line(points={{54,0},{100,0}}, color={255,0,0}),
              Line(points={{0,-54},{0,-60}}, color={0,0,127}),
              Text(
                extent={{-90,40},{-60,0}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="A"),
              Text(
                extent={{60,40},{90,0}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="B")}));
      end FlowSensor;

      model FVController
      "Given inputs of Force profile and desired velocity profile, controls a valve to match velocity"

        Modelica.Mechanics.Translational.Sources.Force force
          annotation (Placement(transformation(
              origin={-80,50},
              extent={{10,-10},{-10,10}},
              rotation=180)));
        Modelica.Blocks.Tables.CombiTable1Ds ForceProfile(table=[0.0,0; 1,3000; 2,
              10000; 3,20000; 4,20000; 5,5000; 6,-1000; 7,-3000; 8,0; 9,0; 10,6000;
              11,10000; 12,10000; 13,12000; 14,0; 15,0; 16,-2000; 17,-4050; 18,-8000;
              19,-8000; 20,-5000; 21,-1000; 22,100; 23,0; 24,0])
          annotation (                                    Dialog, Placement(
              transformation(extent={{0,60},{-20,80}}, rotation=0)));
        Modelica.Blocks.Sources.Clock clock
          annotation (Placement(transformation(
              origin={20,90},
              extent={{-10,-10},{10,10}},
              rotation=270)));
        Modelica.Mechanics.Translational.Sensors.SpeedSensor speedSensor
          annotation (Placement(transformation(
              origin={-8,-24},
              extent={{-10,-10},{10,10}},
              rotation=270)));
        Modelica.Blocks.Tables.CombiTable1Ds VelocityProfile(table=[0.0,0; 1,0; 2,0;
              3,0.01;4,0.03;5,0.1;6,0.04;7,0.0;8,0.0;9,-0.01;10,-0.02;11,-0.02;12,-0.025;
                    13,-0.015;14,-0.05;15,0; 16,0; 17,0.11;18,0.14;19,0.13;20,0; 21,-0.01;
                   22,-0.01;23,0; 24,0], smoothness=Modelica.Blocks.Types.Smoothness.ContinuousDerivative)
          annotation (                                      Dialog, Placement(
              transformation(
              origin={20,-14},
              extent={{-10,-10},{10,10}},
              rotation=270)));
        Modelica.Blocks.Continuous.LimPID PID(
          Td=Td,
          k=k,
          Ti=0.1,
          controllerType=Modelica.Blocks.Types.SimpleController.P)
                annotation (Placement(transformation(extent={{2,-56},{-18,-76}},
                rotation=0)));
        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(
              transformation(extent={{40,-40},{60,-20}}, rotation=0)));
        parameter Real Td(  final min=0)
        "Derivative time constant coefficient for PID controller";
        parameter Real k( final min=0)
        "Proportional gain coefficient for PID controller";

        Modelica.Mechanics.Translational.Interfaces.Flange_a flange_a
          annotation (Placement(transformation(extent={{-60,40},{-40,60}},
                rotation=0)));
      equation
        connect(VelocityProfile.u, clock.y) annotation (Line(points={{20,-2},{20,
                18.25},{20,18.25},{20,38.5},{20,79},{20,79}}, color={0,0,127}));
        connect(speedSensor.v, PID.u_m) annotation (Line(points={{-8,-35},{-8,-44.5},
                {-8,-44.5},{-8,-54}},        color={0,0,127}));
        connect(PID.u_s, VelocityProfile.y[1]) annotation (Line(points={{4,-66},{
                20,-66},{20,-25}}, color={0,0,127}));
        connect(PID.y, y) annotation (Line(points={{-19,-66},{-26,-66},{-26,-84},
                {86,-84},{86,-30},{50,-30}}, color={0,0,127}));
        connect(force.f, ForceProfile.y[1]) annotation (Line(points={{-92,50},{
                -92,70},{-21,70}}, color={0,0,127}));
        connect(force.flange,   flange_a) annotation (Line(points={{-70,50},{-50,
                50}}, color={0,127,0}));
        connect(speedSensor.flange,   flange_a) annotation (Line(points={{-8,-14},
                {-8,10},{-50,10},{-50,50}}, color={0,127,0}));
        connect(ForceProfile.u, clock.y) annotation (Line(points={{2,70},{20,70},
                {20,79}}, color={0,0,127}));
        annotation (Diagram(graphics),
                             Icon(coordinateSystem(preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}), graphics={
              Text(
                extent={{-130,104},{124,74}},
                lineColor={0,0,255},
                fillColor={255,255,170},
                fillPattern=FillPattern.Solid,
                textString="%Force Velocity Controller"),
              Rectangle(
                extent={{-60,80},{60,20}},
                lineColor={0,0,0},
                lineThickness=1,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={215,215,215}),
              Rectangle(
                extent={{-60,0},{60,-60}},
                lineColor={0,0,0},
                lineThickness=1,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={215,215,215}),
              Rectangle(
                extent={{-2,20},{4,0}},
                lineColor={0,0,0},
                lineThickness=1,
                fillPattern=FillPattern.VerticalCylinder,
                fillColor={135,135,135})}));
      end FVController;
    end Sensors;

    package Valves
      extends OpenHydraulics.Interfaces.VariantLibrary;

      model CheckValve "Simple equation model for a check valve"
        // sizing parameters
        parameter SI.Pressure dp_open(final min=0) = 6000 "Fully open pressure"
          annotation (Dialog(tab="Sizing"));
        parameter SI.VolumeFlowRate q_nom(final min=0) = 0.01
        "Nominal flow rate when fully open"
          annotation (Dialog(tab="Sizing"));
        parameter SI.Density d_nom = 850 "Nominal density"
          annotation (Dialog(tab="Sizing"));

        parameter Boolean use_Re = false
        "= true, if turbulent region is defined by Re, otherwise by dp_small or m_flow_small"
          annotation(Evaluate=true, Dialog(tab="Advanced"));
        parameter SI.AbsolutePressure dp_small = 1
        "Turbulent flow if |dp| >= dp_small"
          annotation(Dialog(tab="Advanced", enable=not use_Re));

        // main variables
        SI.Pressure dp = port_a.p - port_b.p
        "Pressure drop from port_a to port_b";
        // the connectors
        OpenHydraulics.Interfaces.FluidPort port_a
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}},
                rotation=0)));
        OpenHydraulics.Interfaces.FluidPort port_b
          annotation (Placement(transformation(extent={{110,-10},{90,10}},
                rotation=0)));

        // internal component
        OpenHydraulics.Basic.VariableRestrictionSeriesValve variableRestriction(
          smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments,
          final use_Re=use_Re,
          final dp_small=dp_small,
          D_nom=0.01,
          final q_nom=q_nom,
          final dp_nom=dp_open,
          d_nom=d_nom,
          p_init=p_init)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
                rotation=0)));

        extends OpenHydraulics.Interfaces.PartialFluidComponent;

      equation
        variableRestriction.control = max(0,min(-dp/dp_open,1));
        connect(variableRestriction.port_a, port_b)
          annotation (Line(points={{10,0},{100,0}}, color={255,0,0}));
        connect(variableRestriction.port_b, port_a)
          annotation (Line(points={{-10,0},{-100,0}}, color={255,0,0}));
        annotation (
          Diagram(graphics={
              Text(
                extent={{-90,40},{-60,0}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString=
                     "A"),
              Text(
                extent={{60,40},{90,0}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString=
                     "B"),
              Text(
                extent={{0,-40},{0,-52}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString=
                     "for valve dynamics"),
              Text(
                extent={{0,-28},{0,-40}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString=
                     "see equations section"),
              Rectangle(extent={{-52,-24},{52,-56}}, lineColor={0,0,255}),
              Line(points={{0,-8},{0,-24}}, color={0,0,255})}),
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                  100,100}}), graphics={
              Rectangle(
                extent={{-88,44},{88,-48}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{-12,0},{-100,0}}, color={0,0,0}),
              Line(points={{100,0},{29,0}}, color={0,0,0}),
              Ellipse(
                extent={{-11,16},{21,-16}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{-4,30},{29,0},{-4,-30}}, color={0,0,0}),
              Text(
                extent={{56,40},{94,0}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="B"),
              Text(
                extent={{-98,40},{-50,0}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="A"),
              Text(
                extent={{-100,80},{100,52}},
                lineColor={0,0,255},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="%name"),
              Line(points={{-42,10},{-38,-10},{-34,10},{-30,-10},{-26,10},{-22,-10},
                    {-18,10},{-14,-10},{-10,10}}, color={0,0,0})}),
          DymolaStoredErrors);
      end CheckValve;

      model ReliefValve "Simple equation model for a relief valve"
        // sizing parameters
        parameter SI.Pressure dp_relief(final min=0) = 1e7 "Relief pressure"
          annotation (Dialog(tab="Sizing"));
        parameter SI.Pressure dp_open(final min=0) = dp_relief*1.05
        "Fully open pressure"
          annotation (Dialog(tab="Sizing"));
        parameter SI.VolumeFlowRate q_nom(final min=0) = 0.01
        "Nominal flow rate when fully open"
          annotation (Dialog(tab="Sizing"));
        parameter SI.Density d_nom = 850 "Nominal density"
          annotation (Dialog(tab="Sizing"));

        extends OpenHydraulics.Interfaces.PartialFluidComponent;

        // advanced parameters
        parameter Real timeConstant(final min=0)=0.01
          annotation (Dialog(tab="Advanced"));
        parameter Boolean from_dp = true
        "= true, use m_flow = f(dp) else dp = f(m_flow)"
          annotation (Evaluate=true, Dialog(tab="Advanced"));
        parameter Boolean use_Re = false
        "= true, if turbulent region is defined by Re, otherwise by dp_small or m_flow_small"
          annotation(Evaluate=true, Dialog(tab="Advanced"));
        parameter SI.AbsolutePressure dp_small = 1
        "Turbulent flow if |dp| >= dp_small"
          annotation(Dialog(tab="Advanced", enable=not use_Re and from_dp));
        parameter SI.MassFlowRate m_flow_small = 0.01
        "Turbulent flow if |m_flow| >= m_flow_small"
          annotation(Dialog(tab="Advanced", enable=not use_Re and not from_dp));

        // main variables
        SI.Pressure dp = port_a.p - port_b.p
        "Pressure drop from port_a to port_b";

        // the connectors
        OpenHydraulics.Interfaces.FluidPort port_a
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}},
                rotation=0)));
        OpenHydraulics.Interfaces.FluidPort port_b
          annotation (Placement(transformation(extent={{110,-10},{90,10}},
                rotation=0)));

        // internal component
        OpenHydraulics.Basic.VariableRestriction variableRestriction(
          smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments,
          final use_Re=use_Re,
          final from_dp=from_dp,
          final dp_small=dp_small,
          m_flow_small=m_flow_small,
          D_nom=0.01,
          final q_nom=q_nom,
          final dp_nom=dp_open)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=0)));

        Real valvePosition(start=0)
        "Normalized valve position (between 0 and 1)";
        Real valvePositionSteadyState "Steady state position of valve)";

      algorithm
        variableRestriction.control := valvePosition;
      initial equation
        assert(dp_relief<dp_open,"The relief pressure must be smaller than the fully open pressure");
      equation
        // THIS IS THE ONLY DIFFERENCE WITH A CHECK VALVE
        // valve should open when p_a>p_b+dp_relief or dp>dp_relief
        valvePositionSteadyState = max(0,min((dp-dp_relief)/(dp_open - dp_relief),1));

        // add valve dynamics if necessary
        if timeConstant > 0 then
          der(valvePosition) = (valvePositionSteadyState - valvePosition)/timeConstant;
        else
          valvePosition = valvePositionSteadyState;
        end if;

        connect(variableRestriction.port_a, port_a)
          annotation (Line(points={{-10,0},{-100,0}}, color={255,0,0}));
        connect(variableRestriction.port_b, port_b) annotation (Line(points={{10,
                0},{52,0},{52,0},{100,0}}, color={255,0,0}));
        annotation (
          Diagram(graphics={
              Text(
                extent={{-90,40},{-60,0}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString=
                     "A"),
              Text(
                extent={{60,40},{90,0}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString=
                     "B"),
              Text(
                extent={{0,-40},{0,-52}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString=
                     "for valve dynamics"),
              Text(
                extent={{0,-28},{0,-40}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString=
                     "see equations section"),
              Rectangle(extent={{-52,-24},{52,-56}}, lineColor={0,0,255}),
              Line(points={{0,-8},{0,-24}}, color={0,0,255})}),
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                  100,100}}), graphics={
              Rectangle(
                extent={{-80,80},{80,-60}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-40,40},{40,-40}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{-40,0},{-100,0}}, color={0,0,0}),
              Line(points={{100,0},{40,0}}, color={0,0,0}),
              Line(points={{-40,-20},{40,-20}}, color={0,0,0}),
              Polygon(
                points={{40,-20},{24,-16},{24,-24},{40,-20}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Line(
                points={{0,-40},{0,-60},{-70,-60},{-70,0}},
                color={0,0,0},
                pattern=LinePattern.Dot),
              Line(points={{20,40},{-20,48},{20,56},{-20,64},{20,72},{-20,80},{20,
                    80}}, color={0,0,0}),
              Line(points={{-42,74},{36,48}}, color={0,0,0}),
              Polygon(
                points={{-42,74},{-30,74},{-32,68},{-42,74}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{60,40},{90,0}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="B"),
              Text(
                extent={{-98,40},{-50,0}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="A"),
              Text(
                extent={{0,-60},{0,-90}},
                lineColor={0,0,255},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="%name")}),
          DymolaStoredErrors);
      end ReliefValve;

      model OpenCircuit "Open connection for use in reconfigurable components"
        extends OpenHydraulics.Interfaces.PartialFluidComponent;

        // main variables
        SI.Pressure dp = port_a.p - port_b.p
        "Pressure drop from port_a to port_b";
        // the connectors
        OpenHydraulics.Interfaces.FluidPort port_a
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}},
                rotation=0)));
        OpenHydraulics.Interfaces.FluidPort port_b
          annotation (Placement(transformation(extent={{110,-10},{90,10}},
                rotation=0)));

        OpenHydraulics.Basic.ConstVolumeSource noFlowA(q=0)
          annotation (Placement(transformation(extent={{-60,-40},{-40,-20}},
                rotation=0)));
        OpenHydraulics.Basic.ConstVolumeSource noFlowB(q=0)
          annotation (Placement(transformation(extent={{40,-40},{60,-20}},
                rotation=0)));
      equation
        // flow is zero
        port_a.m_flow = 0;
        port_b.m_flow = 0;

        connect(port_a, noFlowA.port) annotation (Line(points={{-100,0},{-50,0},{
                -50,-20}}, color={255,0,0}));
        connect(noFlowB.port, port_b) annotation (Line(points={{50,-20},{50,0},{
                100,0}}, color={255,0,0}));
        annotation (
          Diagram(graphics={Text(
                extent={{-90,40},{-60,0}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString=
                     "A"), Text(
                extent={{60,40},{90,0}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString=
                     "B")}),
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                  100,100}}), graphics={
              Rectangle(
                extent={{-88,44},{88,-48}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{-40,0},{-100,0}}, color={0,0,0}),
              Line(points={{100,0},{40,0}}, color={0,0,0}),
              Text(
                extent={{60,40},{90,0}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="B"),
              Text(
                extent={{-98,40},{-50,0}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="A"),
              Text(
                extent={{0,74},{0,44}},
                lineColor={0,0,255},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="%name"),
              Line(points={{-40,20},{-40,-20}}, color={0,0,0}),
              Line(points={{40,20},{40,-20}}, color={0,0,0})}),
          DymolaStoredErrors);
      end OpenCircuit;

      model ShuttleValve

        // sizing parameters
        parameter SI.VolumeFlowRate q_nom = 0.001 "Nominal flow rate at dp_nom"
          annotation(Dialog(tab="Sizing"));
        parameter SI.Pressure dp_nom = 1e6 "Nominal dp for metering curve"
          annotation(Dialog(tab="Sizing",group="Nominal values"));
        parameter SI.Density d_nom = 850
        "Nominal fluid density for metering curve"
          annotation(Dialog(tab="Sizing",group="Nominal values"));

        // dynamic parameters
        parameter SI.Time timeConstant=0.001
        "Time constant of dynamic response"
          annotation(Dialog(tab="Dynamics"));
        parameter SI.Pressure dp_hyst(min=1)=1000
        "Deadband to avoid chattering; switch when |dp|>dp_hyst"
          annotation(Dialog(tab="Dynamics"));

        OpenHydraulics.Interfaces.FluidPort PortA
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}},
                rotation=0)));
        OpenHydraulics.Interfaces.FluidPort PortB
          annotation (Placement(transformation(extent={{90,-10},{110,10}},
                rotation=0)));
        OpenHydraulics.Interfaces.FluidPort PortC
          annotation (Placement(transformation(extent={{-10,-90},{10,-70}},
                rotation=0)));
        OpenHydraulics.Basic.VarPressureSource pressC
          annotation (Placement(transformation(
              origin={0,-50},
              extent={{-10,-10},{10,10}},
              rotation=180)));

        extends OpenHydraulics.Interfaces.PartialFluidComponent;
        OpenHydraulics.Basic.ConstVolumeSource noFlowA(q=0)
          annotation (Placement(transformation(extent={{-60,-40},{-40,-20}},
                rotation=0)));
        OpenHydraulics.Basic.ConstVolumeSource noFlowB(q=0)
          annotation (Placement(transformation(extent={{40,-40},{60,-20}},
                rotation=0)));
      equation
        pressC.control = max(PortA.p,PortB.p);

        connect(pressC.port, PortC)            annotation (Line(points={{-1.22465e-015,
                -60},{0,-60},{0,-80}},               color={255,0,0}));

        connect(PortA, noFlowA.port) annotation (Line(points={{-100,0},{-50,0},{
                -50,-20}}, color={255,0,0}));
        connect(PortB, noFlowB.port) annotation (Line(points={{100,0},{50,0},{50,
                -20}}, color={255,0,0}));
        annotation (Diagram(graphics),
                             Icon(coordinateSystem(preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}), graphics={
              Rectangle(
                extent={{-88,44},{88,-48}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{26,24},{53,0},{26,-24}}, color={0,0,0}),
              Text(
                extent={{60,40},{90,0}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="B"),
              Text(
                extent={{-98,40},{-50,0}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="A"),
              Text(
                extent={{0,74},{0,44}},
                lineColor={0,0,255},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="%name"),
              Line(points={{-26,24},{-54,0},{-26,-24}}, color={0,0,0}),
              Ellipse(
                extent={{-3,3},{3,-3}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Line(points={{0,-80},{0,0}}, color={0,0,0}),
              Line(points={{100,0},{-100,0}}, color={0,0,0}),
              Ellipse(
                extent={{18,14},{46,-14}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(extent={{-60,28},{60,-28}}, lineColor={0,0,0}),
              Text(
                extent={{-4,-38},{38,-78}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="C")}));
      end ShuttleValve;

      model Anticavitation_ReliefValve

        extends OpenHydraulics.Interfaces.PartialFluidComponent;

        OpenHydraulics.Components.Valves.CheckValve checkValve(q_nom=0.1)
                    annotation (Placement(transformation(
                extent={{0,-30},{20,-10}}, rotation=0)));
        OpenHydraulics.Components.Valves.ReliefValve reliefValve(q_nom=0.01)
                       annotation (Placement(transformation(
                extent={{0,10},{20,30}}, rotation=0)));
        OpenHydraulics.Interfaces.FluidPort port_a
          annotation (Placement(transformation(extent={{-90,-10},{-70,10}},
                rotation=0)));
        OpenHydraulics.Interfaces.FluidPort port_b
          annotation (Placement(transformation(extent={{90,-10},{70,10}},
                rotation=0)));
        OpenHydraulics.Components.Lines.NJunction j2(n_ports=3)
          annotation (Placement(transformation(extent={{-50,-10},{-30,10}},
                rotation=0)));

        OpenHydraulics.Components.Lines.NJunction j1(n_ports=3)
          annotation (Placement(transformation(extent={{50,-10},{70,10}},
                rotation=0)));
      equation
        connect(j2.port[1], port_a) annotation (Line(points={{-40,-0.666667},{-40,
                0},{-80,0}}, color={255,0,0}));
        connect(j2.port[2], reliefValve.port_a) annotation (Line(points={{-40,5.55112e-017},
                {-40,20},{0,20}},               color={255,0,0}));
        connect(j2.port[3], checkValve.port_a) annotation (Line(points={{-40,0.666667},
                {-40,-20},{0,-20}},           color={255,0,0}));
        connect(j1.port[3], port_b) annotation (Line(points={{60,0.666667},{60,0},
                {80,0}}, color={255,0,0}));
        connect(checkValve.port_b, j1.port[1]) annotation (Line(points={{20,-20},
                {60,-20},{60,-0.666667}}, color={255,0,0}));
        connect(reliefValve.port_b, j1.port[2]) annotation (Line(points={{20,20},
                {60,20},{60,5.55112e-017}}, color={255,0,0}));

      annotation (Diagram(graphics),
                           Icon(coordinateSystem(preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}), graphics={
              Line(
                points={{2,-60},{22,-40},{2,-20}},
                color={0,0,0},
                thickness=0.5),
              Rectangle(
                extent={{-20,60},{20,20}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(
                points={{-32,40},{-32,74},{2,74},{2,60}},
                color={0,0,0},
                pattern=LinePattern.Dash),
              Line(points={{-4,20},{8,20},{-4,18},{8,18},{-4,16},{8,16},{-4,14},{
                    8,14},{-4,12},{8,12},{-4,10},{8,10}}, color={0,0,0}),
              Line(points={{-60,0},{-60,-40},{60,-40},{60,0}}, color={0,0,0}),
              Ellipse(
                extent={{12,-60},{-26,-20}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{20,48},{16,50},{16,50},{16,46},{20,48}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Line(points={{-78,0},{-60,0}}, color={0,0,0}),
              Line(points={{-60,0},{-60,40},{-20,40}}, color={0,0,0}),
              Line(points={{20,42},{46,42},{60,42},{60,2},{80,2}}, color={0,0,0}),
              Line(points={{18,48},{-20,48}}, color={0,0,0}),
              Text(
                extent={{-84,108},{76,68}},
                lineColor={0,0,255},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="%name"),
              Text(
                extent={{-100,60},{-60,20}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="A"),
              Text(
                extent={{60,60},{100,20}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="B")}));
      end Anticavitation_ReliefValve;

      model PostPCValve "Simple equation model for a post PC valve"
        // sizing parameters
        parameter Modelica.SIunits.Pressure p_margin=100000;
        parameter Modelica.SIunits.Density d_nom=850 "Nominal density"
          annotation (Dialog(tab="Sizing"));
        extends OpenHydraulics.Interfaces.PartialFluidComponent;
    public
        parameter Real time_constant=0;
        // advanced parameters
        parameter Boolean from_dp = true
        "= true, use m_flow = f(dp) else dp = f(m_flow)"
          annotation (Evaluate=true, Dialog(tab="Advanced"));
        parameter Boolean use_Re = false
        "= true, if turbulent region is defined by Re, otherwise by dp_small or m_flow_small"
          annotation(Evaluate=true, Dialog(tab="Advanced"));
        parameter Modelica.SIunits.AbsolutePressure dp_small=1
        "Turbulent flow if |dp| >= dp_small"
          annotation(Dialog(tab="Advanced", enable=not use_Re and from_dp));
        parameter Modelica.SIunits.MassFlowRate m_flow_small=0.01
        "Turbulent flow if |m_flow| >= m_flow_small"
          annotation(Dialog(tab="Advanced", enable=not use_Re and not from_dp));

        // main variables
        Modelica.SIunits.Pressure dp=port_a.p - port_b.p
        "Pressure drop from port_a to port_b";
        // the connectors
        OpenHydraulics.Interfaces.FluidPort port_a
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}},
                rotation=0)));
        OpenHydraulics.Interfaces.FluidPort port_b
          annotation (Placement(transformation(extent={{110,-10},{90,10}},
                rotation=0)));
        OpenHydraulics.Interfaces.FluidPort port_LS
          annotation (Placement(transformation(extent={{-10,-100},{10,-80}},
                rotation=0)));

        OpenHydraulics.Basic.VariableRestriction variableRestriction(
          smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments,
          use_Re=use_Re,
          from_dp=from_dp,
          dp_small=dp_small,
          m_flow_small=m_flow_small,
          D_nom=0.01,
          min_contr=0,
          max_contr=1,
          table=[0.0,0.0; 1,1])
          annotation (Placement(transformation(extent={{0,-10},{20,10}}, rotation=
                 0)));
    protected
        Real valvePosition(start=0) "Input for controller"
                                                      annotation (Dialog(tab="Sizing"));

      algorithm
        variableRestriction.control := valvePosition;

      equation
       valvePosition =max(0, min((port_b.p - port_LS.p)/(p_margin), 1));
       port_LS.m_flow=0;
        connect(port_a, variableRestriction.port_a)  annotation (Line(points={{
                -100,0},{0,0}}, color={255,0,0}));
        connect(variableRestriction.port_b, port_b)  annotation (Line(points={{20,
                0},{100,0}}, color={255,0,0}));
      annotation (
          Diagram(graphics={
              Text(
                extent={{-90,60},{-60,20}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString=
                     "A"),
              Text(
                extent={{60,40},{90,0}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString=
                     "B"),
              Text(
                extent={{10,-60},{10,-72}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString=
                     "for valve dynamics"),
              Text(
                extent={{10,-48},{10,-60}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString=
                     "see equations section"),
              Rectangle(extent={{-40,-44},{64,-76}}, lineColor={0,0,255}),
              Line(points={{10,-8},{10,-44}}, color={0,0,255})}),
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                  100,100}}), graphics={
              Rectangle(
                extent={{-84,86},{88,-88}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-30,72},{48,-32}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{-18,0},{-102,0}}, color={0,0,0}),
              Line(points={{96,0},{46,0}}, color={0,0,0}),
              Polygon(
                points={{48,48},{32,52},{32,44},{48,48}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Line(
                points={{0,-60},{0,-32},{0,-80},{-2,-80}},
                color={0,0,0},
                pattern=LinePattern.Dot),
              Line(points={{32,-52},{12,-48},{32,-44},{12,-40},{32,-36},{12,-32},
                    {42,-32}}, color={0,0,0}),
              Line(points={{-30,48},{48,48}}, color={0,0,0}),
              Text(
                extent={{72,38},{94,4}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="B"),
              Text(
                extent={{-90,32},{-62,-2}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="A"),
              Text(
                extent={{0,106},{0,76}},
                lineColor={0,0,255},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="%name"),
              Line(points={{-30,0},{-20,0},{-18,0},{-16,0}}, color={0,0,0}),
              Line(points={{-16,8},{-16,-8}}, color={0,0,0}),
              Line(points={{32,8},{32,-8}}, color={0,0,0}),
              Line(points={{32,0},{48,0}}, color={0,0,0}),
              Line(
                points={{8,72},{8,80},{64,80},{64,0}},
                color={0,0,0},
                pattern=LinePattern.Dot),
              Line(points={{-30,22},{48,22}}, color={0,0,0})}),
          DymolaStoredErrors);
      end PostPCValve;

      package DirectionalValves
        extends OpenHydraulics.Interfaces.VariantLibrary;

        model V4_3CC "4-port 3-position closed center valve"
          extends
          OpenHydraulics.Components.Valves.DirectionalValves.BaseClasses.PartialValve4_3pos;

          // include just the arrows for each position
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                    -100,-100},{100,100}}), graphics={
                Line(points={{-74,-30},{-74,30}}, color={0,0,0}),
                Line(points={{-46,-30},{-46,30}}, color={0,0,0}),
                Polygon(
                  points={{-74,30},{-80,10},{-68,10},{-74,30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-46,-30},{-52,-10},{-40,-10},{-46,-30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{74,-30},{46,30}}, color={0,0,0}),
                Line(points={{46,-30},{74,30}}, color={0,0,0}),
                Polygon(
                  points={{74,-30},{58,-14},{70,-8},{74,-30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{74,30},{70,6},{58,12},{74,30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{-14,-30},{-14,-12}}, color={0,0,0}),
                Line(points={{-20,-12},{-8,-12}}, color={0,0,0}),
                Line(points={{-20,12},{-8,12}}, color={0,0,0}),
                Line(points={{8,12},{20,12}}, color={0,0,0}),
                Line(points={{8,-12},{20,-12}}, color={0,0,0}),
                Line(points={{-14,12},{-14,30}}, color={0,0,0}),
                Line(points={{14,12},{14,30}}, color={0,0,0}),
                Line(points={{14,-30},{14,-12}}, color={0,0,0}),
                Line(points={{-14,30},{-14,60},{-40,60},{-40,80}}, color={255,0,0}),
                Line(points={{14,30},{14,60},{40,60},{40,80}}, color={255,0,0}),
                Line(points={{-14,-30},{-14,-60},{-40,-60},{-40,-80}}, color={255,
                      0,0}),
                Line(points={{14,-30},{14,-60},{40,-60},{40,-80}}, color={255,0,0})}),
                                    Diagram(graphics));

        end V4_3CC;

        model V4_3CCRegenerative "Simple Regenerative valve model"

          // parameters
          parameter SI.VolumeFlowRate q_nom = 0.001
          "Nominal flow rate at dp_nom"
            annotation(Dialog(tab="Sizing"));
          parameter SI.Pressure dp_nom = 1e6 "Nominal dp for metering curve"
            annotation(Dialog(tab="Sizing"));
          parameter Real q_fraction_P2A = 1 "Fraction of nominal flow rate"
            annotation(Dialog(tab="Sizing",group="Advanced Metering"));
          parameter Real q_fraction_P2B = 1 "Fraction of nominal flow rate"
            annotation(Dialog(tab="Sizing",group="Advanced Metering"));
          parameter Real q_fraction_A2T = 1 "Fraction of nominal flow rate"
            annotation(Dialog(tab="Sizing",group="Advanced Metering"));
          parameter Real dampCoeff = 1
          "Damping coefficient of 2nd order response"
            annotation(Dialog(tab="Dynamics"));
          parameter Modelica.SIunits.Frequency bandwidth=100
          "Bandwidth of 2nd order response"
            annotation(Dialog(tab="Dynamics"));

          // configuration options
          parameter Boolean useCheckValve = true
          "true = use check valve on port P"
            annotation (Dialog(tab="Config Options"));

          extends
          OpenHydraulics.Components.Valves.DirectionalValves.BaseClasses.Valve4_3posInterface;

           //junctions
          OpenHydraulics.Components.Lines.NJunction j1
            annotation (Placement(transformation(extent={{-50,50},{-30,70}},
                  rotation=0)));

          OpenHydraulics.Components.Lines.NJunction j2
            annotation (Placement(transformation(extent={{-50,-66},{-30,-46}},
                  rotation=0)));

          //components
          Basic.VariableRestriction P2B(
            min_contr=-1,
            final q_nom=q_nom*q_fraction_P2B,
            table=[-1,1; 0,0; 1,1])
            annotation (Placement(transformation(extent={{-20,-30},{0,-50}},
                  rotation=0)));

          Basic.VariableRestriction P2A(
            table=[-1,0; 0,0; 1,1],
            min_contr=-1,
            final q_nom=q_nom*q_fraction_P2A)
            annotation (Placement(transformation(
                origin={-40,0},
                extent={{-10,-10},{10,10}},
                rotation=90)));

          Basic.VariableRestriction A2T(
            min_contr=-1,
            final q_nom=q_nom*q_fraction_A2T,
            table=[-1,1; 0,0; 1,0])
            annotation (Placement(transformation(
                origin={-10,40},
                extent={{10,10},{-10,-10}},
                rotation=180)));

          Modelica.Blocks.Continuous.SecondOrder dynamicResponse(
            w=bandwidth*2*Modelica.Constants.pi,
            D=dampCoeff,
            initType=Modelica.Blocks.Types.Init.SteadyState)
            annotation (Placement(transformation(extent={{82,-10},{62,10}},
                  rotation=0)));
        initial equation
          assert(useCheckValve,"not implemented yet without serial check valve");

        equation
          connect(dynamicResponse.u, control)
            annotation (Line(points={{84,0},{110,0}}, color={0,0,127}));
          connect(portP,j2. port[1]) annotation (Line(points={{-40,-80},{-40,
                  -56.6667}}, color={255,0,0}));
          connect(j2.port[2], P2A.port_a) annotation (Line(points={{-40,-56},{-40,
                  -10}}, color={255,0,0}));
          connect(P2A.port_b, j1.port[1]) annotation (Line(points={{-40,10},{-40,
                  59.3333}}, color={255,0,0}));
          connect(j1.port[2], portA) annotation (Line(points={{-40,60},{-40,80}},
                color={255,0,0}));
          connect(j1.port[3], A2T.port_a) annotation (Line(points={{-40,60.6667},
                  {-40,40},{-20,40}}, color={255,0,0}));
          connect(j2.port[3], P2B.port_a) annotation (Line(points={{-40,-55.3333},
                  {-40,-40},{-20,-40}}, color={255,0,0}));
          connect(dynamicResponse.y, A2T.control) annotation (Line(points={{61,0},
                  {-10,0},{-10,32}}, color={0,0,127}));
          connect(dynamicResponse.y, P2B.control) annotation (Line(points={{61,0},
                  {-10,0},{-10,-32}}, color={0,0,127}));
          connect(dynamicResponse.y, P2A.control) annotation (Line(points={{61,0},
                  {-32,0},{-32,-4.89843e-016}}, color={0,0,127}));
          connect(P2B.port_b, portB) annotation (Line(points={{0,-40},{20,-40},{
                  40,40},{40,80}}, color={255,0,0}));
          connect(A2T.port_b, portT) annotation (Line(points={{0,40},{20,40},{40,
                  -40},{40,-80}}, color={255,0,0}));
          annotation (Diagram(graphics),
                               Icon(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics={
                Line(points={{-14,12},{-14,30}}, color={0,0,0}),
                Line(points={{-20,12},{-8,12}}, color={0,0,0}),
                Line(points={{8,12},{20,12}}, color={0,0,0}),
                Line(points={{14,12},{14,30}}, color={0,0,0}),
                Line(points={{8,-12},{20,-12}}, color={0,0,0}),
                Line(points={{14,-30},{14,-12}}, color={0,0,0}),
                Line(points={{-14,-30},{-14,-12}}, color={0,0,0}),
                Line(points={{-20,-12},{-8,-12}}, color={0,0,0}),
                Line(points={{-74,-30},{-74,30}}, color={0,0,0}),
                Line(points={{-46,12},{-46,30}}, color={0,0,0}),
                Line(points={{-74,12},{-46,12}}, color={0,0,0}),
                Line(points={{-46,-30},{-46,-12}}, color={0,0,0}),
                Line(points={{-52,-12},{-40,-12}}, color={0,0,0}),
                Line(points={{-40,70},{-40,60},{-14,60},{-14,30}}, color={255,0,0}),
                Line(points={{40,80},{40,60},{14,60},{14,30}}, color={255,0,0}),
                Line(points={{-40,-78},{-40,-60},{-14,-60},{-14,-30}}, color={255,
                      0,0}),
                Line(points={{40,-80},{40,-60},{16,-60},{14,-60}}, color={255,0,0}),
                Line(points={{14,-30},{14,-60}}, color={255,0,0}),
                Line(points={{44,-30},{74,30}}, color={0,0,0}),
                Line(points={{44,30},{74,-30}}, color={0,0,0}),
                Polygon(
                  points={{74,30},{66,24},{72,20},{74,30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{72,-18},{66,-22},{74,-30},{72,-18}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{-80,92},{80,112}},
                  lineColor={0,0,255},
                  textString="%name")}));
        end V4_3CCRegenerative;

        model V4_3CCLSHydAntiCavitation
        "4-port 3-pos load-sensing valve with anti cavitation check valve"

          // parameters
          parameter SI.Time timeConstLS(final min=1e-3) = 0.05
          "response time of LS signal"
            annotation(Dialog(tab="Advanced"));
          parameter Real switchBand(final min=1e-3) = 0.01
          "Band of control inputs in which the LS port is switched"
            annotation(Dialog(tab="Advanced"));

          OpenHydraulics.Interfaces.FluidPort portLS
            annotation (Placement(transformation(extent={{-10,70},{10,90}},
                  rotation=0)));

          // configurable components
          replaceable OpenHydraulics.Components.Valves.CheckValve checkT2B(q_nom=
                0.02)
            annotation (
            choicesFromPackage=true,
            Dialog(tab="Config Options"),
            Placement(transformation(
                origin={56,44},
                extent={{-8,-8},{8,8}},
                rotation=270)));

          replaceable OpenHydraulics.Components.Valves.CheckValve checkT2A(q_nom=
                0.02)
            annotation (
            choicesFromPackage=true,
            Dialog(tab="Config Options"),
            Placement(transformation(
                origin={-56,44},
                extent={{-8,-8},{8,8}},
                rotation=270)));

          replaceable OpenHydraulics.Components.Valves.ReliefValve reliefB2T(dp_relief=
               1e7, dp_open=1e8)
            annotation (
            choicesFromPackage=true,
            Dialog(tab="Config Options"),
            Placement(transformation(
                origin={80,44},
                extent={{-8,-8},{8,8}},
                rotation=270)));

          replaceable OpenHydraulics.Components.Valves.ReliefValve reliefA2T(dp_relief=
               1e7, dp_open=1e8)
            annotation (
            choicesFromPackage=true,
            Dialog(tab="Config Options"),
            Placement(transformation(
                origin={-80,44},
                extent={{-8,-8},{8,8}},
                rotation=270)));

          Basic.VarPressureSource pressLS
            annotation (Placement(transformation(extent={{-10,40},{10,60}},
                  rotation=0)));

          extends
          OpenHydraulics.Components.Valves.DirectionalValves.BaseClasses.PartialValve4_3pos(
            j2(n_ports=5),
            j4(n_ports=7),
            j3(n_ports=5));

      protected
          SI.AbsolutePressure ssLS "Steady State Load Sense pressure";
          SI.AbsolutePressure p_LS(start=p_init,fixed=true)
          "Load Sense pressure";
        equation
          // first order response for LS pressure
          ssLS = if dynamicResponse.y > switchBand then portA.p else
                 if dynamicResponse.y < -switchBand then portB.p else
                 portT.p;
          der(p_LS)*timeConstLS = ssLS - p_LS;
          pressLS.control = p_LS;

          connect(j2.port[4], checkT2A.port_a) annotation (Line(points={{-40,60},
                  {-40,60},{-56,60},{-56,52}}, color={255,0,0}));
          connect(checkT2A.port_b, j4.port[4]) annotation (Line(points={{-56,36},
                  {-56,-46},{0,-46},{0,-60},{40,-60},{40,-60}}, color={255,0,0}));
          connect(j3.port[4], checkT2B.port_a) annotation (Line(points={{40,60},{
                  40,60},{56,60},{56,52}}, color={255,0,0}));
          connect(checkT2B.port_b, j4.port[5]) annotation (Line(points={{56,36},{
                  56,-60},{40,-60},{40,-60}}, color={255,0,0}));

          connect(j2.port[5], reliefA2T.port_a)   annotation (Line(points={{-40,
                  60},{-40,60},{-80,60},{-80,52}}, color={255,0,0}));
          connect(reliefA2T.port_b, j4.port[6])   annotation (Line(points={{-80,
                  36},{-80,28},{-56,28},{-56,-46},{0,-46},{0,-60},{40,-60},{40,
                  -60}}, color={255,0,0}));
          connect(j3.port[5], reliefB2T.port_a)    annotation (Line(points={{40,
                  60},{40,60},{80,60},{80,52}}, color={255,0,0}));
          connect(reliefB2T.port_b, j4.port[7])    annotation (Line(points={{80,
                  36},{80,28},{56,28},{56,-60},{40,-60},{40,-60}}, color={255,0,0}));
          connect(pressLS.port, portLS)
            annotation (Line(points={{0,60},{0,80}}, color={255,0,0}));

          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                    -100,-100},{100,100}}), graphics={
                Line(points={{-78,-30},{-78,30}}, color={0,0,0}),
                Line(points={{-42,-30},{-42,30}}, color={0,0,0}),
                Polygon(
                  points={{-78,30},{-84,10},{-72,10},{-78,30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-42,-30},{-48,-10},{-36,-10},{-42,-30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{78,-30},{42,30}}, color={0,0,0}),
                Line(points={{42,-30},{78,30}}, color={0,0,0}),
                Polygon(
                  points={{78,-30},{62,-14},{72,-8},{78,-30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{78,30},{72,8},{62,14},{78,30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{-18,-30},{-18,-12}}, color={0,0,0}),
                Line(points={{-24,-12},{-12,-12}}, color={0,0,0}),
                Line(points={{-24,12},{-12,12}}, color={0,0,0}),
                Line(points={{12,12},{24,12}}, color={0,0,0}),
                Line(points={{-18,12},{-18,30}}, color={0,0,0}),
                Line(points={{18,12},{18,30}}, color={0,0,0}),
                Line(points={{-18,30},{-18,60},{-40,60},{-40,80}}, color={255,0,0}),
                Line(points={{18,30},{18,60},{40,60},{40,80}}, color={255,0,0}),
                Line(points={{-18,-30},{-18,-60},{-40,-60},{-40,-80}}, color={255,
                      0,0}),
                Line(points={{18,-30},{18,-60},{40,-60},{40,-80}}, color={255,0,0}),
                Line(points={{-60,4},{-60,30}}, color={0,0,0}),
                Line(points={{-78,4},{-60,4}}, color={0,0,0}),
                Line(points={{60,10},{60,30}}, color={0,0,0}),
                Line(points={{60,10},{66,10}}, color={0,0,0}),
                Line(points={{18,-30},{0,30}}, color={0,0,0}),
                Polygon(
                  points={{18,-30},{6,-12},{18,-8},{18,-30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{0,30},{0,82}}, color={0,0,0}),
                Text(
                  extent={{0,72},{0,40}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid,
                  textString="LS")}),
                                    Diagram(graphics));
        end V4_3CCLSHydAntiCavitation;

        model V4_3OC "4-port 3-position valve with open center"
          extends
          OpenHydraulics.Components.Valves.DirectionalValves.BaseClasses.PartialValve4_3pos(
            A2T(max_contr=1, table=[-1,1; 0,1; 1,0]),
            P2A(min_contr=-1, table=[-1,0; 0,1; 1,1]),
            P2B(max_contr=1, table=[-1,1; 0,1; 1,0]),
            B2T(min_contr=-1, table=[-1,0; 0,1; 1,1]),
            j1(n_ports=3),
            j4(n_ports=3));

          // a regular 4-way 3-position valve to which a load sensor is attached

            annotation(Dialog(tab="Advanced"), Diagram(graphics),
            Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                    {100,100}}), graphics={
                Text(
                  extent={{-80,92},{80,112}},
                  lineColor={0,0,255},
                  textString="%name"),
                Line(points={{-78,-30},{-78,30}}, color={0,0,0}),
                Polygon(
                  points={{-78,30},{-84,10},{-72,10},{-78,30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{-44,-30},{-44,30}}, color={0,0,0}),
                Polygon(
                  points={{-44,-30},{-50,-10},{-38,-10},{-44,-30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{42,-30},{78,30}}, color={0,0,0}),
                Line(points={{78,-30},{42,30}}, color={0,0,0}),
                Polygon(
                  points={{78,-30},{62,-14},{72,-8},{78,-30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{78,30},{72,8},{62,14},{78,30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{18,30},{18,60},{40,60},{40,80}}, color={255,0,0}),
                Line(points={{-18,30},{-18,60},{-40,60},{-40,80}}, color={255,0,0}),
                Line(points={{-18,-30},{-18,-60},{-40,-60},{-40,-82}}, color={255,
                      0,0}),
                Line(points={{18,-30},{18,-60},{40,-60},{40,-76}}, color={255,0,0}),
                Line(points={{-18,-30},{-18,0},{18,0},{18,-30},{18,-24}}, color={
                      0,0,0}),
                Line(points={{-18,30},{-18,0}}, color={0,0,0}),
                Line(points={{18,30},{18,0}}, color={0,0,0})}),
                      Icon(
              Line(points=[-78,-30; -78,30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[-42,-30; -42,30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Polygon(points=[-78,30; -84,10; -72,10; -78,30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Polygon(points=[-42,-30; -48,-10; -36,-10; -42,-30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Line(points=[78,-30; 42,30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[42,-30; 78,30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Polygon(points=[78,-30; 62,-14; 72,-8; 78,-30],  style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Polygon(points=[78,30; 72,8; 62,14; 78,30],  style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Line(points=[-18,-30; -18,-12], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[-18,12; -18,30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[18,12; 18,30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[-18,30; -18,60; -40,60; -40,80],  style(
                  color=1,
                  rgbcolor={255,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Line(points=[18,30; 18,60; 40,60; 40,80],  style(
                  color=1,
                  rgbcolor={255,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Line(points=[-18,-30; -18,-60; -40,-60; -40,-80],  style(
                  color=1,
                  rgbcolor={255,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Line(points=[18,-30; 18,-60; 40,-60; 40,-80],  style(
                  color=1,
                  rgbcolor={255,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Line(points=[18,-30; 18,-12],   style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[-26,-12; -10,-12], style(color=0, rgbcolor={0,0,0})),
              Line(points=[-26,12; -10,12], style(color=0, rgbcolor={0,0,0})),
              Line(points=[10,12; 26,12], style(color=0, rgbcolor={0,0,0})),
              Line(points=[10,-12; 26,-12], style(color=0, rgbcolor={0,0,0})),
              Polygon(points=[16,-12; 0,4; 10,10; 16,-12],     style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Line(points=[0,12; 0,30],     style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[0,12; 6,4; 8,2], style(color=0, rgbcolor={0,0,0})),
              Rectangle(extent=[-30,30; 30,-30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[-18,30; -18,-30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[18,30; 18,-30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[-18,0; 18,0], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1))), Diagram);
        end V4_3OC;

        model V4_3OCFloat
        "4-port 3-position valve with open center 'float' style"
          extends
          OpenHydraulics.Components.Valves.DirectionalValves.BaseClasses.PartialValve4_3pos(
            A2T(max_contr=1, table=[-1,1; 0,0; 1,0]),
            P2A(min_contr=-1, table=[-1,0; 0,0; 1,1]),
            P2B(max_contr=1, table=[-1,1; 0,0; 1,0]),
            B2T(min_contr=-1, table=[-1,0; 0,0; 1,1]),
            j1(n_ports=4),
            j4(n_ports=4),
            j2(n_ports=4),
            j3(n_ports=4));

          // a regular 4-way 3-position valve with an open center tandem

             //components
          Basic.VariableRestriction P2T(
            D_nom=0.01,
            dp_nom=2e5,
            p_init=p_init,
            min_contr=-1,
            max_contr=1,
            table=[-1,0; 0,1; 1,0])
            annotation (
            Dialog(tab="Sizing",group="Metering"), Placement(transformation(
                  extent={{-8,-32},{8,-48}}, rotation=0)));

          Basic.VariableRestriction A2B(
            D_nom=0.01,
            dp_nom=2e5,
            p_init=p_init,
            min_contr=-1,
            max_contr=1,
            table=[-1,0; 0,1; 1,0])
            annotation (
            Dialog(tab="Sizing",group="Metering"), Placement(transformation(
                  extent={{-8,68},{8,52}}, rotation=0)));

          //equations and connect
        equation
          connect(control, P2T.control) annotation (Line(points={{110,0},{50,0},{
                  50,-20},{0,-20},{0,-33.6}}, color={0,0,127}));
          connect(P2T.port_b, j4.port[4]) annotation (Line(points={{8,-40},{40,
                  -40},{40,-60}}, color={255,0,0}));
          connect(j1.port[4], P2T.port_a) annotation (Line(points={{-40,-60},{-40,
                  -40},{-8,-40}}, color={255,0,0}));
          connect(A2B.port_a, j2.port[4]) annotation (Line(points={{-8,60},{-40,
                  60}}, color={255,0,0}));
          connect(A2B.port_b, j3.port[4]) annotation (Line(points={{8,60},{40,60}},
                color={255,0,0}));
          connect(A2B.control, control) annotation (Line(points={{0,66.4},{0,70},
                  {50,70},{50,0},{110,0}}, color={0,0,127}));

           annotation(Dialog(tab="Advanced"),
            Diagram(graphics),
            Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                    {100,100}}), graphics={
                Line(points={{18,30},{18,12}}, color={0,0,0}),
                Line(points={{-18,30},{-18,12}}, color={0,0,0}),
                Line(points={{18,12},{-18,12}}, color={0,0,0}),
                Line(points={{-78,-30},{-78,30}}, color={0,0,0}),
                Line(points={{-44,-30},{-44,30}}, color={0,0,0}),
                Polygon(
                  points={{-78,30},{-84,10},{-72,10},{-78,30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-44,-30},{-50,-10},{-38,-10},{-44,-30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{-18,-30},{-18,-6},{18,-6},{18,-30},{18,-24}}, color=
                     {0,0,0}),
                Line(points={{78,-30},{42,30}}, color={0,0,0}),
                Line(points={{42,-30},{78,30}}, color={0,0,0}),
                Polygon(
                  points={{78,30},{72,8},{62,14},{78,30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{78,-30},{62,-14},{72,-8},{78,-30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{-18,30},{-18,60},{-40,60},{-40,80}}, color={255,0,0}),
                Line(points={{18,30},{18,60},{40,60},{40,80}}, color={255,0,0}),
                Line(points={{-18,-30},{-18,-60},{-40,-60},{-40,-82}}, color={255,
                      0,0}),
                Line(points={{18,-30},{18,-60},{40,-60},{40,-76}}, color={255,0,0}),
                Text(
                  extent={{-80,92},{80,112}},
                  lineColor={0,0,255},
                  textString="%name")}),
                      Icon(
              Line(points=[-78,-30; -78,30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[-42,-30; -42,30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Polygon(points=[-78,30; -84,10; -72,10; -78,30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Polygon(points=[-42,-30; -48,-10; -36,-10; -42,-30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Line(points=[78,-30; 42,30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[42,-30; 78,30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Polygon(points=[78,-30; 62,-14; 72,-8; 78,-30],  style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Polygon(points=[78,30; 72,8; 62,14; 78,30],  style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Line(points=[-18,-30; -18,-12], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[-18,12; -18,30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[18,12; 18,30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[-18,30; -18,60; -40,60; -40,80],  style(
                  color=1,
                  rgbcolor={255,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Line(points=[18,30; 18,60; 40,60; 40,80],  style(
                  color=1,
                  rgbcolor={255,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Line(points=[-18,-30; -18,-60; -40,-60; -40,-80],  style(
                  color=1,
                  rgbcolor={255,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Line(points=[18,-30; 18,-60; 40,-60; 40,-80],  style(
                  color=1,
                  rgbcolor={255,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Line(points=[18,-30; 18,-12],   style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[-26,-12; -10,-12], style(color=0, rgbcolor={0,0,0})),
              Line(points=[-26,12; -10,12], style(color=0, rgbcolor={0,0,0})),
              Line(points=[10,12; 26,12], style(color=0, rgbcolor={0,0,0})),
              Line(points=[10,-12; 26,-12], style(color=0, rgbcolor={0,0,0})),
              Polygon(points=[16,-12; 0,4; 10,10; 16,-12],     style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Line(points=[0,12; 0,30],     style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[0,12; 6,4; 8,2], style(color=0, rgbcolor={0,0,0})),
              Rectangle(extent=[-30,30; 30,-30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[-18,-4; -18,-30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[18,-4; 18,-30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[-18,-4; 18,-4],
                                         style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1))), Diagram);
        end V4_3OCFloat;

        model V4_3OCTandem "4-port 3-position valve with open center"
          extends
          OpenHydraulics.Components.Valves.DirectionalValves.BaseClasses.PartialValve4_3pos(
            A2T(max_contr=1, table=[-1,1; 0,0; 1,0]),
            P2A(min_contr=-1, table=[-1,0; 0,0; 1,1]),
            P2B(max_contr=1, table=[-1,1; 0,0; 1,0]),
            B2T(min_contr=-1, table=[-1,0; 0,0; 1,1]),
            j1(n_ports=4),
            j4(n_ports=4));

          // a regular 4-way 3-position valve with an open center tandem

            //components
          Basic.VariableRestriction P2T(
            D_nom=0.01,
            dp_nom=2e5,
            p_init=p_init,
            min_contr=-1,
            max_contr=1,
            table=[-1,0; 0,1; 1,0])
            annotation (
            Dialog(tab="Sizing",group="Metering"), Placement(transformation(
                  extent={{-8,-32},{8,-48}}, rotation=0)));

            //equations and connect
        equation
          connect(control, P2T.control) annotation (Line(points={{110,0},{50,0},{
                  50,-20},{0,-20},{0,-33.6}}, color={0,0,127}));
          connect(P2T.port_b, j4.port[4]) annotation (Line(points={{8,-40},{40,
                  -40},{40,-60}}, color={255,0,0}));
          connect(j1.port[4], P2T.port_a) annotation (Line(points={{-40,-60},{-40,
                  -40},{-8,-40}}, color={255,0,0}));

        annotation(Dialog(tab="Advanced"),
            Diagram(graphics),
            Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                    {100,100}}), graphics={
                Line(points={{18,30},{18,12}}, color={0,0,0}),
                Line(points={{-18,30},{-18,12}}, color={0,0,0}),
                Line(points={{-12,12},{-24,12}}, color={0,0,0}),
                Line(points={{24,12},{12,12}}, color={0,0,0}),
                Line(points={{-78,-30},{-78,30}}, color={0,0,0}),
                Line(points={{-44,-30},{-44,30}}, color={0,0,0}),
                Polygon(
                  points={{-78,30},{-84,10},{-72,10},{-78,30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-44,-30},{-50,-10},{-38,-10},{-44,-30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{-18,-30},{-18,-6},{18,-6},{18,-30},{18,-24}}, color=
                     {0,0,0}),
                Line(points={{78,-30},{42,30}}, color={0,0,0}),
                Line(points={{42,-30},{78,30}}, color={0,0,0}),
                Polygon(
                  points={{78,30},{72,8},{62,14},{78,30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{78,-30},{62,-14},{72,-8},{78,-30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{-18,30},{-18,60},{-40,60},{-40,80}}, color={255,0,0}),
                Line(points={{18,30},{18,60},{40,60},{40,80}}, color={255,0,0}),
                Line(points={{-18,-30},{-18,-60},{-40,-60},{-40,-82}}, color={255,
                      0,0}),
                Line(points={{18,-30},{18,-60},{40,-60},{40,-76}}, color={255,0,0}),
                Text(
                  extent={{-80,92},{80,112}},
                  lineColor={0,0,255},
                  textString="%name")}),
                      Icon(
              Line(points=[-78,-30; -78,30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[-42,-30; -42,30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Polygon(points=[-78,30; -84,10; -72,10; -78,30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Polygon(points=[-42,-30; -48,-10; -36,-10; -42,-30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Line(points=[78,-30; 42,30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[42,-30; 78,30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Polygon(points=[78,-30; 62,-14; 72,-8; 78,-30],  style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Polygon(points=[78,30; 72,8; 62,14; 78,30],  style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Line(points=[-18,-30; -18,-12], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[-18,12; -18,30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[18,12; 18,30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[-18,30; -18,60; -40,60; -40,80],  style(
                  color=1,
                  rgbcolor={255,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Line(points=[18,30; 18,60; 40,60; 40,80],  style(
                  color=1,
                  rgbcolor={255,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Line(points=[-18,-30; -18,-60; -40,-60; -40,-80],  style(
                  color=1,
                  rgbcolor={255,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Line(points=[18,-30; 18,-60; 40,-60; 40,-80],  style(
                  color=1,
                  rgbcolor={255,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Line(points=[18,-30; 18,-12],   style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[-26,-12; -10,-12], style(color=0, rgbcolor={0,0,0})),
              Line(points=[-26,12; -10,12], style(color=0, rgbcolor={0,0,0})),
              Line(points=[10,12; 26,12], style(color=0, rgbcolor={0,0,0})),
              Line(points=[10,-12; 26,-12], style(color=0, rgbcolor={0,0,0})),
              Polygon(points=[16,-12; 0,4; 10,10; 16,-12],     style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=0,
                  rgbfillColor={0,0,0},
                  fillPattern=1)),
              Line(points=[0,12; 0,30],     style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[0,12; 6,4; 8,2], style(color=0, rgbcolor={0,0,0})),
              Rectangle(extent=[-30,30; 30,-30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[-18,-4; -18,-30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[18,-4; 18,-30], style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1)),
              Line(points=[-18,-4; 18,-4],
                                         style(
                  color=0,
                  rgbcolor={0,0,0},
                  fillColor=7,
                  rgbfillColor={255,255,255},
                  fillPattern=1))), Diagram);
        end V4_3OCTandem;

        model V6_3CCLS

            //parameters
            // sizing parameters
          parameter SI.VolumeFlowRate q_nom = 0.001
          "Nominal flow rate at dp_nom"
            annotation(Dialog(tab="Sizing"));
          parameter SI.Pressure dp_nom = 1e6 "Nominal dp for metering curve"
            annotation(Dialog(tab="Sizing"));
          parameter Real q_fraction_P12T1 = 1 "Fraction of nominal flow rate"
            annotation(Dialog(tab="Sizing",group="Advanced Metering"));
          parameter Real q_fraction_P22A = 1 "Fraction of nominal flow rate"
            annotation(Dialog(tab="Sizing",group="Advanced Metering"));
          parameter Real q_fraction_P22T2 = 1 "Fraction of nominal flow rate"
            annotation(Dialog(tab="Sizing",group="Advanced Metering"));
          parameter Real q_fraction_P22B = 1 "Fraction of nominal flow rate"
            annotation(Dialog(tab="Sizing",group="Advanced Metering"));
          parameter Real q_fraction_A2T2 = 1 "Fraction of nominal flow rate"
            annotation(Dialog(tab="Sizing",group="Advanced Metering"));
          parameter Real q_fraction_B2T2 = 1 "Fraction of nominal flow rate"
            annotation(Dialog(tab="Sizing",group="Advanced Metering"));

            //junctions
          OpenHydraulics.Components.Lines.NJunction j1(n_ports=2)
            annotation (Placement(transformation(extent={{-90,-70},{-70,-50}},
                  rotation=0)));

          OpenHydraulics.Components.Lines.NJunction j2
            annotation (Placement(transformation(extent={{-10,-70},{10,-50}},
                  rotation=0)));

          OpenHydraulics.Components.Lines.NJunction j3
            annotation (Placement(transformation(
                origin={74,-60},
                extent={{-10,-10},{10,10}},
                rotation=180)));

          OpenHydraulics.Components.Lines.NJunction j4(n_ports=2)
            annotation (Placement(transformation(extent={{-90,58},{-70,78}},
                  rotation=0)));

          OpenHydraulics.Components.Lines.NJunction j5(n_ports=4)
            annotation (Placement(transformation(extent={{-30,30},{-10,50}},
                  rotation=0)));

          OpenHydraulics.Components.Lines.NJunction j6(n_ports=4)
            annotation (Placement(transformation(extent={{64,30},{84,50}},
                  rotation=0)));

            //components
          Basic.VariableRestriction P12T1(
            final q_nom=q_nom*q_fraction_P12T1,
            D_nom=0.01,
            dp_nom=dp_nom,
            p_init=p_init,
            min_contr=-1,
            max_contr=1,
            table=[-1,1; 0,0; 1,1])
            annotation (
            Dialog(tab="Metering",group="Spool"), Placement(transformation(
                origin={-80,0},
                extent={{-8,-8},{8,8}},
                rotation=90)));

          Basic.VariableRestriction B2T2(
            final q_nom=q_nom*q_fraction_B2T2,
            D_nom=0.01,
            dp_nom=dp_nom,
            p_init=p_init,
            min_contr=-1,
            max_contr=1,
            table=[-1,0; 0,0; 1,1])
            annotation (
           Dialog(tab="Metering",group="Spool"), Placement(transformation(
                origin={74,20},
                extent={{-8,8},{8,-8}},
                rotation=90)));

          Basic.VariableRestriction P22A(
            final q_nom=q_nom*q_fraction_P22A,
            D_nom=0.01,
            dp_nom=dp_nom,
            p_init=p_init,
            min_contr=-1,
            max_contr=1,
            table=[-1,0; 0,0; 1,1])
            annotation (
           Dialog(tab="Metering",group="Spool"), Placement(transformation(
                origin={-20,20},
                extent={{-8,8},{8,-8}},
                rotation=270)));

          Basic.VariableRestriction P22B(
            final q_nom=q_nom*q_fraction_P22A,
            D_nom=0.01,
            dp_nom=dp_nom,
            p_init=p_init,
            min_contr=-1,
            max_contr=1,
            table=[-1,1; 0,0; 1,0])
            annotation (
           Dialog(tab="Metering",group="Spool"), Placement(transformation(
                origin={0,-20},
                extent={{-8,8},{8,-8}},
                rotation=270)));

          Basic.VariableRestriction A2T2(
            final q_nom=q_nom*q_fraction_A2T2,
            D_nom=0.01,
            dp_nom=dp_nom,
            p_init=p_init,
            min_contr=-1,
            max_contr=1,
            table=[-1,1; 0,0; 1,0])
            annotation (
            Dialog(tab="Metering",group="Spool"), Placement(transformation(
                origin={60,-20},
                extent={{-8,8},{8,-8}},
                rotation=90)));

          Basic.VariableRestriction P22T2(
            final q_nom=q_nom*q_fraction_P22T2,
            D_nom=1e-6,
            dp_nom=dp_nom,
            p_init=p_init,
            table=[-1,0; 0,1; 1,0],
            min_contr=-1,
            max_contr=1)
            annotation (
            Dialog(tab="Metering",group="Spool"), Placement(transformation(extent=
                   {{22,32},{38,48}}, rotation=0)));

        extends
          OpenHydraulics.Components.Valves.DirectionalValves.BaseClasses.PartialV6_3LS;

          OpenHydraulics.Basic.VarPressureSource varPressureSource
              annotation (Placement(transformation(
                  extent={{10,50},{30,70}}, rotation=0)));

         //equations and connect
        equation
           varPressureSource.control=portP2.p;

          connect(P12T1.port_b, j4.port[2])   annotation (Line(points={{-80,8},{
                  -80,68.5}}, color={255,0,0}));
          connect(portP1, j1.port[1]) annotation (Line(points={{-80,-80},{-80,
                  -60.5}}, color={255,0,0}));
          connect(j1.port[2], P12T1.port_a)   annotation (Line(points={{-80,-59.5},
                  {-80,-8}}, color={255,0,0}));
          connect(j4.port[1], portT1) annotation (Line(points={{-80,67.5},{-80,80}},
                color={255,0,0}));
          connect(portT2, j6.port[1]) annotation (Line(points={{80,80},{80,40},{
                  74,40},{74,39.25}}, color={255,0,0}));
          connect(portB, j3.port[1]) annotation (Line(points={{80,-80},{80,-60},
                  {74,-60},{74,-59.3333}},color={255,0,0}));
          connect(portA, j2.port[1]) annotation (Line(points={{0,-80},{0,-60.6667}},
                color={255,0,0}));
          connect(P22A.port_b, j2.port[2])   annotation (Line(points={{-20,12},{
                  -20,-60},{0,-60}}, color={255,0,0}));
          connect(P22B.port_b, j3.port[2])   annotation (Line(points={{-1.46958e-015,
                  -28},{0,-28},{0,-40},{20,-40},{60,-60},{74,-60}},
                color={255,0,0}));
          connect(j3.port[3], B2T2.port_a)   annotation (Line(points={{74,-60.6667},
                  {74,12}},           color={255,0,0}));
          connect(B2T2.port_b, j6.port[2])   annotation (Line(points={{74,28},{74,
                  39.75}}, color={255,0,0}));
          connect(j2.port[3], A2T2.port_a)   annotation (Line(points={{0,-59.3333},
                  {0,-60},{40,-40},{60,-40},{60,-28}}, color={255,0,0}));
          connect(A2T2.port_b, j6.port[3])   annotation (Line(points={{60,-12},{
                  60,40},{74,40},{74,40.25}}, color={255,0,0}));
          connect(P22T2.port_b, j6.port[4])   annotation (Line(points={{38,40},{
                  74,40},{74,40.75}}, color={255,0,0}));
          connect(P22B.port_a, j5.port[1])   annotation (Line(points={{1.46958e-015,
                  -12},{0,14},{0,40},{-20,40},{-20,39.25}},               color={
                  255,0,0}));
          connect(P22A.port_a, j5.port[2])   annotation (Line(points={{-20,28},{
                  -20,39.75}}, color={255,0,0}));
          connect(j5.port[3], portP2) annotation (Line(points={{-20,40.25},{-20,
                  80},{-20,80}}, color={255,0,0}));
          connect(dynamicResponse.y, P22T2.control) annotation (Line(points={{79,
                  -30},{30,-30},{30,33.6}}, color={0,0,127}));
          connect(dynamicResponse.y, P22B.control)   annotation (Line(points={{79,
                  -30},{30,-30},{30,-20},{6.4,-20}}, color={0,0,127}));
          connect(dynamicResponse.y, A2T2.control)   annotation (Line(points={{79,
                  -30},{30,-30},{30,-20},{53.6,-20}}, color={0,0,127}));
          connect(dynamicResponse.y, P12T1.control)   annotation (Line(points={{79,-30},
                  {30,-30},{30,-3.91887e-016},{-73.6,-3.91887e-016}},
                color={0,0,127}));
          connect(dynamicResponse.y, P22A.control)   annotation (Line(points={{79,
                  -30},{30,-30},{30,20},{-13.6,20}}, color={0,0,127}));
          connect(dynamicResponse.y, B2T2.control)   annotation (Line(points={{79,
                  -30},{30,-30},{30,20},{67.6,20}}, color={0,0,127}));
          connect(P22T2.port_a, j5.port[4]) annotation (Line(points={{22,40},{-20,
                  40},{-20,40.75}}, color={255,0,0}));
          connect(varPressureSource.port, portLS) annotation (Line(points={{20,70},
                  {20,80}}, color={255,0,0}));
          annotation (Diagram(graphics),
                               Icon(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics={
                Line(points={{-20,-30},{-20,-16}}, color={0,0,0}),
                Line(points={{0,-30},{0,-16}}, color={0,0,0}),
                Line(points={{20,-30},{20,-16}}, color={0,0,0}),
                Line(points={{20,16},{20,30}}, color={0,0,0}),
                Line(points={{-20,16},{-20,30}}, color={0,0,0}),
                Line(points={{-8,16},{-8,30}}, color={0,0,0}),
                Line(points={{8,16},{8,30}}, color={0,0,0}),
                Line(points={{-8,16},{20,16}}, color={0,0,0}),
                Line(points={{-24,16},{-16,16}}, color={0,0,0}),
                Line(points={{-24,-16},{-16,-16}}, color={0,0,0}),
                Line(points={{-4,-16},{4,-16}}, color={0,0,0}),
                Line(points={{16,-16},{24,-16}}, color={0,0,0}),
                Line(points={{-80,-30},{-80,30}}, color={0,0,0}),
                Line(points={{-70,30},{-60,-30}}, color={0,0,0}),
                Line(points={{-40,-30},{-40,30}}, color={0,0,0}),
                Line(points={{-54,30},{-54,16},{-68,16}}, color={0,0,0}),
                Polygon(
                  points={{-80,30},{-84,18},{-76,18},{-80,30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-66,-16},{-58,-14},{-60,-30},{-66,-16}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-44,-18},{-36,-18},{-40,-30},{-44,-18}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{40,-30},{40,30}}, color={0,0,0}),
                Polygon(
                  points={{40,30},{36,18},{44,18},{40,30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{80,30},{60,-30}}, color={0,0,0}),
                Line(points={{50,30},{80,-30}}, color={0,0,0}),
                Polygon(
                  points={{70,-20},{78,-16},{80,-30},{70,-20}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{72,18},{80,30},{80,16},{72,18}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{66,30},{66,14},{58,14}}, color={0,0,0}),
                Text(
                  extent={{-80,92},{80,112}},
                  lineColor={0,0,255},
                  textString="%name")}));
        end V6_3CCLS;

        model V6_3OC
          extends
          OpenHydraulics.Components.Valves.DirectionalValves.BaseClasses.PartialV6_3;
          annotation (Diagram(graphics),
                               Icon(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics={
                Line(points={{-80,-30},{-80,30}}, color={0,0,0}),
                Line(points={{0,-30},{0,30}}, color={0,0,0}),
                Line(points={{-40,-30},{-40,30}}, color={0,0,0}),
                Line(points={{-60,-30},{-60,-18}}, color={0,0,0}),
                Line(points={{-66,-18},{-54,-18}}, color={0,0,0}),
                Line(points={{-20,-30},{-20,-18}}, color={0,0,0}),
                Line(points={{-60,18},{-60,30}}, color={0,0,0}),
                Line(points={{-20,18},{-20,30}}, color={0,0,0}),
                Line(points={{20,18},{20,30}}, color={0,0,0}),
                Line(points={{20,-30},{20,-18}}, color={0,0,0}),
                Line(points={{60,-30},{60,-18}}, color={0,0,0}),
                Line(points={{60,18},{60,30}}, color={0,0,0}),
                Line(points={{-66,18},{-54,18}}, color={0,0,0}),
                Line(points={{-26,18},{-14,18}}, color={0,0,0}),
                Line(points={{-26,-18},{-14,-18}}, color={0,0,0}),
                Line(points={{14,18},{26,18}}, color={0,0,0}),
                Line(points={{14,-18},{26,-18}}, color={0,0,0}),
                Line(points={{54,18},{66,18}}, color={0,0,0}),
                Line(points={{54,-18},{66,-18}}, color={0,0,0}),
                Line(points={{40,30},{80,-30}}, color={0,0,0}),
                Line(points={{80,30},{40,-30}}, color={0,0,0}),
                Polygon(
                  points={{-80,30},{-86,10},{-74,10},{-80,30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{0,30},{-6,10},{6,10},{0,30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-34,-10},{-46,-10},{-40,-30},{-34,-10}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{76,-14},{68,-20},{80,-30},{76,-14}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{80,30},{68,20},{76,14},{80,30}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{-80,92},{80,112}},
                  lineColor={0,0,255},
                  textString="%name")}));

        end V6_3OC;

        model SV6_3OCParallel "Sectional valve "
          extends OpenHydraulics.Interfaces.PartialFluidComponent;

            //parameters
          parameter Integer sizeOfInputs=1 "Size of input array";
          parameter Integer inputIndex=1 "Index of command for this valve";
          parameter Real q_nom=0.001 "Nominal Flow through Valve";

            //ports
          OpenHydraulics.Interfaces.FluidPort P1_in
            annotation (Placement(transformation(extent={{-100,30},{-80,50}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort P2_in
            annotation (Placement(transformation(extent={{-100,-10},{-80,10}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort T2_out
            annotation (Placement(transformation(extent={{-100,-70},{-80,-50}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort P1_out
            annotation (Placement(transformation(extent={{80,30},{100,50}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort P2_out
            annotation (Placement(transformation(extent={{80,-10},{100,10}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort T2_in
            annotation (Placement(transformation(extent={{80,-70},{100,-50}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort A
            annotation (Placement(transformation(extent={{-50,80},{-30,100}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort B
            annotation (Placement(transformation(extent={{30,80},{50,100}},
                  rotation=0)));
          Modelica.Blocks.Interfaces.RealInput u[sizeOfInputs]
            annotation (Placement(transformation(extent={{-44,-100},{-26,-80}},
                  rotation=0)));
          Modelica.Blocks.Interfaces.RealOutput y[sizeOfInputs]
            annotation (Placement(transformation(extent={{20,-100},{40,-80}},
                  rotation=0)));

            //junctions
          OpenHydraulics.Components.Lines.NJunction j1
            annotation (Placement(transformation(
                origin={-60,40},
                extent={{-10,-10},{10,10}},
                rotation=90)));

          OpenHydraulics.Components.Lines.NJunction j2(n_ports=5)
            annotation (Placement(transformation(
                origin={0,-60},
                extent={{-10,-10},{10,10}},
                rotation=180)));

          OpenHydraulics.Components.Lines.NJunction j3
            annotation (Placement(transformation(extent={{30,50},{50,70}},
                  rotation=0)));

          OpenHydraulics.Components.Lines.NJunction j4
            annotation (Placement(transformation(extent={{-50,50},{-30,70}},
                  rotation=0)));

            //components
          OpenHydraulics.Components.Valves.DirectionalValves.V6_3OC v6_3OC(j1(V=1e-5))
            annotation (Placement(transformation(
                origin={-44,0},
                extent={{-20,-20},{20,20}},
                rotation=270)));

          OpenHydraulics.Components.Valves.Anticavitation_ReliefValve CheckA(
              reliefValve(dp_relief=25e6, dp_open=30e6))
                                 annotation (Placement(transformation(extent={{
                    -34,50},{-14,70}}, rotation=0)));

          OpenHydraulics.Components.Valves.Anticavitation_ReliefValve CheckB(
              reliefValve(dp_relief=15e6, dp_open=30e6))
                                 annotation (Placement(transformation(extent={{34,
                    50},{14,70}}, rotation=0)));

            //equations and connections
        equation
          connect(j1.port[3], P1_out) annotation (Line(points={{-60.6667,40},{90,
                  40}}, color={255,0,0}));
          connect(v6_3OC.portT1, P2_out)          annotation (Line(points={{-28,
                  -2.93906e-015},{90,-2.93906e-015},{90,0}}, color={255,0,0}));
          connect(j4.port[1], A) annotation (Line(points={{-40,59.3333},{-40,90}},
                color={255,0,0}));
          connect(j3.port[1],B)  annotation (Line(points={{40,59.3333},{40,90}},
                color={255,0,0}));
          connect(u, y)
            annotation (Line(points={{-35,-90},{30,-90}}, color={0,0,127}));
          connect(u[inputIndex], v6_3OC.control)          annotation (Line(points=
                 {{-35,-90},{-44,-90},{-44,-21.2}}, color={0,0,127}));
          connect(v6_3OC.portA,j4. port[2])          annotation (Line(points={{
                  -28,16},{-28,22},{-40,22},{-40,60}}, color={255,0,0}));
          connect(v6_3OC.portB,j3. port[2])          annotation (Line(points={{
                  -28,-16},{40,-16},{40,60}}, color={255,0,0}));
          connect(j1.port[1], P1_in) annotation (Line(points={{-59.3333,40},{-82,
                  40},{-82,40},{-90,40}}, color={255,0,0}));
          connect(CheckA.port_a,j4. port[3])        annotation (Line(points={{-32,
                  60},{-40,60},{-40,60.6667}}, color={255,0,0}));
          connect(P2_in, v6_3OC.portP)          annotation (Line(points={{-90,0},
                  {-60,0},{-60,2.93906e-015}}, color={255,0,0}));
          connect(j1.port[2], v6_3OC.portP1)          annotation (Line(points={{
                  -60,40},{-60,16}}, color={255,0,0}));
          connect(T2_out,j2. port[1]) annotation (Line(points={{-90,-60},{
                  1.66533e-016,-60},{1.66533e-016,-59.2}}, color={255,0,0}));
          connect(v6_3OC.portT2,j2. port[2])          annotation (Line(points={{
                  -60,-16},{-60,-60},{0,-60},{0,-59.6}}, color={255,0,0}));
          connect(CheckB.port_b,j2. port[4]) annotation (Line(points={{16,60},{0,
                  60},{0,-60.4}}, color={255,0,0}));
          connect(T2_in,j2. port[5]) annotation (Line(points={{90,-60},{
                  -1.66533e-016,-60},{-1.66533e-016,-60.8}}, color={255,0,0}));
          connect(CheckA.port_b,j2. port[3]) annotation (Line(points={{-16,60},{0,
                  60},{0,-60}}, color={255,0,0}));
          connect(CheckB.port_a,j3. port[3]) annotation (Line(points={{32,60},{40,
                  60},{40,60.6667}}, color={255,0,0}));
        annotation (Diagram(graphics={Rectangle(
                  extent={{-80,80},{80,-80}},
                  lineColor={0,0,0},
                  pattern=LinePattern.DashDot)}),
                                Icon(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics={
                Text(
                  extent={{50,96},{68,74}},
                  lineColor={0,0,0},
                  textString="B"),
                Text(
                  extent={{-68,96},{-48,74}},
                  lineColor={0,0,0},
                  textString="A"),
                Text(
                  extent={{72,50},{118,-16}},
                  lineColor={0,0,0},
                  textString="P2out"),
                Text(
                  extent={{72,-24},{106,-62}},
                  lineColor={0,0,0},
                  textString="T2in"),
                Text(
                  extent={{-114,76},{-78,38}},
                  lineColor={0,0,0},
                  textString="P1in"),
                Text(
                  extent={{-114,30},{-76,8}},
                  lineColor={0,0,0},
                  textString="P2in"),
                Text(
                  extent={{-120,-22},{-76,-56}},
                  lineColor={0,0,0},
                  textString="T2out"),
                Text(
                  extent={{72,76},{118,36}},
                  lineColor={0,0,0},
                  textString="P1out"),
                Polygon(
                  points={{-2,-70},{90,-70},{90,-50},{68,-50},{68,-10},{90,-10},{
                      90,10},{68,10},{68,30},{90,30},{90,50},{50,50},{50,92},{30,
                      92},{30,72},{-30,72},{-30,90},{-50,90},{-50,50},{-90,50},{-90,
                      30},{-70,30},{-70,10},{-90,10},{-90,-10},{-70,-10},{-70,-50},
                      {-90,-50},{-90,-70},{-2,-70}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={215,215,215},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-44,-66},{40,-100}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={215,215,215},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-44,-100},{40,-100},{40,-70}},
                  color={0,0,0},
                  thickness=0.5),
                Line(points={{-80,40},{80,40}}, color={0,0,0}),
                Rectangle(
                  extent={{-36,38},{0,-46}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-36,10},{0,10},{0,-18},{-36,-18}},
                  color={0,0,0},
                  thickness=0.5),
                Line(points={{-36,-20},{0,-40}}, color={0,0,0}),
                Line(points={{0,-20},{-36,-40}}, color={0,0,0}),
                Line(points={{-36,-30},{-32,-30}}, color={0,0,0}),
                Line(points={{0,-30},{-4,-30}}, color={0,0,0}),
                Line(points={{-4,-26},{-4,-34}}, color={0,0,0}),
                Line(points={{-32,-26},{-32,-34}}, color={0,0,0}),
                Line(points={{-36,26},{-32,26}}, color={0,0,0}),
                Line(points={{-32,30},{-32,22}}, color={0,0,0}),
                Line(points={{-4,30},{-4,22}}, color={0,0,0}),
                Line(points={{0,26},{-4,26}}, color={0,0,0}),
                Line(points={{-36,-12},{-32,-12}}, color={0,0,0}),
                Line(points={{-32,-8},{-32,-16}}, color={0,0,0}),
                Line(points={{-4,-8},{-4,-16}}, color={0,0,0}),
                Line(points={{0,-12},{-4,-12}}, color={0,0,0}),
                Line(points={{-36,4},{-32,4}}, color={0,0,0}),
                Line(points={{-32,8},{-32,0}}, color={0,0,0}),
                Line(points={{-4,0},{-4,8}}, color={0,0,0}),
                Line(points={{0,4},{-4,4}}, color={0,0,0}),
                Line(
                  points={{-44,-80},{-44,-70}},
                  color={0,0,0},
                  thickness=0.5),
                Line(points={{-36,16},{0,16}}, color={0,0,0}),
                Line(points={{-36,34},{0,34}}, color={0,0,0}),
                Line(points={{-36,-4},{0,-4}}, color={0,0,0}),
                Polygon(
                  points={{0,16},{-4,18},{-4,14},{0,16}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{0,-4},{-4,-2},{-4,-6},{0,-4}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-32,32},{-36,34},{-32,36},{-32,32}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{0,-40},{-6,-38},{-4,-36},{0,-40}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-32,-36},{-30,-38},{-36,-40},{-32,-36}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{-80,-60},{80,-60}}, color={0,0,0}),
                Line(points={{-92,0},{-58,0},{-58,-4},{-36,-4}}, color={0,0,0}),
                Line(points={{0,-4},{54,-4},{54,0},{80,0}}, color={0,0,0}),
                Rectangle(
                  extent={{-22,-46},{-14,-50}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-22,-50},{-18,-46},{-14,-50},{-22,-50}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-26,-90},{-18,-90},{18,-90},{20,-90}},
                  color={0,0,0},
                  thickness=0.5),
                Line(
                  points={{-18,-50},{-18,-90}},
                  color={0,0,0},
                  thickness=0.5),
                Line(points={{-52,40},{-52,4},{-36,4}}, color={0,0,0}),
                Line(points={{24,58},{24,-20},{0,-20}}, color={0,0,0}),
                Line(points={{40,80},{40,58},{24,58},{24,58}}, color={0,0,0}),
                Line(points={{-40,80},{-40,58},{6,58},{6,4},{0,4}}, color={0,0,0}),
                Line(points={{-36,-12},{-52,-12},{-52,-60}}, color={0,0,0}),
                Text(
                  extent={{-120,-96},{120,-120}},
                  lineColor={0,0,255},
                  textString="%name")}),
            experiment(StopTime=10, Tolerance=1e-006),
            experimentSetupOutput);
        end SV6_3OCParallel;

        model SV6_3OCSeries "Sectional valve "
           extends OpenHydraulics.Interfaces.PartialFluidComponent;
            // parameters
          parameter Integer sizeOfInputs=1 "Size of input array";
          parameter Integer inputIndex=1 "Index of command for this valve";

            //ports
          OpenHydraulics.Interfaces.FluidPort P1_in
            annotation (Placement(transformation(extent={{-100,30},{-80,50}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort P2_in
            annotation (Placement(transformation(extent={{-100,-10},{-80,10}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort T2_out
            annotation (Placement(transformation(extent={{-100,-70},{-80,-50}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort P1_out
            annotation (Placement(transformation(extent={{80,30},{100,50}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort P2_out
            annotation (Placement(transformation(extent={{80,-10},{100,10}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort T2_in
            annotation (Placement(transformation(extent={{80,-70},{100,-50}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort A
            annotation (Placement(transformation(extent={{-50,80},{-30,100}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort B
            annotation (Placement(transformation(extent={{30,80},{50,100}},
                  rotation=0)));
          Modelica.Blocks.Interfaces.RealInput u[sizeOfInputs]
            annotation (Placement(transformation(extent={{-44,-100},{-26,-80}},
                  rotation=0)));
          Modelica.Blocks.Interfaces.RealOutput y[sizeOfInputs]
            annotation (Placement(transformation(extent={{20,-100},{40,-80}},
                  rotation=0)));

            //junctions
          OpenHydraulics.Components.Lines.NJunction j1(n_ports=4)
            annotation (Placement(transformation(
                origin={12,-60},
                extent={{-10,-10},{10,10}},
                rotation=90)));

          OpenHydraulics.Components.Lines.NJunction j2(n_ports=4)
            annotation (Placement(transformation(extent={{52,-10},{72,10}},
                  rotation=0)));

          OpenHydraulics.Components.Lines.NJunction j3
            annotation (Placement(transformation(extent={{30,50},{50,70}},
                  rotation=0)));

          OpenHydraulics.Components.Lines.NJunction j4
            annotation (Placement(transformation(extent={{-50,50},{-30,70}},
                  rotation=0)));

            //components
          OpenHydraulics.Components.Valves.DirectionalValves.V6_3OC v6_3OC
            annotation (Placement(transformation(
                origin={-14,0},
                extent={{-20,-20},{20,20}},
                rotation=270)));

          OpenHydraulics.Components.Valves.Anticavitation_ReliefValve AnticavRelief
            annotation (Placement(transformation(extent={{-32,50},{-12,70}},
                  rotation=0)));
          OpenHydraulics.Components.Valves.Anticavitation_ReliefValve AnticavRelief2
            annotation (Placement(transformation(extent={{36,50},{16,70}},
                  rotation=0)));

            //equations and connect
        equation
          connect(j4.port[1], A) annotation (Line(points={{-40,59.3333},{-40,90}},
                color={255,0,0}));
          connect(j3.port[1],B)  annotation (Line(points={{40,59.3333},{40,90},{
                  40,90}}, color={255,0,0}));
          connect(u, y)
            annotation (Line(points={{-35,-90},{30,-90}}, color={0,0,127}));
          connect(u[inputIndex], v6_3OC.control)          annotation (Line(points=
                 {{-35,-90},{-14,-90},{-14,-21.2}}, color={0,0,127}));
          connect(v6_3OC.portA,j4. port[2])          annotation (Line(points={{2,
                  16},{2,40},{-40,40},{-40,60}}, color={255,0,0}));
          connect(v6_3OC.portB,j3. port[2])          annotation (Line(points={{2,
                  -16},{40,-16},{40,60}}, color={255,0,0}));
          connect(AnticavRelief.port_a,j4. port[3]) annotation (Line(points={{-30,
                  60},{-40,60},{-40,60.6667}}, color={255,0,0}));
          connect(AnticavRelief2.port_a,j3. port[3]) annotation (Line(points={{34,
                  60},{38,60},{38,60.6667},{40,60.6667}}, color={255,0,0}));
          connect(j1.port[1], T2_out) annotation (Line(points={{12.75,-60},{-90,
                  -60}}, color={255,0,0}));
          connect(v6_3OC.portT1, j2.port[2])          annotation (Line(points={{2,
                  -2.93906e-015},{62,-2.93906e-015},{62,-0.25}}, color={255,0,0}));
          connect(P1_out, j2.port[3]) annotation (Line(points={{90,40},{62,40},{
                  62,0.25}}, color={255,0,0}));
          connect(j2.port[4], P2_out) annotation (Line(points={{62,0.75},{62,0},{
                  90,0}}, color={255,0,0}));
          connect(P2_in, v6_3OC.portP)          annotation (Line(points={{-90,0},
                  {-47.7,0},{-47.7,2.93906e-015},{-30,2.93906e-015}}, color={255,
                  0,0}));
          connect(P1_in, v6_3OC.portP1)          annotation (Line(points={{-90,40},
                  {-56,40},{-56,16},{-30,16}}, color={255,0,0}));
          connect(v6_3OC.portT2, j2.port[1])          annotation (Line(points={{
                  -30,-16},{-30,-38},{62,-38},{62,-0.75}}, color={255,0,0}));
          connect(AnticavRelief.port_b,j1. port[2]) annotation (Line(points={{-14,
                  60},{12,60},{12,-60},{12.25,-60}}, color={255,0,0}));
          connect(AnticavRelief2.port_b,j1. port[3]) annotation (Line(points={{18,
                  60},{12,60},{12,-60},{11.75,-60}}, color={255,0,0}));
          connect(j1.port[4], T2_in) annotation (Line(points={{11.25,-60},{90,-60}},
                color={255,0,0}));
        annotation (Diagram(graphics={Rectangle(
                  extent={{-80,80},{80,-80}},
                  lineColor={0,0,0},
                  pattern=LinePattern.DashDot)}),
                                Icon(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics={
                Text(
                  extent={{50,96},{68,74}},
                  lineColor={0,0,0},
                  textString="B"),
                Text(
                  extent={{-68,96},{-48,74}},
                  lineColor={0,0,0},
                  textString="A"),
                Text(
                  extent={{72,50},{118,-16}},
                  lineColor={0,0,0},
                  textString="P2out"),
                Text(
                  extent={{72,-24},{106,-62}},
                  lineColor={0,0,0},
                  textString="T2in"),
                Text(
                  extent={{-114,76},{-78,38}},
                  lineColor={0,0,0},
                  textString="P1in"),
                Text(
                  extent={{-114,30},{-76,8}},
                  lineColor={0,0,0},
                  textString="P2in"),
                Text(
                  extent={{-120,-22},{-76,-56}},
                  lineColor={0,0,0},
                  textString="T2out"),
                Text(
                  extent={{72,76},{118,36}},
                  lineColor={0,0,0},
                  textString="P1out"),
                Polygon(
                  points={{-2,-70},{90,-70},{90,-50},{68,-50},{68,-10},{90,-10},{
                      90,10},{68,10},{68,30},{90,30},{90,50},{50,50},{50,92},{30,
                      92},{30,72},{-30,72},{-30,90},{-50,90},{-50,50},{-90,50},{-90,
                      30},{-70,30},{-70,10},{-90,10},{-90,-10},{-70,-10},{-70,-50},
                      {-90,-50},{-90,-70},{-2,-70}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={215,215,215},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-44,-66},{40,-100}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={215,215,215},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-44,-100},{40,-100},{40,-70}},
                  color={0,0,0},
                  thickness=0.5),
                Line(points={{-80,40},{80,40}}, color={0,0,0}),
                Rectangle(
                  extent={{-36,38},{0,-46}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-36,10},{0,10},{0,-18},{-36,-18}},
                  color={0,0,0},
                  thickness=0.5),
                Line(points={{-36,-20},{0,-40}}, color={0,0,0}),
                Line(points={{0,-20},{-36,-40}}, color={0,0,0}),
                Line(points={{-36,-30},{-32,-30}}, color={0,0,0}),
                Line(points={{0,-30},{-4,-30}}, color={0,0,0}),
                Line(points={{-4,-26},{-4,-34}}, color={0,0,0}),
                Line(points={{-32,-26},{-32,-34}}, color={0,0,0}),
                Line(points={{-36,26},{-32,26}}, color={0,0,0}),
                Line(points={{-32,30},{-32,22}}, color={0,0,0}),
                Line(points={{-4,30},{-4,22}}, color={0,0,0}),
                Line(points={{0,26},{-4,26}}, color={0,0,0}),
                Line(points={{-36,-12},{-32,-12}}, color={0,0,0}),
                Line(points={{-32,-8},{-32,-16}}, color={0,0,0}),
                Line(points={{-4,-8},{-4,-16}}, color={0,0,0}),
                Line(points={{0,-12},{-4,-12}}, color={0,0,0}),
                Line(points={{-36,4},{-32,4}}, color={0,0,0}),
                Line(points={{-32,8},{-32,0}}, color={0,0,0}),
                Line(points={{-4,0},{-4,8}}, color={0,0,0}),
                Line(points={{0,4},{-4,4}}, color={0,0,0}),
                Line(
                  points={{-44,-80},{-44,-70}},
                  color={0,0,0},
                  thickness=0.5),
                Line(points={{-36,16},{0,16}}, color={0,0,0}),
                Line(points={{-36,34},{0,34}}, color={0,0,0}),
                Line(points={{-36,-4},{0,-4}}, color={0,0,0}),
                Polygon(
                  points={{0,16},{-4,18},{-4,14},{0,16}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{0,-4},{-4,-2},{-4,-6},{0,-4}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-32,32},{-36,34},{-32,36},{-32,32}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{0,-40},{-6,-38},{-4,-36},{0,-40}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-32,-36},{-30,-38},{-36,-40},{-32,-36}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{-80,-60},{80,-60}}, color={0,0,0}),
                Line(points={{-92,0},{-58,0},{-58,-4},{-36,-4}}, color={0,0,0}),
                Line(points={{0,-4},{54,-4},{54,0},{80,0}}, color={0,0,0}),
                Rectangle(
                  extent={{-22,-46},{-14,-50}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-22,-50},{-18,-46},{-14,-50},{-22,-50}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-28,-90},{-18,-90},{18,-90},{20,-90}},
                  color={0,0,0},
                  thickness=0.5),
                Line(
                  points={{-18,-50},{-18,-90}},
                  color={0,0,0},
                  thickness=0.5),
                Line(points={{-52,40},{-52,4},{-36,4}}, color={0,0,0}),
                Line(points={{24,58},{24,-20},{0,-20}}, color={0,0,0}),
                Line(points={{40,80},{40,58},{24,58},{24,58}}, color={0,0,0}),
                Line(points={{-40,80},{-40,58},{6,58},{6,4},{0,4}}, color={0,0,0}),
                Line(points={{-36,-12},{-52,-12},{-52,-56}}, color={0,0,0}),
                Line(points={{-52,-56},{54,-56},{54,-4},{54,40}}, color={0,0,0})}),
            experiment(StopTime=10, Tolerance=1e-006),
            experimentSetupOutput);
        end SV6_3OCSeries;

        model SV6_3OCTandem "Sectional valve "
          extends OpenHydraulics.Interfaces.PartialFluidComponent;

            //parameters
          parameter Integer sizeOfInputs=1 "Size of input array";
          parameter Integer inputIndex=1 "Index of command for this valve";

            //ports
          OpenHydraulics.Interfaces.FluidPort P1_in
            annotation (Placement(transformation(extent={{-100,30},{-80,50}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort P2_in
            annotation (Placement(transformation(extent={{-100,-10},{-80,10}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort T2_out
            annotation (Placement(transformation(extent={{-100,-70},{-80,-50}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort P1_out
            annotation (Placement(transformation(extent={{80,30},{100,50}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort P2_out
            annotation (Placement(transformation(extent={{80,-10},{100,10}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort T2_in
            annotation (Placement(transformation(extent={{80,-70},{100,-50}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort A
            annotation (Placement(transformation(extent={{-50,80},{-30,100}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort B
            annotation (Placement(transformation(extent={{30,80},{50,100}},
                  rotation=0)));
          Modelica.Blocks.Interfaces.RealInput u[sizeOfInputs]
            annotation (Placement(transformation(extent={{-44,-100},{-26,-80}},
                  rotation=0)));
          Modelica.Blocks.Interfaces.RealOutput y[sizeOfInputs]
            annotation (Placement(transformation(extent={{20,-100},{40,-80}},
                  rotation=0)));

            //junctions
          OpenHydraulics.Components.Lines.NJunction j1
            annotation (Placement(transformation(extent={{52,-10},{72,10}},
                  rotation=0)));

          OpenHydraulics.Components.Lines.NJunction j2(n_ports=5)
            annotation (Placement(transformation(
                origin={0,-60},
                extent={{-10,-10},{10,10}},
                rotation=180)));

          OpenHydraulics.Components.Lines.NJunction j3
            annotation (Placement(transformation(
                origin={40,60},
                extent={{-10,-10},{10,10}},
                rotation=90)));

          OpenHydraulics.Components.Lines.NJunction j4
            annotation (Placement(transformation(
                origin={-40,60},
                extent={{-10,-10},{10,10}},
                rotation=90)));

            //components
          OpenHydraulics.Components.Valves.DirectionalValves.V6_3OC v6_3OC
            annotation (Placement(transformation(
                origin={-40,0},
                extent={{-20,-20},{20,20}},
                rotation=270)));

          OpenHydraulics.Components.Valves.Anticavitation_ReliefValve AnticavRelief
            annotation (Placement(transformation(extent={{-30,50},{-10,70}},
                  rotation=0)));

          OpenHydraulics.Components.Valves.Anticavitation_ReliefValve AnticavRelief2
            annotation (Placement(transformation(extent={{30,50},{10,70}},
                  rotation=0)));

            //equation and connect
        equation
          connect(j4.port[1], A) annotation (Line(points={{-39.3333,60},{-40,60},
                  {-40,90}}, color={255,0,0}));
          connect(j3.port[1],B)  annotation (Line(points={{40.6667,60},{40,60},{
                  40,90}}, color={255,0,0}));
          connect(u, y)
            annotation (Line(points={{-35,-90},{30,-90}}, color={0,0,127}));
          connect(u[inputIndex], v6_3OC.control)          annotation (Line(points=
                 {{-35,-90},{-8,-90},{-8,-54},{-40,-54},{-40,-21.2}}, color={0,0,
                  127}));
          connect(v6_3OC.portA,j4. port[2])          annotation (Line(points={{
                  -24,16},{-24,40},{-40,40},{-40,60}}, color={255,0,0}));
          connect(v6_3OC.portB,j3. port[2])          annotation (Line(points={{
                  -24,-16},{40,-16},{40,60}}, color={255,0,0}));
          connect(AnticavRelief.port_a,j4. port[3]) annotation (Line(points={{-28,
                  60},{-40.6667,60}}, color={255,0,0}));
          connect(AnticavRelief2.port_a,j3. port[3]) annotation (Line(points={{28,
                  60},{39.3333,60}}, color={255,0,0}));
          connect(v6_3OC.portT1,j1. port[2])          annotation (Line(points={{
                  -24,-2.93906e-015},{35.7,-2.93906e-015},{35.7,5.55112e-017},{62,
                  5.55112e-017}}, color={255,0,0}));
          connect(P1_out,j1. port[3]) annotation (Line(points={{90,40},{62,40},{
                  62,0.666667}}, color={255,0,0}));
          connect(P2_out,j1. port[1]) annotation (Line(points={{90,0},{62,0},{62,
                  -0.666667}}, color={255,0,0}));
          connect(P2_in, v6_3OC.portP)          annotation (Line(points={{-90,0},
                  {-47.7,0},{-47.7,2.93906e-015},{-56,2.93906e-015}}, color={255,
                  0,0}));
          connect(P1_in, v6_3OC.portP1)          annotation (Line(points={{-90,40},
                  {-56,40},{-56,16}}, color={255,0,0}));
          connect(T2_out,j2. port[1]) annotation (Line(points={{-90,-60},{
                  1.66533e-016,-60},{1.66533e-016,-59.2}}, color={255,0,0}));
          connect(v6_3OC.portT2,j2. port[2])          annotation (Line(points={{
                  -56,-16},{-56,-60},{0,-60},{0,-59.6}}, color={255,0,0}));
          connect(AnticavRelief.port_b,j2. port[3]) annotation (Line(points={{-12,
                  60},{0,60},{0,-60}}, color={255,0,0}));
          connect(AnticavRelief2.port_b,j2. port[4]) annotation (Line(points={{12,
                  60},{0,60},{0,-60.4}}, color={255,0,0}));
          connect(j2.port[5], T2_in) annotation (Line(points={{-1.66533e-016,
                  -60.8},{0,-60.8},{0,-60},{90,-60}}, color={255,0,0}));
          annotation (Diagram(graphics={Rectangle(
                  extent={{-80,80},{80,-80}},
                  lineColor={0,0,0},
                  pattern=LinePattern.DashDot)}),
                                Icon(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics={
                Text(
                  extent={{-110,-110},{90,-136}},
                  lineColor={0,0,255},
                  lineThickness=0.5,
                  textString="%name"),
                Text(
                  extent={{50,96},{68,74}},
                  lineColor={0,0,0},
                  textString="B"),
                Text(
                  extent={{-68,96},{-48,74}},
                  lineColor={0,0,0},
                  textString="A"),
                Text(
                  extent={{72,50},{118,-16}},
                  lineColor={0,0,0},
                  textString="P2out"),
                Text(
                  extent={{72,-24},{106,-62}},
                  lineColor={0,0,0},
                  textString="T2in"),
                Text(
                  extent={{-114,76},{-78,38}},
                  lineColor={0,0,0},
                  textString="P1in"),
                Text(
                  extent={{-114,30},{-76,8}},
                  lineColor={0,0,0},
                  textString="P2in"),
                Text(
                  extent={{-120,-22},{-76,-56}},
                  lineColor={0,0,0},
                  textString="T2out"),
                Text(
                  extent={{72,76},{118,36}},
                  lineColor={0,0,0},
                  textString="P1out"),
                Polygon(
                  points={{-2,-70},{90,-70},{90,-50},{68,-50},{68,-10},{90,-10},{
                      90,10},{68,10},{68,30},{90,30},{90,50},{50,50},{50,92},{30,
                      92},{30,72},{-30,72},{-30,90},{-50,90},{-50,50},{-90,50},{-90,
                      30},{-70,30},{-70,10},{-90,10},{-90,-10},{-70,-10},{-70,-50},
                      {-90,-50},{-90,-70},{-2,-70}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={215,215,215},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-44,-66},{40,-100}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={215,215,215},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-44,-100},{40,-100},{40,-70}},
                  color={0,0,0},
                  thickness=0.5),
                Rectangle(
                  extent={{-36,38},{0,-46}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-36,10},{0,10},{0,-18},{-36,-18}},
                  color={0,0,0},
                  thickness=0.5),
                Line(points={{-36,-20},{0,-40}}, color={0,0,0}),
                Line(points={{0,-20},{-36,-40}}, color={0,0,0}),
                Line(points={{-36,-30},{-32,-30}}, color={0,0,0}),
                Line(points={{0,-30},{-4,-30}}, color={0,0,0}),
                Line(points={{-4,-26},{-4,-34}}, color={0,0,0}),
                Line(points={{-32,-26},{-32,-34}}, color={0,0,0}),
                Line(points={{-36,26},{-32,26}}, color={0,0,0}),
                Line(points={{-32,30},{-32,22}}, color={0,0,0}),
                Line(points={{-4,30},{-4,22}}, color={0,0,0}),
                Line(points={{0,26},{-4,26}}, color={0,0,0}),
                Line(points={{-36,-12},{-32,-12}}, color={0,0,0}),
                Line(points={{-32,-8},{-32,-16}}, color={0,0,0}),
                Line(points={{-4,-8},{-4,-16}}, color={0,0,0}),
                Line(points={{0,-12},{-4,-12}}, color={0,0,0}),
                Line(points={{-36,4},{-32,4}}, color={0,0,0}),
                Line(points={{-32,8},{-32,0}}, color={0,0,0}),
                Line(points={{-4,0},{-4,8}}, color={0,0,0}),
                Line(points={{0,4},{-4,4}}, color={0,0,0}),
                Line(
                  points={{-44,-80},{-44,-70}},
                  color={0,0,0},
                  thickness=0.5),
                Line(points={{-36,16},{0,16}}, color={0,0,0}),
                Line(points={{-36,34},{0,34}}, color={0,0,0}),
                Line(points={{-36,-4},{0,-4}}, color={0,0,0}),
                Polygon(
                  points={{0,16},{-4,18},{-4,14},{0,16}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{0,-4},{-4,-2},{-4,-6},{0,-4}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-32,32},{-36,34},{-32,36},{-32,32}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{0,-40},{-6,-38},{-4,-36},{0,-40}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-32,-36},{-30,-38},{-36,-40},{-32,-36}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{-80,-60},{80,-60}}, color={0,0,0}),
                Line(points={{-92,0},{-58,0},{-58,-4},{-36,-4}}, color={0,0,0}),
                Line(points={{0,-4},{54,-4},{54,0},{80,0}}, color={0,0,0}),
                Rectangle(
                  extent={{-22,-46},{-14,-50}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-22,-50},{-18,-46},{-14,-50},{-22,-50}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-26,-90},{-18,-90},{18,-90},{20,-90}},
                  color={0,0,0},
                  thickness=0.5),
                Line(
                  points={{-18,-50},{-18,-90}},
                  color={0,0,0},
                  thickness=0.5),
                Line(points={{24,58},{24,-20},{0,-20}}, color={0,0,0}),
                Line(points={{40,80},{40,58},{24,58},{24,58}}, color={0,0,0}),
                Line(points={{-40,80},{-40,58},{6,58},{6,4},{0,4}}, color={0,0,0}),
                Line(points={{-36,-12},{-52,-12},{-52,-60}}, color={0,0,0}),
                Text(
                  extent={{-120,-92},{120,-116}},
                  lineColor={0,0,255},
                  textString="%name"),
                Line(points={{-80,40},{-50,40},{-50,4},{-36,4}}, color={0,0,0}),
                Line(points={{54,-4},{54,40},{80,40}}, color={0,0,0})}),
            experiment(StopTime=10, Tolerance=1e-006),
            experimentSetupOutput);
        end SV6_3OCTandem;

        model SV6_3CCParallel "Sectional valve "
          extends OpenHydraulics.Interfaces.PartialFluidComponent;

          //parameters
          parameter Integer inputIndex=1 "Index of command for this valve";
          parameter Integer sizeOfInputs=1 "Size of input array";

          //ports
          OpenHydraulics.Interfaces.FluidPort P1in
            annotation (Placement(transformation(extent={{-100,50},{-80,70}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort LSout
            annotation (Placement(transformation(extent={{-100,-30},{-80,-10}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort T2_out
            annotation (Placement(transformation(extent={{-100,-70},{-80,-50}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort P1out
            annotation (Placement(transformation(extent={{80,50},{100,70}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort LSin
            annotation (Placement(transformation(extent={{80,-30},{100,-10}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort T2_in
            annotation (Placement(transformation(extent={{80,-70},{100,-50}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort LSout1
            annotation (Placement(transformation(extent={{-100,10},{-80,30}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort A
            annotation (Placement(transformation(extent={{-50,80},{-30,100}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort B
            annotation (Placement(transformation(extent={{30,80},{50,100}},
                  rotation=0)));
          OpenHydraulics.Interfaces.FluidPort LSin1
            annotation (Placement(transformation(extent={{80,10},{100,30}},
                  rotation=0)));
          Modelica.Blocks.Interfaces.RealOutput y[sizeOfInputs]
            annotation (Placement(transformation(extent={{20,-100},{40,-80}},
                  rotation=0)));

          Modelica.Blocks.Interfaces.RealInput u[sizeOfInputs]
            annotation (Placement(transformation(extent={{-44,-100},{-26,-80}},
                  rotation=0)));

            //junctions
          OpenHydraulics.Components.Lines.NJunction j1
            annotation (Placement(transformation(
                origin={-50,60},
                extent={{-10,-10},{10,10}},
                rotation=90)));

          OpenHydraulics.Components.Lines.NJunction j2
            annotation (Placement(transformation(
                origin={30,20},
                extent={{-10,-10},{10,10}},
                rotation=180)));

          OpenHydraulics.Components.Lines.NJunction j3(n_ports=5)
            annotation (Placement(transformation(
                origin={10,-60},
                extent={{-10,-10},{10,10}},
                rotation=180)));

          OpenHydraulics.Components.Lines.NJunction j4
            annotation (Placement(transformation(
                origin={40,46},
                extent={{-10,-10},{10,10}},
                rotation=180)));

          OpenHydraulics.Components.Lines.NJunction j5
            annotation (Placement(transformation(
                origin={-40,46},
                extent={{-10,-10},{10,10}},
                rotation=90)));

            //components
          OpenHydraulics.Components.Valves.DirectionalValves.V6_3CCLS v6_3CC
            annotation (Placement(transformation(
                origin={-20,-20},
                extent={{-20,-20},{20,20}},
                rotation=270)));
          OpenHydraulics.Components.Valves.Anticavitation_ReliefValve AnticavRelief
            annotation (Placement(transformation(extent={{-30,36},{-10,56}},
                  rotation=0)));

          OpenHydraulics.Components.Valves.Anticavitation_ReliefValve AnticavRelief2
            annotation (Placement(transformation(extent={{34,36},{14,56}},
                  rotation=0)));

          OpenHydraulics.Components.Valves.PostPCValve post_PressureCompensationValve
            annotation (Placement(transformation(extent={{20,6},{40,-14}},
                  rotation=0)));

          OpenHydraulics.Components.Valves.ShuttleValve shuttleValve(q_nom=0.02)
            annotation (Placement(transformation(
                origin={58,-24},
                extent={{-10,-10},{10,10}},
                rotation=180)));

          parameter Real q_nom=q_nom;
        equation
          connect(u, y)
            annotation (Line(points={{-35,-90},{30,-90}}, color={0,0,127}));
          connect(u[inputIndex], v6_3CC.control)          annotation (Line(points=
                 {{-35,-90},{-20,-90},{-20,-39.6}}, color={0,0,127}));
          connect(v6_3CC.portP2, post_PressureCompensationValve.port_b)
            annotation (Line(points={{-4,-16},{40,-16},{40,-4}}, color={255,0,0}));
          connect(post_PressureCompensationValve.port_a, v6_3CC.portT1)
            annotation (Line(points={{20,-4},{20,-4},{10,-3.88},{10,-4},{-4,-4}},
                color={255,0,0}));
          connect(post_PressureCompensationValve.port_LS, j2.port[1])
            annotation (Line(
              points={{30,5},{30,20.6667}},
              color={255,0,0},
              pattern=LinePattern.Dash));
          connect(j2.port[3], LSin1) annotation (Line(
              points={{30,19.3333},{30,20},{90,20}},
              color={255,0,0},
              pattern=LinePattern.Dash));
          connect(j2.port[2], LSout1) annotation (Line(
              points={{30,20},{32,20},{32,20},{-90,20}},
              color={255,0,0},
              pattern=LinePattern.Dash));
          connect(j1.port[3], P1out) annotation (Line(points={{-50.6667,60},{90,
                  60}}, color={255,0,0}));
          connect(P1in, j1.port[2]) annotation (Line(points={{-90,60},{-50,60}},
                color={255,0,0}));
          connect(j1.port[1], v6_3CC.portP1)          annotation (Line(points={{
                  -49.3333,60},{-50,60},{-50,-4},{-36,-4}}, color={255,0,0}));
          connect(j5.port[2], A) annotation (Line(points={{-40,46},{-40,78},{-40,
                  78},{-40,90}}, color={255,0,0}));
          connect(v6_3CC.portB,j4. port[1])          annotation (Line(points={{
                  -36,-36},{-58,-36},{-58,30},{40,30},{40,46.6667}}, color={255,0,
                  0}));
          connect(AnticavRelief2.port_a,j4. port[2]) annotation (Line(points={{32,
                  46},{40,46}}, color={255,0,0}));
          connect(j4.port[3], B) annotation (Line(points={{40,45.3333},{40,90}},
                color={255,0,0}));
          connect(AnticavRelief.port_a,j5. port[3]) annotation (Line(points={{-28,
                  46},{-40.6667,46}}, color={255,0,0}));
          connect(v6_3CC.portA,j5. port[1])          annotation (Line(points={{
                  -36,-20},{-54,-20},{-54,46},{-39.3333,46}}, color={255,0,0}));
          connect(AnticavRelief.port_b, j3.port[3]) annotation (Line(points={{-12,
                  46},{10,46},{10,-60}}, color={255,0,0}));
          connect(AnticavRelief2.port_b, j3.port[4]) annotation (Line(points={{16,
                  46},{10,46},{10,-60.4}}, color={255,0,0}));
          connect(j3.port[5], T2_in) annotation (Line(points={{10,-60.8},{10,-60},
                  {90,-60}}, color={255,0,0}));
          connect(v6_3CC.portT2, j3.port[2])          annotation (Line(points={{
                  -4,-36},{10,-36},{10,-59.6}}, color={255,0,0}));
          connect(T2_out, j3.port[1]) annotation (Line(points={{-90,-60},{12,-60},
                  {12,-59.2},{10,-59.2}}, color={255,0,0}));
          connect(shuttleValve.PortC, LSout) annotation (Line(
              points={{58,-16},{58,10},{-74,10},{-74,-20},{-90,-20}},
              color={255,0,0},
              pattern=LinePattern.Dash));
          connect(shuttleValve.PortA, LSin) annotation (Line(
              points={{68,-24},{72,-24},{72,-20},{90,-20}},
              color={255,0,0},
              pattern=LinePattern.Dash));
          connect(v6_3CC.portLS, shuttleValve.PortB) annotation (Line(
              points={{-4,-24},{22,-24},{22,-24},{48,-24}},
              color={255,0,0},
              pattern=LinePattern.Dash));
        annotation (Diagram(graphics={Rectangle(
                  extent={{-80,80},{80,-80}},
                  lineColor={0,0,0},
                  pattern=LinePattern.Dash)}),
                                Icon(coordinateSystem(preserveAspectRatio=false,
                  extent={{-100,-100},{100,100}}), graphics={
                Text(
                  extent={{-100,-100},{100,-124}},
                  lineColor={0,0,255},
                  textString="%name"),
                Polygon(
                  points={{40,-76},{40,-70},{92,-70},{92,-50},{70,-50},{60,-50},{
                      60,-30},{92,-30},{92,-10},{60,-10},{60,10},{92,10},{92,30},
                      {60,30},{60,50},{92,50},{92,70},{60,70},{52,70},{52,70},{50,
                      70},{50,92},{30,92},{30,70},{-28,70},{-30,70},{-30,92},{-50,
                      92},{-50,70},{-90,70},{-90,50},{-60,50},{-60,30},{-90,30},{
                      -90,10},{-60,10},{-60,-10},{-90,-10},{-90,-30},{-60,-30},{-60,
                      -50},{-90,-50},{-90,-70},{-60,-70},{-44,-70},{-44,-80},{-44,
                      -100},{40,-100},{40,-80},{40,-76}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={215,215,215},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{-102,96},{-66,58}},
                  lineColor={0,0,0},
                  textString="P1in"),
                Text(
                  extent={{-104,-26},{-60,-60}},
                  lineColor={0,0,0},
                  textString="T2out"),
                Text(
                  extent={{56,98},{102,58}},
                  lineColor={0,0,0},
                  textString="P1out"),
                Text(
                  extent={{68,-24},{102,-62}},
                  lineColor={0,0,0},
                  textString="T2in"),
                Text(
                  extent={{14,98},{32,76}},
                  lineColor={0,0,0},
                  textString="B"),
                Text(
                  extent={{-32,98},{-12,76}},
                  lineColor={0,0,0},
                  textString="A"),
                Text(
                  extent={{-118,62},{-60,12}},
                  lineColor={0,0,0},
                  textString="LSOut1"),
                Text(
                  extent={{-112,20},{-60,-26}},
                  lineColor={0,0,0},
                  textString="LSOut"),
                Text(
                  extent={{66,10},{102,-16}},
                  lineColor={0,0,0},
                  textString="LSin"),
                Text(
                  extent={{64,52},{108,22}},
                  lineColor={0,0,0},
                  textString="LSin1"),
                Rectangle(
                  extent={{-24,56},{12,-50}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-24,24},{12,24},{12,-14},{-24,-14}},
                  color={0,0,0},
                  thickness=0.5),
                Line(points={{-24,-18},{-24,-10}}, color={0,0,0}),
                Line(points={{-16,14},{-16,22}}, color={0,0,0}),
                Line(points={{12,-28},{12,-14}}, color={0,0,0}),
                Line(points={{-24,18},{-16,18}}, color={0,0,0}),
                Line(points={{-12,-14},{-4,-14}}, color={0,0,0}),
                Line(points={{-24,4},{-16,4}}, color={0,0,0}),
                Line(points={{-16,0},{-16,8}}, color={0,0,0}),
                Line(points={{-24,-8},{-16,-8}}, color={0,0,0}),
                Line(points={{-16,-12},{-16,-4}}, color={0,0,0}),
                Line(points={{4,18},{12,18}}, color={0,0,0}),
                Line(points={{4,10},{12,10}}, color={0,0,0}),
                Line(points={{4,0},{12,0}}, color={0,0,0}),
                Line(points={{4,-8},{12,-8}}, color={0,0,0}),
                Line(points={{4,10},{4,-8}}, color={0,0,0}),
                Line(points={{4,14},{4,22}}, color={0,0,0}),
                Line(points={{-24,50},{12,50}}, color={0,0,0}),
                Line(points={{12,28},{-24,28}}, color={0,0,0}),
                Line(points={{12,44},{-24,38}}, color={0,0,0}),
                Line(points={{12,36},{6,36},{6,42}}, color={0,0,0}),
                Line(points={{-24,-20},{12,-20}}, color={0,0,0}),
                Line(points={{-24,-32},{12,-44}}, color={0,0,0}),
                Line(points={{-24,-44},{12,-28}}, color={0,0,0}),
                Line(points={{12,-38},{6,-38},{6,-30}}, color={0,0,0}),
                Polygon(
                  points={{6,52},{6,48},{12,50},{6,52}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{6,-18},{6,-22},{12,-20},{6,-18}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-18,26},{-24,28},{-18,30},{-18,26}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{12,-44},{6,-44},{8,-40},{12,-44}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-18,-44},{-24,-44},{-20,-40},{-18,-44}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-16,36},{-24,38},{-18,42},{-16,36}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{-80,60},{-46,60},{-30,60},{-30,18},{-24,18}}, color=
                     {0,0,0}),
                Line(points={{-30,58},{-30,60},{80,60}}, color={0,0,0}),
                Line(points={{-24,4},{-36,4},{-40,4},{-40,80}}, color={0,0,0}),
                Line(points={{-24,-8},{-36,-8},{-36,64},{40,64},{40,80}}, color={
                      0,0,0}),
                Line(points={{-80,-60},{80,-60}}, color={0,0,0}),
                Line(points={{12,-8},{22,-8},{22,-60}}, color={0,0,0}),
                Rectangle(
                  extent={{38,-16},{54,-22}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Line(points={{42,-16},{38,-20},{42,-22}}, color={0,0,0}),
                Line(points={{50,-16},{54,-20},{50,-22}}, color={0,0,0}),
                Ellipse(
                  extent={{46,-16},{42,-22}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{54,-20},{78,-20},{80,-20}},
                  color={0,0,0},
                  pattern=LinePattern.Dash),
                Line(
                  points={{12,0},{26,0},{26,-20},{38,-20}},
                  color={0,0,0},
                  pattern=LinePattern.Dash),
                Line(
                  points={{46,-22},{46,-56},{-52,-56},{-52,-20},{-80,-20}},
                  color={0,0,0},
                  pattern=LinePattern.Dash),
                Line(
                  points={{-80,20},{-48,20},{-48,-54},{32,-54},{32,4}},
                  color={0,0,0},
                  pattern=LinePattern.Dash),
                Rectangle(
                  extent={{28,14},{42,-2}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Line(points={{12,10},{28,10}}, color={0,0,0}),
                Line(points={{12,18},{46,18},{46,10},{42,10}}, color={0,0,0}),
                Line(
                  points={{80,20},{72,20},{54,20},{54,-4},{54,-8},{32,-8}},
                  color={0,0,0},
                  pattern=LinePattern.Dash),
                Line(points={{-26,-90},{20,-90},{-6,-90},{-6,-50}}, color={0,0,
                      127}),
                Line(
                  points={{34,14},{34,18},{34,16}},
                  color={0,0,0},
                  pattern=LinePattern.Dot),
                Line(points={{28,6},{42,6}}, color={0,0,0}),
                Line(points={{42,10},{40,10}}, color={0,0,0}),
                Line(points={{30,10},{28,10}}, color={0,0,0}),
                Line(points={{28,2},{42,2}}, color={0,0,0}),
                Polygon(
                  points={{28,2},{30,0},{30,0},{30,4},{28,2}},
                  lineColor={0,0,0},
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{30,12},{30,8}}, color={0,0,0}),
                Line(points={{40,12},{40,8}}, color={0,0,0}),
                Line(points={{36,-2},{40,-2},{36,-2},{40,-4},{36,-4},{40,-6}},
                    color={0,0,0})}),
            experiment(StopTime=10, Tolerance=1e-006),
            experimentSetupOutput);
        end SV6_3CCParallel;

        package BaseClasses
          extends Modelica.Icons.BasesPackage;

          model PartialValve4_3pos
          "Partial class for building 4-port 3-position valves"

            // sizing parameters
            parameter SI.VolumeFlowRate q_nom = 0.001
            "Nominal flow rate at dp_nom"
              annotation(Dialog(tab="Sizing"));
            parameter SI.Pressure dp_nom = 1e6 "Nominal dp for metering curve"
              annotation(Dialog(tab="Sizing"));

            parameter Real q_fraction_P2A = 1 "Fraction of nominal flow rate"
              annotation(Dialog(tab="Sizing",group="Advanced Metering"));
            parameter Real q_fraction_P2B = 1 "Fraction of nominal flow rate"
              annotation(Dialog(tab="Sizing",group="Advanced Metering"));
            parameter Real q_fraction_A2T = 1 "Fraction of nominal flow rate"
              annotation(Dialog(tab="Sizing",group="Advanced Metering"));
            parameter Real q_fraction_B2T = 1 "Fraction of nominal flow rate"
              annotation(Dialog(tab="Sizing",group="Advanced Metering"));

            // dynamic response parameters
            parameter SI.Frequency bandwidth = 10
            "Bandwidth of 2nd order response"
              annotation(Dialog(tab="Dynamics"));
            parameter Real dampCoeff = 1
            "Damping coefficient of 2nd order response"
              annotation(Dialog(tab="Dynamics"));

            // configuration options
            parameter Boolean useCheckValve = true
            "true = use check valve on port P"
              annotation (Dialog(tab="Config Options"));

            extends
            OpenHydraulics.Components.Valves.DirectionalValves.BaseClasses.Valve4_3posInterface;

            // the spool models
            OpenHydraulics.Basic.VariableRestrictionSeriesValve P2A(
              final q_nom=q_nom*q_fraction_P2A,
              table=[0,0; 1,1],
              D_nom=0.01,
              dp_nom=dp_nom,
              min_contr=0,
              max_contr=1,
              p_init=p_init)
              annotation (
              Dialog(tab="Metering",group="Spool"), Placement(transformation(
                  origin={-40,0},
                  extent={{-8,-8},{8,8}},
                  rotation=90)));

            OpenHydraulics.Basic.VariableRestriction B2T(
              final q_nom=q_nom*q_fraction_B2T,
              table=[0,0; 1,1],
              D_nom=0.01,
              dp_nom=dp_nom,
              min_contr=0,
              max_contr=1,
              p_init=p_init)
              annotation (
              Dialog(tab="Metering",group="Spool"), Placement(transformation(
                  origin={40,0},
                  extent={{-8,8},{8,-8}},
                  rotation=270)));

            OpenHydraulics.Basic.VariableRestrictionSeriesValve P2B(
              final q_nom=q_nom*q_fraction_P2B,
              table=[-1,1; 0,0],
              D_nom=0.01,
              dp_nom=dp_nom,
              min_contr=-1,
              max_contr=0,
              p_init=p_init)
              annotation (
              Dialog(tab="Metering",group="Spool"), Placement(transformation(
                    extent={{-28,-22},{-12,-38}}, rotation=0)));

            OpenHydraulics.Basic.VariableRestriction A2T(
              final q_nom=q_nom*q_fraction_A2T,
              table=[-1,1; 0,0],
              D_nom=0.01,
              dp_nom=dp_nom,
              min_contr=-1,
              max_contr=0,
              p_init=p_init)
              annotation (
              Dialog(tab="Metering",group="Spool"), Placement(transformation(
                    extent={{-28,22},{-12,38}}, rotation=0)));

            // configurable components

            // the connection junctions (with small volumes)
            Lines.NJunction j1(
              n_ports=3,
              p_init=p_init)
              annotation (Placement(transformation(extent={{-50,-70},{-30,-50}},
                    rotation=0)));

            Lines.NJunction j2(
              n_ports=3,
              p_init=p_init)
              annotation (Placement(transformation(extent={{-50,50},{-30,70}},
                    rotation=0)));

            Lines.NJunction j3(
              n_ports=3,
              p_init=p_init)
              annotation (Placement(transformation(extent={{30,50},{50,70}},
                    rotation=0)));

            Lines.NJunction j4(
              n_ports=3,
              p_init=p_init)
              annotation (Placement(transformation(extent={{30,-70},{50,-50}},
                    rotation=0)));

            Modelica.Blocks.Continuous.SecondOrder dynamicResponse(
              w=bandwidth*2*Modelica.Constants.pi,
              D=dampCoeff,
              initType=Modelica.Blocks.Types.Init.SteadyState)
              annotation (Placement(transformation(extent={{86,-10},{66,10}},
                    rotation=0)));

          initial equation
            assert(useCheckValve,"not implemented yet without serial check valve");

          equation
            connect(dynamicResponse.y, A2T.control)
              annotation (Line(points={{65,0},{50,0},{50,12},{30,12},{30,0},{-20,
                    0},{-20,23.6}}, color={0,0,127}));
            connect(dynamicResponse.y, B2T.control)
              annotation (Line(points={{65,0},{50,0},{50,-1.17566e-015},{46.4,-1.17566e-015}},
                                    color={0,0,127}));
            connect(dynamicResponse.y, P2A.control)
              annotation (Line(points={{65,0},{50,0},{50,12},{30,12},{30,0},{-28,
                    0},{-28,-3.91887e-016},{-33.6,-3.91887e-016}}, color={0,0,127}));
            connect(dynamicResponse.y, P2B.control)
              annotation (Line(points={{65,0},{50,0},{50,12},{30,12},{30,0},{-20,
                    0},{-20,-23.6}}, color={0,0,127}));
            connect(j2.port[1], portA)
              annotation (Line(points={{-40,59.3333},{-40,80}}, color={255,0,0}));
            connect(portB,j3. port[1])
              annotation (Line(points={{40,80},{40,59.3333}}, color={255,0,0}));
            connect(portT,j4. port[1])
              annotation (Line(points={{40,-80},{40,-60.6667}}, color={255,0,0}));
            connect(j4.port[2], B2T.port_b)
              annotation (Line(points={{40,-60},{40,-8}}, color={255,0,0}));
            connect(j3.port[3], B2T.port_a)
              annotation (Line(points={{40,60.6667},{40,8}}, color={255,0,0}));
            connect(A2T.port_a, j2.port[3])
              annotation (Line(points={{-28,30},{-40,30},{-40,60.6667}}, color={
                    255,0,0}));
            connect(A2T.port_b, j4.port[3])
              annotation (Line(points={{-12,30},{-12,30},{12,-30},{40,-30},{40,-59.3333}},
                                color={255,0,0}));
            connect(control, dynamicResponse.u)
              annotation (Line(points={{110,0},{88,0}}, color={0,0,127}));
            connect(P2A.port_a, j1.port[2])
              annotation (Line(points={{-40,-8},{-40,-60}}, color={255,0,0}));
            connect(P2B.port_a, j1.port[3])
               annotation (Line(points={{-28,-30},{-40,-30},{-40,-59.3333}},
                  color={255,0,0}));
            connect(portP, j1.port[1])
              annotation (Line(points={{-40,-80},{-40,-60.6667}}, color={255,0,0}));
            connect(P2A.port_b, j2.port[2])
              annotation (Line(points={{-40,8},{-40,60}}, color={255,0,0}));
            connect(P2B.port_b, j3.port[2])
              annotation (Line(points={{-12,-30},{12,30},{40,30},{40,60}}, color=
                    {255,0,0}));
            annotation (Diagram(graphics={
                  Text(
                    extent={{-24,-66},{24,-72}},
                    lineColor={0,0,255},
                    textString=
                         "P2A and P2B"),
                  Text(
                    extent={{-24,-72},{24,-78}},
                    lineColor={0,0,255},
                    textString=
                         "can be configured"),
                  Text(
                    extent={{-24,-78},{24,-84}},
                    lineColor={0,0,255},
                    textString=
                         "with useCheckValve"),
                  Rectangle(extent={{-24,-64},{24,-86}}, lineColor={0,0,255})}));
          end PartialValve4_3pos;

          partial model Valve4_3posInterface
          "Interface for 4-port 3-position valve"
            extends OpenHydraulics.Interfaces.PartialFluidComponent;

            // the ports
            OpenHydraulics.Interfaces.FluidPort portP
              annotation (Placement(transformation(extent={{-50,-90},{-30,-70}},
                    rotation=0)));
            OpenHydraulics.Interfaces.FluidPort portA
              annotation (Placement(transformation(extent={{-50,70},{-30,90}},
                    rotation=0)));
            OpenHydraulics.Interfaces.FluidPort portT
              annotation (Placement(transformation(extent={{30,-90},{50,-70}},
                    rotation=0)));
            OpenHydraulics.Interfaces.FluidPort portB
              annotation (Placement(transformation(extent={{30,70},{50,90}},
                    rotation=0)));
            Modelica.Blocks.Interfaces.RealInput control
              annotation (Placement(transformation(extent={{130,-20},{90,20}},
                    rotation=0)));

            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={
                      {-100,-100},{100,100}}), graphics={
                  Rectangle(
                    extent={{90,20},{130,-20}},
                    lineColor={0,0,0},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Text(
                    extent={{-82,100},{-52,60}},
                    lineColor={0,0,0},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid,
                    textString="A"),
                  Text(
                    extent={{52,100},{82,60}},
                    lineColor={0,0,0},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid,
                    textString="B"),
                  Text(
                    extent={{50,-60},{80,-100}},
                    lineColor={0,0,0},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid,
                    textString="T"),
                  Text(
                    extent={{-80,-60},{-50,-100}},
                    lineColor={0,0,0},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid,
                    textString="P"),
                  Rectangle(
                    extent={{-90,30},{-30,-30}},
                    lineColor={0,0,0},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-30,30},{30,-30}},
                    lineColor={0,0,0},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{30,30},{90,-30}},
                    lineColor={0,0,0},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid)}),
                                      Diagram(graphics));
            // the connection junctions (with small volumes)
          end Valve4_3posInterface;

          model PartialValve4_3pos_old
          "Partial class for building 4-port 3-position valves"

            // sizing parameters
            parameter SI.VolumeFlowRate q_nom = 0.001
            "Nominal flow rate at dp_nom"
              annotation(Dialog(tab="Sizing"));
            parameter SI.Pressure dp_nom = 1e6 "Nominal dp for metering curve"
              annotation(Dialog(tab="Sizing"));

            parameter Real q_fraction_P2A = 1 "Fraction of nominal flow rate"
              annotation(Dialog(tab="Sizing",group="Advanced Metering"));
            parameter Real q_fraction_P2B = 1 "Fraction of nominal flow rate"
              annotation(Dialog(tab="Sizing",group="Advanced Metering"));
            parameter Real q_fraction_A2T = 1 "Fraction of nominal flow rate"
              annotation(Dialog(tab="Sizing",group="Advanced Metering"));
            parameter Real q_fraction_B2T = 1 "Fraction of nominal flow rate"
              annotation(Dialog(tab="Sizing",group="Advanced Metering"));

            // dynamic response parameters
            parameter SI.Frequency bandwidth = 10
            "Bandwidth of 2nd order response"
              annotation(Dialog(tab="Dynamics"));
            parameter Real dampCoeff = 1
            "Damping coefficient of 2nd order response"
              annotation(Dialog(tab="Dynamics"));

            extends
            OpenHydraulics.Components.Valves.DirectionalValves.BaseClasses.Valve4_3posInterface;

            // the spool models
            OpenHydraulics.Basic.VariableRestriction P2A(
              final q_nom=q_nom*q_fraction_P2A,
              table=[0,0; 1,1],
              D_nom=0.01,
              dp_nom=dp_nom,
              min_contr=0,
              max_contr=1,
              p_init=p_init)
              annotation (
              Dialog(tab="Metering",group="Spool"), Placement(transformation(
                  origin={-40,0},
                  extent={{-8,-8},{8,8}},
                  rotation=90)));

            OpenHydraulics.Basic.VariableRestriction B2T(
              final q_nom=q_nom*q_fraction_B2T,
              table=[0,0; 1,1],
              D_nom=0.01,
              dp_nom=dp_nom,
              min_contr=0,
              max_contr=1,
              p_init=p_init)
              annotation (
              Dialog(tab="Metering",group="Spool"), Placement(transformation(
                  origin={40,0},
                  extent={{-8,8},{8,-8}},
                  rotation=270)));

            OpenHydraulics.Basic.VariableRestriction P2B(
              final q_nom=q_nom*q_fraction_P2B,
              table=[-1,1; 0,0],
              D_nom=0.01,
              dp_nom=dp_nom,
              p_init=p_init,
              min_contr=-1,
              max_contr=0)
              annotation (
              Dialog(tab="Metering",group="Spool"), Placement(transformation(
                    extent={{-34,-20},{-18,-36}}, rotation=0)));

            OpenHydraulics.Basic.VariableRestriction A2T(
              final q_nom=q_nom*q_fraction_A2T,
              table=[-1,1; 0,0],
              D_nom=0.01,
              dp_nom=dp_nom,
              p_init=p_init,
              min_contr=-1,
              max_contr=0)
              annotation (
              Dialog(tab="Metering",group="Spool"), Placement(transformation(
                    extent={{-34,20},{-18,36}}, rotation=0)));

            // the connection junctions (with small volumes)
            Lines.NJunction j1(
              n_ports=3)
              annotation (Placement(transformation(extent={{-50,-60},{-30,-40}},
                    rotation=0)));

            Lines.NJunction j2(
              n_ports=3)
              annotation (Placement(transformation(extent={{-50,50},{-30,70}},
                    rotation=0)));

            Lines.NJunction j3(
              n_ports=3)
              annotation (Placement(transformation(extent={{30,50},{50,70}},
                    rotation=0)));

            Lines.NJunction j4(
              n_ports=3)
              annotation (Placement(transformation(extent={{30,-60},{50,-40}},
                    rotation=0)));

            Modelica.Blocks.Continuous.SecondOrder dynamicResponse(
              w=bandwidth*2*Modelica.Constants.pi,
              D=dampCoeff,
              initType=Modelica.Blocks.Types.Init.SteadyState)
              annotation (Placement(transformation(extent={{86,-10},{66,10}},
                    rotation=0)));
          equation
            connect(dynamicResponse.y, A2T.control)
              annotation (Line(points={{65,0},{50,0},{50,10},{-26,10},{-26,21.6}},
                  color={0,0,127}));
            connect(dynamicResponse.y, B2T.control)
              annotation (Line(points={{65,0},{50,0},{50,1.17562e-015},{46.4,
                    1.17562e-015}}, color={0,0,127}));
            connect(dynamicResponse.y, P2A.control)
              annotation (Line(points={{65,0},{50,0},{50,10},{-26,10},{-26,0},{
                    -33.6,0},{-33.6,-3.91874e-016}}, color={0,0,127}));
            connect(dynamicResponse.y, P2B.control)
              annotation (Line(points={{65,0},{50,0},{50,10},{-26,10},{-26,-21.6}},
                  color={0,0,127}));
            connect(j1.port[1], portP)
              annotation (Line(points={{-40,-50.75},{-40,-80}}, color={255,0,0}));
            connect(j2.port[1], portA)
              annotation (Line(points={{-40,59.25},{-40,80}}, color={255,0,0}));
            connect(portB,j3. port[1])
              annotation (Line(points={{40,80},{40,59.25}}, color={255,0,0}));
            connect(portT,j4. port[1])
              annotation (Line(points={{40,-80},{40,-50.75}}, color={255,0,0}));
            connect(P2A.port_a, j1.port[2])
              annotation (Line(points={{-40,-8},{-40,-50.05}}, color={255,0,0}));
            connect(P2B.port_a, j1.port[3])
              annotation (Line(points={{-34,-28},{-40,-28},{-40,-49.35}}, color={
                    255,0,0}));
            connect(P2B.port_b, j3.port[2])
              annotation (Line(points={{-18,-28},{-10,-28},{10,28},{40,28},{40,
                    59.95}}, color={255,0,0}));
            connect(j4.port[2], B2T.port_b)
              annotation (Line(points={{40,-50.05},{40,-8}}, color={255,0,0}));
            connect(j3.port[3], B2T.port_a)
              annotation (Line(points={{40,60.65},{40,8}}, color={255,0,0}));
            connect(j2.port[2], P2A.port_b)
              annotation (Line(points={{-40,59.95},{-40,8}}, color={255,0,0}));
            connect(A2T.port_a, j2.port[3])
              annotation (Line(points={{-34,28},{-40,28},{-40,60.65}}, color={255,
                    0,0}));
            connect(A2T.port_b, j4.port[3])
              annotation (Line(points={{-18,28},{-10,28},{10,-28},{40,-28},{40,
                    -49.35}}, color={255,0,0}));
            connect(control, dynamicResponse.u) annotation (Line(points={{110,0},
                    {88,0}}, color={0,0,127}));
            annotation (Diagram(graphics));
          end PartialValve4_3pos_old;

          model PartialValve4_3pos_new
          "Partial class for building 4-port 3-position valves"

            // sizing parameters
            parameter SI.VolumeFlowRate q_nom = 0.001
            "Nominal flow rate at dp_nom"
              annotation(Dialog(tab="Sizing"));
            parameter SI.Pressure dp_nom = 1e6 "Nominal dp for metering curve"
              annotation(Dialog(tab="Sizing"));

            parameter Real q_fraction_P2A = 1 "Fraction of nominal flow rate"
              annotation(Dialog(tab="Sizing",group="Advanced Metering"));
            parameter Real q_fraction_P2B = 1 "Fraction of nominal flow rate"
              annotation(Dialog(tab="Sizing",group="Advanced Metering"));
            parameter Real q_fraction_A2T = 1 "Fraction of nominal flow rate"
              annotation(Dialog(tab="Sizing",group="Advanced Metering"));
            parameter Real q_fraction_B2T = 1 "Fraction of nominal flow rate"
              annotation(Dialog(tab="Sizing",group="Advanced Metering"));

            // dynamic response parameters
            parameter SI.Frequency bandwidth = 10
            "Bandwidth of 2nd order response"
              annotation(Dialog(tab="Dynamics"));
            parameter Real dampCoeff = 1
            "Damping coefficient of 2nd order response"
              annotation(Dialog(tab="Dynamics"));

            extends
            OpenHydraulics.Components.Valves.DirectionalValves.BaseClasses.Valve4_3posInterface;

            // the spool models
            OpenHydraulics.Basic.VariableRestriction P2A(
              final q_nom=q_nom*q_fraction_P2A,
              table=[0,0; 1,1],
              D_nom=0.01,
              dp_nom=dp_nom,
              min_contr=0,
              max_contr=1,
              p_init=p_init)
              annotation (
              Dialog(tab="Metering",group="Spool"), Placement(transformation(
                  origin={-40,0},
                  extent={{-8,-8},{8,8}},
                  rotation=90)));

            OpenHydraulics.Basic.VariableRestriction B2T(
              final q_nom=q_nom*q_fraction_B2T,
              table=[0,0; 1,1],
              D_nom=0.01,
              dp_nom=dp_nom,
              min_contr=0,
              max_contr=1,
              p_init=p_init)
              annotation (
              Dialog(tab="Metering",group="Spool"), Placement(transformation(
                  origin={40,0},
                  extent={{-8,8},{8,-8}},
                  rotation=270)));

            OpenHydraulics.Basic.VariableRestriction P2B(
              final q_nom=q_nom*q_fraction_P2B,
              table=[-1,1; 0,0],
              D_nom=0.01,
              dp_nom=dp_nom,
              min_contr=-1,
              max_contr=0,
              p_init=p_init)
              annotation (
              Dialog(tab="Metering",group="Spool"), Placement(transformation(
                    extent={{-28,-22},{-12,-38}}, rotation=0)));

            OpenHydraulics.Basic.VariableRestriction A2T(
              final q_nom=q_nom*q_fraction_A2T,
              table=[-1,1; 0,0],
              D_nom=0.01,
              dp_nom=dp_nom,
              min_contr=-1,
              max_contr=0,
              p_init=p_init)
              annotation (
              Dialog(tab="Metering",group="Spool"), Placement(transformation(
                    extent={{-28,22},{-12,38}}, rotation=0)));

            // configurable components

            // the connection junctions (with small volumes)
            Lines.NJunction j1(
              n_ports=3,
              p_init=p_init)
              annotation (Placement(transformation(extent={{-50,-70},{-30,-50}},
                    rotation=0)));

            Lines.NJunction j2(
              n_ports=3,
              p_init=p_init)
              annotation (Placement(transformation(extent={{-50,50},{-30,70}},
                    rotation=0)));

            Lines.NJunction j3(
              n_ports=3,
              p_init=p_init)
              annotation (Placement(transformation(extent={{30,50},{50,70}},
                    rotation=0)));

            Lines.NJunction j4(
              n_ports=3,
              p_init=p_init)
              annotation (Placement(transformation(extent={{30,-70},{50,-50}},
                    rotation=0)));

            Modelica.Blocks.Continuous.SecondOrder dynamicResponse(
              w=bandwidth*2*Modelica.Constants.pi,
              D=dampCoeff,
              initType=Modelica.Blocks.Types.Init.SteadyState)
              annotation (Placement(transformation(extent={{86,-10},{66,10}},
                    rotation=0)));

          equation
            connect(dynamicResponse.y, A2T.control)
              annotation (Line(points={{65,0},{50,0},{50,12},{30,12},{30,0},{-20,
                    0},{-20,23.6}}, color={0,0,127}));
            connect(dynamicResponse.y, B2T.control)
              annotation (Line(points={{65,0},{50,0},{50,-1.17566e-015},{46.4,-1.17566e-015}},
                                    color={0,0,127}));
            connect(dynamicResponse.y, P2A.control)
              annotation (Line(points={{65,0},{50,0},{50,12},{30,12},{30,0},{-28,
                    0},{-28,-3.91887e-016},{-33.6,-3.91887e-016}}, color={0,0,127}));
            connect(dynamicResponse.y, P2B.control)
              annotation (Line(points={{65,0},{50,0},{50,12},{30,12},{30,0},{-20,
                    0},{-20,-23.6}}, color={0,0,127}));
            connect(j2.port[1], portA)
              annotation (Line(points={{-40,59.3333},{-40,80}}, color={255,0,0}));
            connect(portB,j3. port[1])
              annotation (Line(points={{40,80},{40,59.3333}}, color={255,0,0}));
            connect(portT,j4. port[1])
              annotation (Line(points={{40,-80},{40,-60.6667}}, color={255,0,0}));
            connect(j4.port[2], B2T.port_b)
              annotation (Line(points={{40,-60},{40,-8}}, color={255,0,0}));
            connect(j3.port[3], B2T.port_a)
              annotation (Line(points={{40,60.6667},{40,8}}, color={255,0,0}));
            connect(A2T.port_a, j2.port[3])
              annotation (Line(points={{-28,30},{-40,30},{-40,60.6667}}, color={
                    255,0,0}));
            connect(A2T.port_b, j4.port[3])
              annotation (Line(points={{-12,30},{-12,30},{12,-30},{40,-30},{40,-59.3333}},
                                color={255,0,0}));
            connect(control, dynamicResponse.u)
              annotation (Line(points={{110,0},{88,0}}, color={0,0,127}));
            connect(P2A.port_a, j1.port[2])
              annotation (Line(points={{-40,-8},{-40,-60}}, color={255,0,0}));
            connect(P2B.port_a, j1.port[3])
               annotation (Line(points={{-28,-30},{-40,-30},{-40,-59.3333}},
                  color={255,0,0}));
            connect(portP, j1.port[1])
              annotation (Line(points={{-40,-80},{-40,-60.6667}}, color={255,0,0}));
            connect(P2A.port_b, j2.port[2])
              annotation (Line(points={{-40,8},{-40,60}}, color={255,0,0}));
            connect(P2B.port_b, j3.port[2])
              annotation (Line(points={{-12,-30},{12,30},{40,30},{40,60}}, color=
                    {255,0,0}));
            annotation (Diagram(graphics));
          end PartialValve4_3pos_new;

          model PartialV6_3

              // sizing parameters
            parameter SI.VolumeFlowRate q_nom = 0.001
            "Nominal flow rate at dp_nom"
              annotation(Dialog(tab="Sizing"));
            parameter SI.Pressure dp_nom = 1e6 "Nominal dp for metering curve"
              annotation(Dialog(tab="Sizing"));

            parameter Real q_fraction_P12A = 1 "Fraction of nominal flow rate"
              annotation(Dialog(tab="Sizing",group="Advanced Metering"));
            parameter Real q_fraction_P12B = 1 "Fraction of nominal flow rate"
              annotation(Dialog(tab="Sizing",group="Advanced Metering"));
            parameter Real q_fraction_A2T2 = 1 "Fraction of nominal flow rate"
              annotation(Dialog(tab="Sizing",group="Advanced Metering"));
            parameter Real q_fraction_B2T2 = 1 "Fraction of nominal flow rate"
              annotation(Dialog(tab="Sizing",group="Advanced Metering"));
            parameter Real q_fraction_P22T1 = 1 "Fraction of nominal flow rate"
              annotation(Dialog(tab="Sizing",group="Advanced Metering"));

              // dynamic response parameters
            parameter SI.Frequency bandwidth = 10
            "Bandwidth of 2nd order response"
              annotation(Dialog(tab="Dynamics"));
            parameter Real dampCoeff = 1
            "Damping coefficient of 2nd order response"
              annotation(Dialog(tab="Dynamics"));
            extends
            OpenHydraulics.Components.Valves.DirectionalValves.BaseClasses.V6_3Interface;

            OpenHydraulics.Components.Lines.NJunction j1
              annotation (Placement(transformation(extent={{-90,-68},{-70,-48}},
                    rotation=0)));
            OpenHydraulics.Components.Lines.NJunction j2(n_ports=2)
              annotation (Placement(transformation(extent={{-20,-68},{0,-48}},
                    rotation=0)));
            OpenHydraulics.Components.Lines.NJunction j3
              annotation (Placement(transformation(extent={{50,-68},{70,-48}},
                    rotation=0)));
            OpenHydraulics.Components.Lines.NJunction j4
              annotation (Placement(transformation(extent={{-90,52},{-70,72}},
                    rotation=0)));
            OpenHydraulics.Components.Lines.NJunction j5
              annotation (Placement(transformation(extent={{-20,50},{0,70}},
                    rotation=0)));
            OpenHydraulics.Components.Lines.NJunction j6
              annotation (Placement(transformation(extent={{50,52},{70,72}},
                    rotation=0)));
            Basic.VariableRestriction P22T1(
              final q_nom = q_nom*q_fraction_P22T1,
              D_nom=0.01,
              dp_nom=2e5,
              p_init=p_init,
              min_contr=-1,
              table=[-1,0; 0,1; 1,0],
              max_contr=1)
              annotation (
              Dialog(tab="Metering",group="Spool"), Placement(transformation(
                  origin={-10,-40},
                  extent={{-10,-10},{10,10}},
                  rotation=90)));

            Basic.VariableRestriction P12B(
              final q_nom = q_nom*q_fraction_P12B,
              D_nom=0.01,
              dp_nom=2e5,
              p_init=p_init,
              table=[0,0; 1,1],
              min_contr=0,
              max_contr=1)
              annotation (
              Dialog(tab="Metering",group="Spool"), Placement(transformation(
                  origin={-80,10},
                  extent={{-10,-10},{10,10}},
                  rotation=90)));

            Basic.VariableRestriction A2T2(
              final q_nom = q_nom*q_fraction_A2T2,
              D_nom=0.01,
              dp_nom=2e5,
              p_init=p_init,
              table=[0,0; 1,1],
              min_contr=0,
              max_contr=1)
              annotation (
              Dialog(tab="Metering",group="Spool"), Placement(transformation(
                  origin={60,20},
                  extent={{-8,-8},{8,8}},
                  rotation=90)));

            Basic.VariableRestriction B2T2(
              final q_nom = q_nom*q_fraction_B2T2,
              D_nom=0.01,
              dp_nom=2e5,
              p_init=p_init,
              min_contr=-1,
              max_contr=0,
              table=[-1,1; 0,0])
              annotation (
              Dialog(tab="Metering",group="Spool"), Placement(transformation(
                    extent={{30,-30},{50,-10}}, rotation=0)));

            Basic.VariableRestriction P12A(
              final q_nom = q_nom*q_fraction_P12A,
              D_nom=0.01,
              dp_nom=2e5,
              p_init=p_init,
              min_contr=-1,
              max_contr=0,
              table=[-1,1; 0,0])
              annotation (
              Dialog(tab="Metering",group="Spool"), Placement(transformation(
                    extent={{-60,-10},{-40,-30}}, rotation=0)));

            Modelica.Blocks.Continuous.SecondOrder dynamicResponse(
              w=bandwidth*2*Modelica.Constants.pi,
              D=dampCoeff,
              initType=Modelica.Blocks.Types.Init.SteadyState)
              annotation (Placement(transformation(extent={{100,20},{80,40}},
                    rotation=0)));
          equation
            connect(j1.port[1], portP1) annotation (Line(points={{-80,-58.6667},{
                    -80,-80}}, color={255,0,0}));
            connect(j5.port[1], portT1) annotation (Line(points={{-10,59.5},{-10,
                    80},{0,80}}, color={255,0,0}));
            connect(j2.port[2], P22T1.port_a)   annotation (Line(points={{-10,
                    -57.5},{-10,-50}}, color={255,0,0}));
            connect(P22T1.port_b, j5.port[2])   annotation (Line(points={{-10,-30},
                    {-10,60.5}}, color={255,0,0}));
            connect(j1.port[2], P12B.port_a) annotation (Line(points={{-80,-58},{
                    -80,0}}, color={255,0,0}));
            connect(P12B.port_b, j4.port[2]) annotation (Line(points={{-80,20},{
                    -80,62}}, color={255,0,0}));
            connect(A2T2.port_b, j6.port[2]) annotation (Line(points={{60,28},{60,
                    62}}, color={255,0,0}));
            connect(j3.port[2], A2T2.port_a) annotation (Line(points={{60,-58},{
                    60,12}}, color={255,0,0}));
            connect(j1.port[3], P12A.port_a) annotation (Line(points={{-80,
                    -57.3333},{-80,-20},{-60,-20}}, color={255,0,0}));
            connect(j3.port[3], B2T2.port_b) annotation (Line(points={{60,
                    -57.3333},{60,-20},{50,-20}}, color={255,0,0}));
            connect(P12A.port_b, j6.port[3]) annotation (Line(points={{-40,-20},{
                    -40,-20},{0,40},{60,40},{60,62.6667}}, color={255,0,0}));
            connect(B2T2.port_a, j4.port[3]) annotation (Line(points={{30,-20},{
                    20,-20},{-20,40},{-80,40},{-80,62.6667}}, color={255,0,0}));
            connect(portA, j4.port[1]) annotation (Line(points={{-80,80},{-80,
                    61.3333}}, color={255,0,0}));
            connect(j2.port[1], portP) annotation (Line(points={{-10,-58.5},{-10,
                    -80},{0,-80}}, color={255,0,0}));
            connect(dynamicResponse.u, control) annotation (Line(points={{102,30},
                    {112,30},{112,0},{106,0}}, color={0,0,127}));
            connect(dynamicResponse.y, A2T2.control) annotation (Line(points={{79,
                    30},{74,30},{74,20},{66.4,20}}, color={0,0,127}));
            connect(dynamicResponse.y, P12B.control) annotation (Line(points={{79,
                    30},{74,30},{74,10},{-72,10}}, color={0,0,127}));
            connect(dynamicResponse.y, P22T1.control)   annotation (Line(points={
                    {79,30},{74,30},{74,-40},{-2,-40}}, color={0,0,127}));
            connect(dynamicResponse.y, B2T2.control) annotation (Line(points={{79,
                    30},{74,30},{74,-40},{40,-40},{40,-28}}, color={0,0,127}));
            connect(dynamicResponse.y, P12A.control) annotation (Line(points={{79,
                    30},{74,30},{74,10},{-50,10},{-50,-12}}, color={0,0,127}));
            connect(j3.port[1], portT2) annotation (Line(points={{60,-58.6667},{
                    60,-80},{80,-80}}, color={255,0,0}));
            connect(j6.port[1], portB) annotation (Line(points={{60,61.3333},{60,
                    80},{80,80}}, color={255,0,0}));
            annotation (Diagram(graphics),
                                 Icon(coordinateSystem(preserveAspectRatio=false,
                    extent={{-100,-100},{100,100}}),
                                      graphics));
          end PartialV6_3;

          model PartialV6_3LS "Interface for 6-port 3-position valve"
            extends OpenHydraulics.Interfaces.PartialFluidComponent;

             // dynamic response parameters
            parameter SI.Frequency bandwidth = 10
            "Bandwidth of 2nd order response"
              annotation(Dialog(tab="Dynamics"));
            parameter Real dampCoeff = 1
            "Damping coefficient of 2nd order response"
              annotation(Dialog(tab="Dynamics"));

            // the ports
            OpenHydraulics.Interfaces.FluidPort portP1
              annotation (Placement(transformation(extent={{-90,-90},{-70,-70}},
                    rotation=0)));
            OpenHydraulics.Interfaces.FluidPort portA
              annotation (Placement(transformation(extent={{-10,-90},{10,-70}},
                    rotation=0)));
            OpenHydraulics.Interfaces.FluidPort portT2
              annotation (Placement(transformation(extent={{70,70},{90,90}},
                    rotation=0)));
            OpenHydraulics.Interfaces.FluidPort portT1
              annotation (Placement(transformation(extent={{-90,70},{-70,90}},
                    rotation=0)));
            Modelica.Blocks.Interfaces.RealInput control
              annotation (Placement(transformation(extent={{130,-20},{90,20}},
                    rotation=0)));
            OpenHydraulics.Interfaces.FluidPort portP2
              annotation (Placement(transformation(extent={{-30,70},{-10,90}},
                    rotation=0)));
            OpenHydraulics.Interfaces.FluidPort portB
              annotation (Placement(transformation(extent={{70,-90},{90,-70}},
                    rotation=0)));
            OpenHydraulics.Interfaces.FluidPort portLS
              annotation (Placement(transformation(extent={{10,70},{30,90}},
                    rotation=0)));

            // the components
            Modelica.Blocks.Continuous.SecondOrder dynamicResponse(
              w=bandwidth*2*Modelica.Constants.pi,
              D=dampCoeff,
              initType=Modelica.Blocks.Types.Init.SteadyState)
              annotation (Placement(transformation(extent={{100,-40},{80,-20}},
                    rotation=0)));

            // equation and connect

          equation
            connect(dynamicResponse.u, control) annotation (Line(points={{102,-30},
                    {106,-30},{106,0},{110,0}}, color={0,0,127}));

          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                      -100,-100},{100,100}}), graphics={
                  Rectangle(
                    extent={{90,20},{130,-20}},
                    lineColor={0,0,0},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Text(
                    extent={{40,-54},{80,-88}},
                    lineColor={0,0,0},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid,
                    textString="B"),
                  Text(
                    extent={{-10,-42},{30,-76}},
                    lineColor={0,0,0},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid,
                    textString="A"),
                  Text(
                    extent={{-70,-48},{-34,-94}},
                    lineColor={0,0,0},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid,
                    textString="P1"),
                  Rectangle(
                    extent={{-90,30},{-30,-30}},
                    lineColor={0,0,0},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-30,30},{30,-30}},
                    lineColor={0,0,0},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{30,30},{90,-30}},
                    lineColor={0,0,0},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Text(
                    extent={{-40,80},{-4,36}},
                    lineColor={0,0,0},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid,
                    textString="P2"),
                  Text(
                    extent={{-100,72},{-66,30}},
                    lineColor={0,0,0},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid,
                    textString="T1"),
                  Line(points={{-80,70},{-80,40},{-20,40},{-20,30}}, color={255,0,
                        0}),
                  Line(points={{-20,78},{-20,46},{-8,46},{-8,30}}, color={255,0,0}),
                  Line(points={{20,72},{20,46},{8,46},{8,30}}, color={255,0,0}),
                  Line(points={{-80,-70},{-80,-46},{-20,-46},{-20,-30}}, color={
                        255,0,0}),
                  Line(points={{0,-30},{0,-30},{0,-60},{0,-76},{0,-80},{0,-78},{0,
                        -80}}, color={255,0,0}),
                  Line(points={{80,-72},{80,-46},{20,-46},{20,-30}}, color={255,0,
                        0}),
                  Line(points={{80,76},{80,40},{20,40},{20,30}}, color={255,0,0}),
                  Text(
                    extent={{4,78},{40,36}},
                    lineColor={0,0,0},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid,
                    textString="LS"),
                  Text(
                    extent={{62,72},{96,30}},
                    lineColor={0,0,0},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid,
                    textString="T2")}),
                                      Diagram(graphics));
          end PartialV6_3LS;

          model V6_3Interface "Interface for 6-port 3-position valve"
            extends OpenHydraulics.Interfaces.PartialFluidComponent;

            // the ports
            OpenHydraulics.Interfaces.FluidPort portP1
              annotation (Placement(transformation(extent={{-90,-90},{-70,-70}},
                    rotation=0)));
            OpenHydraulics.Interfaces.FluidPort portA
              annotation (Placement(transformation(extent={{-90,70},{-70,90}},
                    rotation=0)));
            OpenHydraulics.Interfaces.FluidPort portT2
              annotation (Placement(transformation(extent={{70,-90},{90,-70}},
                    rotation=0)));
            OpenHydraulics.Interfaces.FluidPort portT1
              annotation (Placement(transformation(extent={{-10,70},{10,90}},
                    rotation=0)));
            OpenHydraulics.Interfaces.FluidPort portP
              annotation (Placement(transformation(extent={{-10,-90},{10,-70}},
                    rotation=0)));
            OpenHydraulics.Interfaces.FluidPort portB
              annotation (Placement(transformation(extent={{70,70},{90,90}},
                    rotation=0)));
            Modelica.Blocks.Interfaces.RealInput control
              annotation (Placement(transformation(
                  origin={106,0},
                  extent={{-16,-20},{16,20}},
                  rotation=180)));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={
                      {-100,-100},{100,100}}), graphics={
                  Rectangle(
                    extent={{90,20},{130,-20}},
                    lineColor={0,0,0},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Text(
                    extent={{48,96},{72,62}},
                    lineColor={0,0,0},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid,
                    textString="B"),
                  Text(
                    extent={{-74,96},{-46,62}},
                    lineColor={0,0,0},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid,
                    textString="A"),
                  Text(
                    extent={{38,-60},{72,-102}},
                    lineColor={0,0,0},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid,
                    textString="T2"),
                  Text(
                    extent={{-70,-58},{-34,-102}},
                    lineColor={0,0,0},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid,
                    textString="P1"),
                  Rectangle(
                    extent={{-90,30},{-30,-30}},
                    lineColor={0,0,0},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-30,30},{30,-30}},
                    lineColor={0,0,0},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{30,30},{90,-30}},
                    lineColor={0,0,0},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Text(
                    extent={{-20,-46},{4,-80}},
                    lineColor={0,0,0},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid,
                    textString="P"),
                  Text(
                    extent={{-20,76},{14,38}},
                    lineColor={0,0,0},
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid,
                    textString="T1"),
                  Line(points={{-80,70},{-80,40},{-20,40},{-20,30}}, color={255,0,
                        0}),
                  Line(points={{0,80},{0,60},{0,60},{0,30}}, color={255,0,0}),
                  Line(points={{80,80},{80,40},{20,40},{20,30}}, color={255,0,0}),
                  Line(points={{-80,-70},{-80,-40},{-20,-40},{-20,-30}}, color={
                        255,0,0}),
                  Line(points={{0,-30},{0,-60},{0,-60},{0,-60},{0,-60},{0,-60},{0,
                        -78}}, color={255,0,0}),
                  Line(points={{80,-78},{80,-40},{20,-40},{20,-30}}, color={255,0,
                        0})}),        Diagram(graphics));

          end V6_3Interface;
        end BaseClasses;
      end DirectionalValves;
    end Valves;

    package Volumes
      extends OpenHydraulics.Interfaces.VariantLibrary;

      model CircuitTank "Model for a Oil Tank"
        extends OpenHydraulics.Interfaces.PartialFluidComponent;

        // tank is a reservoir with two inputs!
        // two inputs are necessary to alow for taking cooling into account
        // inflowing fluid is mixed with fluid in the reservoir assuming perfect mixing
        // heat transfer occurs from this fluid to the environment (heat path not part of model)
        // We need to specify a preload pressure for the tank -- necessary boundary condition
        // we should allow for the initial temperature and quantity of the oil to be specified.

        // main parameters
        parameter SI.Volume V_max = 1 "Tank Volume"
          annotation(Dialog(tab="Sizing"));
        parameter SI.AbsolutePressure p_const = environment.p_ambient
        "preload pressure"
          annotation(Dialog(tab="Initialization"));
        parameter SI.Volume V_init = 0.1 "Initial Volume"
          annotation(Dialog(tab="Initialization"));

        // the connectors
        OpenHydraulics.Interfaces.FluidPort port_a
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}},
                rotation=0)));
        OpenHydraulics.Interfaces.FluidPort port_b
          annotation (Placement(transformation(extent={{110,-10},{90,10}},
                rotation=0)));

        // the components
        OpenHydraulics.Basic.VolumeOpen volumeOpen(final n_ports=2)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=0)));
      equation
        connect(port_a, volumeOpen.port[1]) annotation (Line(points={{-100,0},{0,
                0},{0,-0.575}}, color={255,0,0}));
        connect(port_b, volumeOpen.port[2]) annotation (Line(points={{100,0},{0,0},
                {0,0.475}}, color={255,0,0}));
        annotation (
          Diagram(graphics),
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                  100,100}}), graphics={
              Line(points={{-60,20},{-60,-80},{60,-80},{60,20}}, color={0,0,0}),
              Line(points={{-100,0},{-80,0},{-80,40},{-40,40},{-40,14}}, color={
                    255,0,0}),
              Line(points={{100,0},{80,0},{80,40},{40,40},{40,40},{40,-76}},
                  color={255,0,0}),
              Rectangle(
                extent={{-60,-40},{60,-80}},
                lineColor={0,0,0},
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-100,80},{100,40}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid,
                textString="%name")}));
      end CircuitTank;

      model Accumulator

        // The total amount of liquid that can be stored is defined by liquidVolume

        // the parameters
        parameter SI.Volume liquidVolume = 0.001 "Liquid Volume"
          annotation (Dialog(tab="Sizing"));
        parameter SI.Volume gasVolume = 0.0011
        "Gas Volume (must be larger than liquid volume)"
          annotation (Dialog(tab="Sizing"));
        parameter SI.AbsolutePressure p_precharge = 101325
        "Gas precharge pressure"
          annotation (Dialog(tab="Sizing"));
        parameter SI.AbsolutePressure p_max = 3e7 "Maximum rated pressure"
          annotation (Dialog(tab="Sizing"));

        // Advanced parameters

        // default residual is 2% of the total volume
        parameter SI.Volume residualVolLiquid = liquidVolume*0.02
        "Residual volume of liquid when accumulator is empty"
          annotation (Dialog(tab="Advanced"));
        parameter SI.Volume residualVolGas = gasVolume-liquidVolume
        "Residual volume of gas when accumulator is full"
          annotation (Dialog(tab="Advanced"));
        parameter SI.Mass pistonMass = 0.01 "Mass of bladder or piston"
          annotation (Dialog(tab="Advanced"));
        parameter Real pistonDamping(
          final unit="N/ (m/s)",
          final min=0) = 1 "Damping constant [N/ (m/s)] for bladder or piston"
          annotation (Dialog(tab="Advanced"));

          // initialization parameters
        parameter OpenHydraulics.Types.AccInit initType=OpenHydraulics.Types.AccInit.Pressure
        "Type of initialization (defines usage of start values below)"
          annotation (Dialog(tab="Initialization",group="Fluid"));
        parameter SI.Volume V_init = residualVolLiquid "Initial liquid volume"
          annotation (Dialog(tab="Initialization",group="Fluid"));

        // the components
        Basic.FluidPower2MechTrans liquidChamber(
          A=A,
          residualVolume=residualVolLiquid,
          maxPressure=p_max,
          n_ports=1)
          annotation (Placement(transformation(extent={{20,-10},{40,10}},
                rotation=0)));
        Basic.AirChamber gasChamber(
          V_precharge=gasVolume,
          p_precharge=p_precharge,
          A=A,
          residualVolume=residualVolGas,
          initializePressure = initType==OpenHydraulics.Types.AccInit.Pressure,
          p_init = p_init,
          V_init = gasVolume - V_init)
          annotation (Placement(transformation(extent={{-40,-10},{-20,10}},
                rotation=0)));
        Modelica.Mechanics.Translational.Components.Fixed fixedLeft(
                                                         s0=0.0)
          annotation (Placement(transformation(extent={{-70,-10},{-50,10}},
                rotation=0)));
        Modelica.Mechanics.Translational.Components.Fixed fixedRight(
                                                          final s0=liquidVolume/A)
          annotation (Placement(transformation(extent={{50,-10},{70,10}},
                rotation=0)));
        Modelica.Mechanics.Translational.Components.Mass slidingMass(
                                                                 m=pistonMass, final L=0)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=0)));
        Modelica.Mechanics.Translational.Components.Damper damper(
                                                       d=pistonDamping)
          annotation (Placement(transformation(extent={{-40,30},{-20,50}},
                rotation=0)));

        // the ports
        OpenHydraulics.Interfaces.FluidPort port_a
          annotation (Placement(transformation(extent={{-10,-110},{10,-90}},
                rotation=0)));

        extends OpenHydraulics.Interfaces.PartialFluidComponent(p_init=max(
              environment.p_ambient, p_precharge));
        // NOTE: from a behavioral perspective the surface area of the piston
        // is not really relevant.  We will therefore assume that it is
        // equal to the liquidVolume resulting in a total travel of the piston of 1m.
    protected
        parameter SI.Length Lnom=1 "Dummy nominal length";
        parameter SI.Area A=liquidVolume/Lnom;

      initial equation
        assert(gasVolume>liquidVolume,"gasVolume must be larger than liquidVolume");

      //  if initType == FluidPower.Types.AccInit.Volume then
      //    liquidChamber.s_rel = V_init/A;
      //  else
      //    liquidChamber.volMedium.p = p_init;
      //  end if;
      equation
        assert(gasChamber.p<p_max,"Pressure in accumulator exceeded p_max");
        connect(liquidChamber.flange_b,fixedRight.flange)
          annotation (Line(points={{40,0},{60,0}}, color={0,127,0}));
        connect(fixedLeft.flange,  gasChamber. flange_a)
          annotation (Line(points={{-60,0},{-40,0}}, color={0,127,0}));
        connect(port_a, liquidChamber.port[1]) annotation (Line(points={{0,-100},
                {0,-40},{30,-40},{30,-0.05}}, color={255,0,0}));

        connect(gasChamber.flange_b, slidingMass.flange_a)
          annotation (Line(points={{-20,0},{-10,0}}, color={0,127,0}));
        connect(slidingMass.flange_b, liquidChamber.flange_a)
          annotation (Line(points={{10,0},{20,0}}, color={0,127,0}));
        connect(damper.flange_b, slidingMass.flange_a) annotation (Line(points={{
                -20,40},{-16,40},{-16,0},{-10,0}}, color={0,127,0}));
        connect(damper.flange_a,fixedLeft.flange)    annotation (Line(points={{
                -40,40},{-50,40},{-50,0},{-60,0}}, color={0,127,0}));
          annotation (Diagram(graphics),            Icon(coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
              graphics={
              Rectangle(
                extent={{-40,100},{40,-80}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{0,-78},{0,-98}}, color={255,0,0}),
              Text(
                extent={{0,100},{0,66}},
                lineColor={0,0,255},
                textString="%name"),
              Ellipse(
                extent={{-28,-22},{28,-78}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-28,60},{28,4}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-30,32},{30,-48}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{-28,32},{-28,-52}}, color={0,0,0}),
              Line(points={{28,32},{28,-52}}, color={0,0,0}),
              Line(points={{-28,-14},{28,-14}}, color={0,0,0}),
              Polygon(
                points={{-6,0},{6,0},{0,-14},{-6,0}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}));
      end Accumulator;

      model Tank "Infinite volume tank"
        extends Basic.OpenTank;
      end Tank;
    end Volumes;
      annotation (Documentation(info="<html>
<h4><font color=\"#008000\" size=5>Overview</font></h4>  
<p>The OpenHydraulics/Components package includes models for typical hydraulic components.</p>
<h4><font color=\"#008000\" size=5>Licensing</font></h4>
<p>
The OpenHydraulics/Components package is licensed by Georgia Institute of Technology under the
<a href=\"http://www.modelica.org/licenses/ModelicaLicense2\"><b>Modelica License 2</b></a>.</p> 
<p><b>Copyright &copy; 2008-2013, Georgia Insitute of Technology</b>
</p>
<p>
This Modelica package is free software and the use is completely at your own risk; 
it can be redistributed and/or modified under the terms of the Modelica License 2. 
For license conditions (including the disclaimer of warranty) see 
<a href=\"modelica://Hydraulics.UsersGuide.ModelicaLicense2\">Hydraulics.UsersGuide.ModelicaLicense2</a> or visit 
<a href=\"http://www.modelica.org/licenses/ModelicaLicense2\">http://www.modelica.org/licenses/ModelicaLicense2</a>.
</p>
</html>
"));
  end Components;


  package Circuits "A collection of simple and complex hydraulic circuits"

    extends OpenHydraulics.Interfaces.VariantLibrary;

    model PressureCompensated

        extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      OpenHydraulics.Components.Valves.ReliefValve reliefValve
        annotation (Placement(transformation(extent={{0,-30},{20,-10}}, rotation=
                0)));

      OpenHydraulics.Components.Cylinders.DoubleActingCylinder doubleActingCylinder(
        boreDiameter=0.12,
        strokeLength=1,
        closedLength=1.2,
        rodDiameter=0.03,
        pistonMass=0.3,
        s_init=0.1,
        initType=Modelica.Mechanics.MultiBody.Types.Init.Position)
                    annotation (Placement(transformation(extent={{0,40},{20,60}},
              rotation=0)));

      Modelica.Mechanics.Translational.Components.Fixed fixed
        annotation (Placement(transformation(extent={{-20,38},{0,58}}, rotation=0)));
      Modelica.Blocks.Sources.Sine sine(amplitude=1,
        startTime=0,
        freqHz=0.1)
        annotation (Placement(transformation(
            origin={60,10},
            extent={{-10,-10},{10,10}},
            rotation=180)));
      Components.MotorsPumps.PCLSPump PCPump(
        Dmax=1e-5)
        annotation (Placement(transformation(extent={{-30,-60},{-10,-40}},
              rotation=0)));

      OpenHydraulics.Components.Volumes.CircuitTank circuitTank(V_max=2, V_init=1)
                                      annotation (Placement(transformation(extent=
               {{34,-70},{14,-50}}, rotation=0)));

      OpenHydraulics.Components.Valves.DirectionalValves.V4_3CC v4_3CC(
        portA(p(start=101325, fixed=true)),
        portB(p(start=101325, fixed=false)),
        portP(p(start=101325)),
        P2A(table=[0,0; 1,1]),
        B2T(table=[0,0; 1,1]),
        P2B(table=[-1,1; 0,0; 1,0]),
        A2T(table=[-1,1; 0,0]))
        annotation (Placement(transformation(extent={{0,0},{20,20}}, rotation=0)));

      OpenHydraulics.Components.Lines.NJunction j1
        annotation (Placement(transformation(extent={{-30,-30},{-10,-10}},
              rotation=0)));

      OpenHydraulics.Components.Lines.NJunction j2
        annotation (Placement(transformation(extent={{30,-30},{50,-10}}, rotation=
               0)));

      Modelica.Mechanics.Rotational.Sources.ConstantSpeed constantSpeed(
                                                                w_fixed=150,
          useSupport=false)
        annotation (Placement(transformation(extent={{-60,-60},{-40,-40}},
              rotation=0)));
      Modelica.Mechanics.Translational.Components.Mass slidingMass(
                                                               m=1000)
        annotation (Placement(transformation(extent={{28,40},{48,60}}, rotation=0)));
      OpenHydraulics.Components.Lines.NJunction j3
        annotation (Placement(transformation(extent={{-10,-70},{10,-50}},
              rotation=0)));

    equation
      connect(doubleActingCylinder.flange_a,fixed.flange)    annotation (Line(
            points={{0,50},{-10,50},{-10,48}}, color={0,127,0}));
      connect(v4_3CC.portA, doubleActingCylinder.port_a)    annotation (Line(
            points={{6,18},{6,28},{2,28},{2,42}}, color={255,0,0}));
      connect(v4_3CC.portB, doubleActingCylinder.port_b)    annotation (Line(
            points={{14,18},{14,28},{18,28},{18,42}}, color={255,0,0}));
      connect(v4_3CC.control, sine.y)    annotation (Line(points={{21,10},{35,10},
              {35,10},{49,10}}, color={0,0,127}));
      connect(reliefValve.port_a, j1.port[2]) annotation (Line(points={{0,-20},{0,
              -20},{-20,-20}}, color={255,0,0}));
      connect(circuitTank.port_a, j2.port[1]) annotation (Line(points={{34,-60},
            {40,-60},{40,-20.6667}},  color={255,0,0}));
      connect(reliefValve.port_b, j2.port[2]) annotation (Line(points={{20,-20},{
              40,-20},{40,-20}}, color={255,0,0}));
      connect(v4_3CC.portT, j2.port[3])    annotation (Line(points={{14,2},{14,
            0},{40,0},{40,-19.3333}},color={255,0,0}));
      connect(j1.port[3], v4_3CC.portP)    annotation (Line(points={{-20,
            -19.3333},{-20,0},{6,0},{6,2}},
                                    color={255,0,0}));
      connect(PCPump.portP, j1.port[1])   annotation (Line(points={{-20,-40},{
            -20,-20.6667}},
                          color={255,0,0}));
      connect(constantSpeed.flange, PCPump.flange_a)
        annotation (Line(points={{-40,-50},{-30,-50}}, color={0,0,0}));
      connect(slidingMass.flange_a, doubleActingCylinder.flange_b)
        annotation (Line(points={{28,50},{20,50}}, color={0,127,0}));
      connect(circuitTank.port_b, j3.port[3]) annotation (Line(points={{14,-60},
            {7,-60},{7,-59.3333},{0,-59.3333}},  color={255,0,0}));
      connect(PCPump.portT, j3.port[2]) annotation (Line(points={{-20,-60},{0,-60}},
            color={255,0,0}));
      connect(PCPump.portLS, j3.port[1]) annotation (Line(points={{-28,-58},{
            -28,-66},{0,-66},{0,-60.6667}},
                                          color={255,0,0}));
      annotation (Diagram(graphics),
        experiment(
          StopTime=10,
          NumberOfIntervals=5000,
          Tolerance=1e-008),
        experimentSetupOutput);
    end PressureCompensated;

    model PressureCompensatedLoadSensing
        extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      OpenHydraulics.Components.Valves.ReliefValve reliefValve
        annotation (Placement(transformation(
            origin={4,-20},
            extent={{-10,-10},{10,10}},
            rotation=270)));
      OpenHydraulics.Components.Cylinders.DoubleActingCylinder doubleActingCylinder(
        boreDiameter=0.12,
        strokeLength=1,
        closedLength=1.2,
        rodDiameter=0.03,
        pistonMass=0.3,
        s_init=0.1,
        initType=Modelica.Mechanics.MultiBody.Types.Init.Position)
                    annotation (Placement(transformation(extent={{44,30},{64,50}},
              rotation=0)));

      Modelica.Mechanics.Translational.Components.Fixed fixed
        annotation (Placement(transformation(extent={{0,20},{20,40}}, rotation=0)));
      Modelica.Blocks.Sources.Sine sine(amplitude=1,
        startTime=1,
        phase=0,
        freqHz=0.1)
        annotation (Placement(transformation(extent={{10,-82},{30,-62}}, rotation=
               0)));
      OpenHydraulics.Components.MotorsPumps.PCLSPump PCLSPump(Dmax=0.00004)
        annotation (Placement(transformation(extent={{-58,-32},{-38,-12}},
              rotation=0)));

      OpenHydraulics.Components.Volumes.CircuitTank circuitTank(V_max=2, V_init=1)
                                      annotation (Placement(transformation(extent=
               {{-6,-50},{-26,-30}}, rotation=0)));

      OpenHydraulics.Components.Valves.DirectionalValves.V4_3CCLSHydAntiCavitation
        valve4way3pos(
        portA(p(start=101325, fixed=true)),
        portB(p(start=101325, fixed=false)),
        portP(p(start=101325)),
        P2B(table=[-1,0.001; 0,0; 1,0]),
        P2A(table=[0,0; 1,0.001]))
        annotation (Placement(transformation(
            origin={36,-20},
            extent={{-10,-10},{10,10}},
            rotation=270)));

      OpenHydraulics.Components.Lines.NJunction j1
        annotation (Placement(transformation(extent={{-6,-6},{14,14}}, rotation=0)));

      OpenHydraulics.Components.Lines.NJunction j2
        annotation (Placement(transformation(extent={{-6,-50},{14,-30}}, rotation=
               0)));

      Modelica.Mechanics.Rotational.Sources.ConstantSpeed constantSpeed(
                                                                w_fixed=150,
          useSupport=false)
        annotation (Placement(transformation(extent={{-84,-30},{-68,-14}},
              rotation=0)));
      Modelica.Mechanics.Translational.Components.Mass slidingMass(
                                                               m=1000)
        annotation (Placement(transformation(extent={{78,30},{98,50}}, rotation=0)));

    equation
      connect(doubleActingCylinder.flange_a,fixed.flange)    annotation (Line(
            points={{44,40},{10,40},{10,30}}, color={0,127,0}));
      connect(valve4way3pos.portA, doubleActingCylinder.port_a)
                                                            annotation (Line(
            points={{44,-16},{46,-16},{46,32}}, color={255,0,0}));
      connect(valve4way3pos.portB, doubleActingCylinder.port_b)
                                                            annotation (Line(
            points={{44,-24},{62,-24},{62,32}}, color={255,0,0}));
      connect(valve4way3pos.control, sine.y)
                                         annotation (Line(points={{36,-31},{36,
              -72},{31,-72}}, color={0,0,127}));
      connect(reliefValve.port_a, j1.port[2]) annotation (Line(points={{4,-10},{4,
              -3.15625},{4,4},{4,4}}, color={255,0,0}));
      connect(circuitTank.port_a, j2.port[1]) annotation (Line(points={{-6,-40},
            {4,-40},{4,-40.6667}},  color={255,0,0}));
      connect(reliefValve.port_b, j2.port[2]) annotation (Line(points={{4,-30},{4,
              -35.025},{4,-40},{4,-40}}, color={255,0,0}));
      connect(valve4way3pos.portT, j2.port[3])
                                           annotation (Line(points={{28,-24},{
            20,-24},{20,-40},{4,-40},{4,-39.3333}},color={255,0,0}));
      connect(j1.port[3], valve4way3pos.portP)
                                           annotation (Line(points={{4,4.66667},
            {20,4.66667},{20,-16},{28,-16}},  color={255,0,0}));
      connect(PCLSPump.portP, j1.port[1]) annotation (Line(points={{-48,-12},{
            -48,4},{4,4},{4,3.33333}},
                                     color={255,0,0}));
      connect(constantSpeed.flange, PCLSPump.flange_a)
        annotation (Line(points={{-68,-22},{-58,-22}}, color={0,0,0}));
      connect(slidingMass.flange_a, doubleActingCylinder.flange_b) annotation (Line(
            points={{78,40},{64,40}}, color={0,127,0}));
      connect(valve4way3pos.portLS, PCLSPump.portLS) annotation (Line(points={{44,
              -20},{54,-20},{54,-56},{-56,-56},{-56,-30}}, color={255,0,0}));
      connect(PCLSPump.portT, circuitTank.port_b) annotation (Line(points={{-48,
              -32},{-48,-40},{-26,-40}}, color={255,0,0}));
      annotation (Diagram(graphics),
        experiment(StopTime=100),
        __Dymola_experimentSetupOutput);
    end PressureCompensatedLoadSensing;

    model Regenerative "Closed center regenerative circuit"

        extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      OpenHydraulics.Components.Valves.ReliefValve reliefValve
        annotation (Placement(transformation(
            origin={0,-20},
            extent={{-10,-10},{10,10}},
            rotation=270)));

      OpenHydraulics.Components.Cylinders.DoubleActingCylinder doubleActingCylinder(
        boreDiameter=0.12,
        closedLength=1.2,
        rodDiameter=0.03,
        pistonMass=0.3,
        s_init=0.1,
        initType=Modelica.Mechanics.MultiBody.Types.Init.Position,
        q_nom=1e-4,
        strokeLength=0.5)
                    annotation (Placement(transformation(extent={{44,30},{64,50}},
              rotation=0)));

      Modelica.Mechanics.Translational.Components.Fixed fixed
        annotation (Placement(transformation(extent={{0,20},{20,40}}, rotation=0)));
      Modelica.Mechanics.Translational.Components.Mass slidingMass(
                                                               m=1000)
        annotation (Placement(transformation(extent={{70,30},{90,50}}, rotation=0)));
      Modelica.Blocks.Sources.Sine sine(
        freqHz=0.1,
        amplitude=1,
        startTime=0)
        annotation (Placement(transformation(extent={{0,-80},{20,-60}}, rotation=
                0)));
      OpenHydraulics.Components.Volumes.CircuitTank circuitTank(V_max=2, V_init=1)
                                      annotation (Placement(transformation(extent=
               {{-10,-50},{-30,-30}}, rotation=0)));
      OpenHydraulics.Components.Lines.NJunction j1
        annotation (Placement(transformation(
            origin={0,0},
            extent={{-10,-10},{10,10}},
            rotation=90)));

      OpenHydraulics.Components.Lines.NJunction j2
        annotation (Placement(transformation(
            origin={0,-40},
            extent={{-10,-10},{10,10}},
            rotation=90)));

      Modelica.Mechanics.Rotational.Sources.ConstantSpeed constantSpeed(
                                                                w_fixed=50,
          useSupport=false)
        annotation (Placement(transformation(extent={{-84,-26},{-68,-10}},
              rotation=0)));
      OpenHydraulics.Components.Valves.DirectionalValves.V4_3CCRegenerative RegenValve
        annotation (Placement(transformation(
            origin={30,-18},
            extent={{-10,-10},{10,10}},
            rotation=270)));
      OpenHydraulics.Components.MotorsPumps.ConstantDisplacementPump constantDisplacementPump(Dconst=
            1e-5)
        annotation (Placement(transformation(extent={{-62,-28},{-42,-8}},
              rotation=0)));

    equation
      connect(doubleActingCylinder.flange_a,fixed.flange)    annotation (Line(
            points={{44,40},{10,40},{10,30}}, color={0,127,0}));
      connect(doubleActingCylinder.flange_b, slidingMass.flange_a)
        annotation (Line(points={{64,40},{70,40}}, color={0,127,0}));
      connect(reliefValve.port_a, j1.port[2]) annotation (Line(points={{
              1.83697e-015,-10},{1.83697e-015,0},{-5.55112e-017,0}}, color={255,0,
              0}));
      connect(circuitTank.port_a, j2.port[1]) annotation (Line(points={{-10,-40},
            {0.666667,-40},{0.666667,-40}},   color={255,0,0}));
      connect(reliefValve.port_b, j2.port[2]) annotation (Line(points={{
              -1.83697e-015,-30},{-1.83697e-015,-36},{-5.55112e-017,-36},{
              -5.55112e-017,-40}}, color={255,0,0}));
      connect(RegenValve.portA, doubleActingCylinder.port_a)    annotation (Line(
            points={{38,-14},{46,-14},{46,32}}, color={255,0,0}));
      connect(RegenValve.portB, doubleActingCylinder.port_b)    annotation (Line(
            points={{38,-22},{62,-22},{62,32}}, color={255,0,0}));
      connect(RegenValve.portT, j2.port[3])    annotation (Line(points={{22,-22},
            {20,-22},{20,-40},{-0.666667,-40}},   color={255,0,0}));
      connect(RegenValve.portP, j1.port[3])    annotation (Line(points={{22,-14},
            {20,-14},{20,0},{-0.666667,0}},   color={255,0,0}));
      connect(constantSpeed.flange, constantDisplacementPump.flange_a)
        annotation (Line(points={{-68,-18},{-62,-18}}, color={0,0,0}));
      connect(constantDisplacementPump.portP, j1.port[1]) annotation (Line(points={{-52,-8},
            {-52,0},{0.666667,0}},            color={255,0,0}));
      connect(sine.y, RegenValve.control) annotation (Line(points={{21,-70},{30,
              -70},{30,-29}}, color={0,0,127}));
      connect(constantDisplacementPump.portT, circuitTank.port_b) annotation (Line(
            points={{-52,-28},{-52,-40},{-30,-40}}, color={255,0,0}));
      annotation (Diagram(graphics),
        experiment(StopTime=100, Tolerance=1e-006),
        experimentSetupOutput);
    end Regenerative;

    model OpenCenter
    "Open Center circuit with fixed displacement pump and open center valve"

        extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      OpenHydraulics.Components.Valves.ReliefValve reliefValve
        annotation (Placement(transformation(
            origin={0,6},
            extent={{-10,-10},{10,10}},
            rotation=270)));

      OpenHydraulics.Components.Cylinders.DoubleActingCylinder doubleActingCylinder(
        boreDiameter=0.12,
        strokeLength=1,
        closedLength=1.2,
        rodDiameter=0.03,
        pistonMass=0.3,
        s_init=0.1,
        initType=Modelica.Mechanics.MultiBody.Types.Init.Position,
        q_nom=1e-4) annotation (Placement(transformation(extent={{42,38},{62,58}},
              rotation=0)));

      Modelica.Mechanics.Translational.Components.Fixed fixed
        annotation (Placement(transformation(
            origin={36,48},
            extent={{-10,-10},{10,10}},
            rotation=270)));
      Modelica.Mechanics.Translational.Components.Mass slidingMass(
                                                               m=1000)
        annotation (Placement(transformation(extent={{68,38},{88,58}}, rotation=0)));
      Modelica.Blocks.Sources.Sine sine(
        startTime=1,
        freqHz=0.1,
        amplitude=1)
        annotation (Placement(transformation(
            origin={80,-38},
            extent={{-10,-10},{10,10}},
            rotation=180)));
      OpenHydraulics.Components.Volumes.CircuitTank circuitTank(V_max=2, V_init=1)
                                      annotation (Placement(transformation(extent=
               {{-16,-24},{-36,-4}}, rotation=0)));
      OpenHydraulics.Components.Lines.NJunction j1(n_ports=3)
        annotation (Placement(transformation(
            origin={0,30},
            extent={{-10,-10},{10,10}},
            rotation=90)));

      OpenHydraulics.Components.Lines.NJunction j2
        annotation (Placement(transformation(extent={{-10,-24},{10,-4}}, rotation=
               0)));

      Modelica.Mechanics.Rotational.Sources.ConstantSpeed constantSpeed(
                                                                w_fixed=50,
          useSupport=false)
        annotation (Placement(transformation(extent={{-86,0},{-70,16}}, rotation=
                0)));
      OpenHydraulics.Components.Valves.DirectionalValves.V4_3OC valve4_3posOC
        annotation (Placement(transformation(
            origin={26,8},
            extent={{-10,-10},{10,10}},
            rotation=270)));
      OpenHydraulics.Components.MotorsPumps.ConstantDisplacementPump constantDisplacementPump(Dconst=
            1e-5)
        annotation (Placement(transformation(extent={{-64,-2},{-44,18}}, rotation=
               0)));

      Modelica.Blocks.Sources.Sine sine1(
        freqHz=0.1,
        startTime=9,
        phase=5.02658,
        amplitude=1)
        annotation (Placement(transformation(
            origin={80,-2},
            extent={{-10,-10},{10,10}},
            rotation=180)));
      Modelica.Blocks.Math.Add add(k2=-1) annotation (Placement(transformation(
            origin={50,-20},
            extent={{-10,-10},{10,10}},
            rotation=180)));
    equation
      connect(doubleActingCylinder.flange_a,fixed.flange)    annotation (Line(
            points={{42,48},{36,48}}, color={0,127,0}));
      connect(doubleActingCylinder.flange_b, slidingMass.flange_a)
        annotation (Line(points={{62,48},{68,48}}, color={0,127,0}));
      connect(reliefValve.port_a, j1.port[2]) annotation (Line(points={{
              1.83697e-015,16},{1.83697e-015,22},{-5.55112e-017,22},{
              -5.55112e-017,30}}, color={255,0,0}));
      connect(circuitTank.port_a, j2.port[1]) annotation (Line(points={{-16,-14},
            {0,-14},{0,-14.6667}},   color={255,0,0}));
      connect(reliefValve.port_b, j2.port[2]) annotation (Line(points={{
              -1.83697e-015,-4},{-1.83697e-015,-10},{0,-10},{0,-14}}, color={255,
              0,0}));
      connect(valve4_3posOC.portA, doubleActingCylinder.port_a) annotation (Line(
            points={{34,12},{44,12},{44,40}}, color={255,0,0}));
      connect(valve4_3posOC.portB, doubleActingCylinder.port_b) annotation (Line(
            points={{34,4},{60,4},{60,40}}, color={255,0,0}));
      connect(valve4_3posOC.portT, j2.port[3]) annotation (Line(points={{18,4},{
            18,-14},{0,-14},{0,-13.3333}},   color={255,0,0}));
      connect(valve4_3posOC.portP, j1.port[3]) annotation (Line(points={{18,12},
            {18,30},{-0.666667,30}},  color={255,0,0}));
      connect(constantSpeed.flange, constantDisplacementPump.flange_a)
        annotation (Line(points={{-70,8},{-64,8}}, color={0,0,0}));
      connect(constantDisplacementPump.portP, j1.port[1]) annotation (Line(points={{-54,18},
            {-54,30},{0.666667,30}},            color={255,0,0}));
      connect(sine.y, add.u1) annotation (Line(points={{69,-38},{64,-38},{64,-26},
              {62,-26}}, color={0,0,127}));
      connect(sine1.y, add.u2) annotation (Line(points={{69,-2},{64,-2},{64,-14},
              {62,-14}}, color={0,0,127}));
      connect(add.y, valve4_3posOC.control) annotation (Line(points={{39,-20},{26,
              -20},{26,-3}}, color={0,0,127}));
      connect(circuitTank.port_b, constantDisplacementPump.portT) annotation (Line(
            points={{-36,-14},{-54,-14},{-54,-2}}, color={255,0,0}));
      annotation (Diagram(graphics),
        experiment(StopTime=100, Tolerance=1e-008),
        experimentSetupOutput);
    end OpenCenter;

    model OpenCenter_tandem
    "Open Center circuit with fixed displacement pump and open center tandem valve"

        extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      OpenHydraulics.Components.Valves.ReliefValve reliefValve
        annotation (Placement(transformation(extent={{-10,-10},{10,10}}, rotation=
               0)));

      OpenHydraulics.Components.Cylinders.DoubleActingCylinder doubleActingCylinder(
        boreDiameter=0.12,
        strokeLength=1,
        closedLength=1.2,
        rodDiameter=0.03,
        pistonMass=0.3,
        s_init=0.1,
        initType=Modelica.Mechanics.MultiBody.Types.Init.Position)
                    annotation (Placement(transformation(extent={{-68,48},{-48,68}},
              rotation=0)));

      Modelica.Mechanics.Translational.Components.Fixed fixed
        annotation (Placement(transformation(extent={{-90,48},{-70,68}}, rotation=
               0)));
      Modelica.Mechanics.Translational.Components.Mass slidingMass(
                                                               m=1000)
        annotation (Placement(transformation(extent={{-44,48},{-24,68}}, rotation=
               0)));
      Modelica.Blocks.Sources.Sine sine(
        startTime=0,
        amplitude=1,
        offset=0,
        freqHz=0.1)
        annotation (Placement(transformation(
            origin={-10,88},
            extent={{-10,-10},{10,10}},
            rotation=270)));
      OpenHydraulics.Components.Volumes.CircuitTank circuitTank(V_max=2, V_init=1)
                                      annotation (Placement(transformation(extent=
               {{10,-50},{-10,-30}}, rotation=0)));

      OpenHydraulics.Components.Lines.NJunction j1(n_ports=4)
        annotation (Placement(transformation(extent={{-30,-10},{-10,10}},
              rotation=0)));

      OpenHydraulics.Components.Lines.NJunction j2(n_ports=4)
        annotation (Placement(transformation(extent={{10,-10},{30,10}}, rotation=
                0)));

      Modelica.Mechanics.Rotational.Sources.ConstantSpeed constantSpeed(
                                                                w_fixed=250,
          useSupport=false)
        annotation (Placement(transformation(extent={{-60,-30},{-40,-10}},
              rotation=0)));
      OpenHydraulics.Components.MotorsPumps.ConstantDisplacementPump constantDisplacementPump(Dconst=
            1e-5)
        annotation (Placement(transformation(extent={{-30,-30},{-10,-10}},
              rotation=0)));

      OpenHydraulics.Components.Valves.DirectionalValves.V4_3OCTandem valve4_3posOCtandem
        annotation (Placement(transformation(extent={{-70,18},{-50,38}}, rotation=
               0)));
      OpenHydraulics.Components.Cylinders.DoubleActingCylinder doubleActingCylinder1(
        boreDiameter=0.12,
        strokeLength=1,
        closedLength=1.2,
        rodDiameter=0.03,
        pistonMass=0.3,
        s_init=0.1,
        initType=Modelica.Mechanics.MultiBody.Types.Init.Position)
                    annotation (Placement(transformation(extent={{20,48},{40,68}},
              rotation=0)));

      Modelica.Mechanics.Translational.Components.Fixed fixed1
        annotation (Placement(transformation(extent={{0,48},{20,68}}, rotation=0)));
      OpenHydraulics.Components.Valves.DirectionalValves.V4_3OCTandem valve4_3posOCtandem1
        annotation (Placement(transformation(extent={{20,18},{40,38}}, rotation=0)));
      Modelica.Mechanics.Translational.Components.Mass slidingMass1(
                                                               m=1000)
        annotation (Placement(transformation(extent={{44,48},{64,68}}, rotation=0)));
      Modelica.Blocks.Sources.Constant const(k=0.5)
        annotation (Placement(transformation(
            origin={70,90},
            extent={{-10,-10},{10,10}},
            rotation=270)));
    equation
      connect(doubleActingCylinder.flange_a,fixed.flange)    annotation (Line(
            points={{-68,58},{-80,58}}, color={0,127,0}));
      connect(doubleActingCylinder.flange_b, slidingMass.flange_a)
        annotation (Line(points={{-48,58},{-44,58}}, color={0,127,0}));
      connect(reliefValve.port_a, j1.port[2]) annotation (Line(points={{-10,0},{
              -10,-0.25},{-20,-0.25}}, color={255,0,0}));
      connect(circuitTank.port_a, j2.port[1]) annotation (Line(points={{10,-40},{
              20,-40},{20,-0.75}}, color={255,0,0}));
      connect(reliefValve.port_b, j2.port[2]) annotation (Line(points={{10,0},{20,
              0},{20,-0.25}}, color={255,0,0}));
      connect(constantSpeed.flange, constantDisplacementPump.flange_a)
        annotation (Line(points={{-40,-20},{-30,-20}}, color={0,0,0}));
      connect(constantDisplacementPump.portP, j1.port[1]) annotation (Line(points=
             {{-20,-10},{-20,-0.75}}, color={255,0,0}));
      connect(valve4_3posOCtandem.portP, j1.port[3]) annotation (Line(points={{
              -64,20},{-64,0.25},{-20,0.25}}, color={255,0,0}));
      connect(valve4_3posOCtandem.portA, doubleActingCylinder.port_a) annotation (Line(
            points={{-64,36},{-64,40},{-66,40},{-66,50}}, color={255,0,0}));
      connect(valve4_3posOCtandem.portB, doubleActingCylinder.port_b) annotation (Line(
            points={{-56,36},{-56,50},{-50,50}}, color={255,0,0}));
      connect(valve4_3posOCtandem.control, sine.y) annotation (Line(points={{-49,28},
              {-10,28},{-10,77}},     color={0,0,127}));
      connect(constantDisplacementPump.portT, circuitTank.port_b) annotation (Line(
            points={{-20,-30},{-20,-40},{-10,-40}}, color={255,0,0}));
      connect(doubleActingCylinder1.flange_a,fixed1.flange)  annotation (Line(
            points={{20,58},{10,58}}, color={0,127,0}));
      connect(valve4_3posOCtandem1.portA, doubleActingCylinder1.port_a)
                                                                      annotation (Line(
            points={{26,36},{26,40},{22,40},{22,50}}, color={255,0,0}));
      connect(slidingMass1.flange_a, doubleActingCylinder1.flange_b)
        annotation (Line(points={{44,58},{40,58}}, color={0,127,0}));
      connect(valve4_3posOCtandem1.portB, doubleActingCylinder1.port_b)
        annotation (Line(points={{34,36},{34,40},{38,40},{38,50}}, color={255,0,0}));
      connect(const.y, valve4_3posOCtandem1.control) annotation (Line(points={{70,
              79},{70,28},{41,28}}, color={0,0,127}));
      connect(valve4_3posOCtandem.portT, j2.port[3]) annotation (Line(points={{
              -56,20},{-18,20},{20,8},{20,0.25}}, color={255,0,0}));
      connect(valve4_3posOCtandem1.portT, j2.port[4]) annotation (Line(points={{
              34,20},{34,0.75},{20,0.75}}, color={255,0,0}));
      connect(valve4_3posOCtandem1.portP, j1.port[4]) annotation (Line(points={{
              26,20},{20,20},{-20,8},{-20,0.75}}, color={255,0,0}));
      annotation (Diagram(graphics),
        experiment(StopTime=250, Tolerance=1e-008),
        experimentSetupOutput);
    end OpenCenter_tandem;

    model OpenCenterForceVelocityControl
    "Open Center circuit loaded and controlled by Force / Velocity controller"

        extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      OpenHydraulics.Components.Valves.ReliefValve reliefValve(timeConstant=0.01)
        annotation (Placement(transformation(
            origin={-10,-30},
            extent={{-10,-10},{10,10}},
            rotation=270)));

      OpenHydraulics.Components.Cylinders.DoubleActingCylinder doubleActingCylinder(
        boreDiameter=0.12,
        strokeLength=1,
        closedLength=1.2,
        rodDiameter=0.03,
        pistonMass=0.3,
        s_init=0.1,
        fixHeadPressure=true,
        fixRodPressure=true,
        initType=Modelica.Mechanics.MultiBody.Types.Init.PositionVelocity)
                    annotation (Placement(transformation(extent={{30,10},{48,30}},
              rotation=0)));

      Modelica.Mechanics.Translational.Components.Fixed fixed
        annotation (Placement(transformation(
            origin={24,20},
            extent={{-10,-10},{10,10}},
            rotation=270)));
      OpenHydraulics.Components.Volumes.CircuitTank circuitTank(V_max=2, V_init=1)
                                      annotation (Placement(transformation(extent=
               {{-20,-60},{-40,-40}}, rotation=0)));

      OpenHydraulics.Components.Lines.NJunction j1
        annotation (Placement(transformation(
            origin={-10,-10},
            extent={{-10,-10},{10,10}},
            rotation=90)));

      OpenHydraulics.Components.Lines.NJunction j2
        annotation (Placement(transformation(extent={{-20,-60},{0,-40}}, rotation=
               0)));

      Modelica.Mechanics.Rotational.Sources.ConstantSpeed constantSpeed(
                                                                w_fixed=250,
          useSupport=false)
        annotation (Placement(transformation(extent={{-100,-40},{-80,-20}},
              rotation=0)));
      Components.Valves.DirectionalValves.V4_3CC valve4_3posOCtandem
        annotation (Placement(transformation(
            origin={22,-30},
            extent={{-10,-10},{10,10}},
            rotation=270)));

      OpenHydraulics.Components.MotorsPumps.ConstantDisplacementPump constantDisplacementPump(Dconst=
            1e-4)
        annotation (Placement(transformation(extent={{-70,-40},{-50,-20}},
              rotation=0)));

      OpenHydraulics.Components.Sensors.FVController fVController(
        VelocityProfile(smoothness=Modelica.Blocks.Types.Smoothness.ContinuousDerivative,
            table=[0.0,0; 1,0; 2,0; 3,0.0001;4,0.0003;5,0.0002;6,0.0005;7,0.0001;8,
              0; 9,-0.0006;10,-0.0002;11,-0.0002;12,-0.00025;13,-0.00015;14,-0.0005;
              15,0; 16,0; 17,0.0009;18,0.0007;19,0.00005;20,0; 21,-0.0001;22,-0.00001;
              23,0; 24,0]),
        ForceProfile(table=[0.0,0; 1,0; 2,-10; 3,-200; 4,-200; 5,-50; 6,-10; 7,-30;
              8,0; 9,0; 10,60; 11,100; 12,100; 13,120; 14,0; 15,0; 16,-20; 17,-40;
              18,-80; 19,-80; 20,-500; 21,-100; 22,10; 23,0; 24,0]),
        k=300,
        Td=0.00001)   annotation (Placement(transformation(
            origin={70,-10},
            extent={{-10,-10},{10,10}},
            rotation=270)));
    equation
      connect(doubleActingCylinder.flange_a,fixed.flange)    annotation (Line(
            points={{30,20},{24,20}}, color={0,127,0}));
      connect(reliefValve.port_a, j1.port[2]) annotation (Line(points={{-10,-20},
              {-10,-15},{-10,-15},{-10,-10}}, color={255,0,0}));
      connect(circuitTank.port_a, j2.port[1]) annotation (Line(points={{-20,-50},
            {-10,-50},{-10,-50.6667}},   color={255,0,0}));
      connect(reliefValve.port_b, j2.port[2]) annotation (Line(points={{-10,-40},
              {-10,-45},{-10,-45},{-10,-50}}, color={255,0,0}));
      connect(valve4_3posOCtandem.portA, doubleActingCylinder.port_a)
                                                                annotation (Line(
            points={{30,-26},{32,-26},{32,12},{31.8,12}}, color={255,0,0}));
      connect(valve4_3posOCtandem.portB, doubleActingCylinder.port_b)
                                                                annotation (Line(
            points={{30,-34},{46,-34},{46,12},{46.2,12}}, color={255,0,0}));
      connect(valve4_3posOCtandem.portT, j2.port[3])
                                               annotation (Line(points={{14,-34},
            {12,-34},{12,-49.3333},{-10,-49.3333}},   color={255,0,0}));
      connect(valve4_3posOCtandem.portP, j1.port[3])
                                               annotation (Line(points={{14,-26},
            {12,-26},{12,-10},{-10.6667,-10}},   color={255,0,0}));
      connect(constantSpeed.flange, constantDisplacementPump.flange_a)
        annotation (Line(points={{-80,-30},{-70,-30}}, color={0,0,0}));
      connect(constantDisplacementPump.portP, j1.port[1]) annotation (Line(points={{-60,-20},
            {-60,-10},{-9.33333,-10}},             color={255,0,0}));
      connect(fVController.y, valve4_3posOCtandem.control)
                                                     annotation (Line(points={{67,-15},
              {67,-46},{22,-46},{22,-41}},      color={0,0,127}));
      connect(fVController.flange_a, doubleActingCylinder.flange_b) annotation (Line(
            points={{75,-5},{75,20},{48,20}}, color={0,127,0}));
      connect(constantDisplacementPump.portT, circuitTank.port_b) annotation (Line(
            points={{-60,-40},{-60,-50},{-40,-50}}, color={255,0,0}));
      annotation (Diagram(graphics),
        experiment(
          StopTime=25,
          NumberOfIntervals=5000,
          Tolerance=1e-008),
        experimentSetupOutput);
    end OpenCenterForceVelocityControl;

    model OpenCenterSectionalValveCircuit
    "Open center circuit controlled by sectional valve"
      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      Components.Lines.NJunction j1(
         n_ports=4)
        annotation (Placement(transformation(extent={{52,-90},{72,-70}}, rotation=
               0)));
      Components.Lines.NJunction j2
        annotation (Placement(transformation(extent={{-68,-50},{-48,-30}},
              rotation=0)));

      Components.MotorsPumps.ConstantDisplacementPump constantDisplacementPump(
        Dconst=1e-4)
        annotation (Placement(transformation(extent={{-68,-72},{-48,-52}},
              rotation=0)));

      Components.Volumes.CircuitTank circuitTank(
        V_max=0.025,
        V_init=0.02)                  annotation (Placement(transformation(extent=
               {{2,-90},{-18,-70}}, rotation=0)));

      replaceable Components.Valves.DirectionalValves.SV6_3OCParallel Valve1
        annotation (Placement(transformation(extent={{-40,-58},{-4,-22}},
              rotation=0)));

      replaceable Components.Valves.DirectionalValves.SV6_3OCParallel valve2
        annotation (Placement(transformation(extent={{12,-58},{48,-22}}, rotation=
               0)));

      Components.Valves.ReliefValve reliefValve(
        dp_relief=15e6,
        dp_open=25e6)
        annotation (Placement(transformation(
            origin={76,-58},
            extent={{-8,-8},{8,8}},
            rotation=270)));

      Modelica.Mechanics.Rotational.Sources.ConstantSpeed constantSpeed(
                                                                w_fixed=250,
          useSupport=false)
        annotation (Placement(transformation(extent={{-88,-72},{-68,-52}},
              rotation=0)));
      Components.Cylinders.DoubleActingCylinder doubleActingCylinder(
        boreDiameter=0.12,
        strokeLength=1,
        closedLength=1.2,
        rodDiameter=0.03,
        pistonMass=0.3,
        s_init=0.1,
        initType=Modelica.Mechanics.MultiBody.Types.Init.Position)
                    annotation (Placement(transformation(extent={{-48,0},{-28,20}},
              rotation=0)));

      Modelica.Mechanics.Translational.Components.Fixed fixed
        annotation (Placement(transformation(extent={{-78,0},{-58,20}}, rotation=
                0)));
      Modelica.Mechanics.Translational.Components.Mass slidingMass(
                                                               m=1000)
        annotation (Placement(transformation(extent={{-20,0},{0,20}}, rotation=0)));
      Components.Cylinders.DoubleActingCylinder doubleActingCylinder1(
        boreDiameter=0.12,
        strokeLength=1,
        closedLength=1.2,
        rodDiameter=0.03,
        pistonMass=0.3,
        s_init=0.1,
        initType=Modelica.Mechanics.MultiBody.Types.Init.Position)
                    annotation (Placement(transformation(extent={{36,0},{56,20}},
              rotation=0)));

      Modelica.Mechanics.Translational.Components.Fixed fixed1
        annotation (Placement(transformation(extent={{6,0},{26,20}}, rotation=0)));
      Modelica.Mechanics.Translational.Components.Mass slidingMass1(
                                                               m=1000)
        annotation (Placement(transformation(extent={{64,0},{84,20}}, rotation=0)));
      Modelica.Blocks.Sources.Sine sine(
        startTime=0,
        freqHz=0.1,
        amplitude=1)
        annotation (Placement(transformation(extent={{-86,-36},{-66,-16}},
              rotation=0)));
    equation
      connect(circuitTank.port_b,constantDisplacementPump. portT) annotation (Line(
            points={{-18,-80},{-58,-80},{-58,-72}}, color={255,0,0}));
      connect(circuitTank.port_a,j1. port[1]) annotation (Line(points={{2,-80},{
              62,-80},{62,-80.75}}, color={255,0,0}));
      connect(reliefValve.port_b,j1. port[4]) annotation (Line(points={{76,-66},{
              76,-79.25},{62,-79.25}}, color={255,0,0}));
      connect(valve2.T2_in, j1.port[2])                         annotation (Line(
            points={{46.2,-50.8},{62,-50.8},{62,-80.25}}, color={255,0,0}));
      connect(reliefValve.port_a, valve2.P1_out)
        annotation (Line(points={{76,-50},{76,-32.8},{46.2,-32.8}}, color={255,0,
              0}));
      connect(valve2.P2_out, j1.port[3])                         annotation (Line(
            points={{46.2,-40},{62,-40},{62,-79.75}}, color={255,0,0}));
      connect(constantDisplacementPump.portP,j2. port[1]) annotation (Line(points={{-58,-52},
            {-58,-40.6667}},             color={255,0,0}));
      connect(Valve1.P1_in, j2.port[2])     annotation (Line(points={{-38.2,-32.8},
              {-58,-32.8},{-58,-40}}, color={255,0,0}));
      connect(Valve1.P2_in, j2.port[3])     annotation (Line(points={{-38.2,-40},
            {-58,-40},{-58,-39.3333}},   color={255,0,0}));
      connect(Valve1.P2_out, valve2.P2_in) annotation (Line(points={{-5.8,-40},{
              13.8,-40}}, color={255,0,0}));
      connect(Valve1.T2_in, valve2.T2_out) annotation (Line(points={{-5.8,-50.8},
              {13.8,-50.8}}, color={255,0,0}));
      connect(constantSpeed.flange, constantDisplacementPump.flange_a)
        annotation (Line(points={{-68,-62},{-68,-62}}, color={0,0,0}));
      connect(doubleActingCylinder.flange_a,fixed.flange)    annotation (Line(
            points={{-48,10},{-68,10}}, color={0,127,0}));
      connect(slidingMass.flange_a,doubleActingCylinder. flange_b) annotation (Line(
            points={{-20,10},{-28,10}}, color={0,127,0}));
      connect(doubleActingCylinder.port_a, Valve1.A) annotation (Line(points={{
              -46,2},{-46,-18},{-29.2,-18},{-29.2,-23.8}}, color={255,0,0}));
      connect(doubleActingCylinder.port_b, Valve1.B) annotation (Line(points={{
              -30,2},{-30,-14},{-14.8,-14},{-14.8,-23.8}}, color={255,0,0}));
      connect(doubleActingCylinder1.flange_a,fixed1.flange)  annotation (Line(
            points={{36,10},{16,10}}, color={0,127,0}));
      connect(slidingMass1.flange_a, doubleActingCylinder1.flange_b)
                                                                   annotation (Line(
            points={{64,10},{56,10}}, color={0,127,0}));
      connect(valve2.A, doubleActingCylinder1.port_a) annotation (Line(points={{
              22.8,-23.8},{22.8,-12},{38,-12},{38,2}}, color={255,0,0}));
      connect(valve2.B, doubleActingCylinder1.port_b) annotation (Line(points={{
              37.2,-23.8},{37.2,-18},{54,-18},{54,2}}, color={255,0,0}));
      connect(sine.y, Valve1.u[1]) annotation (Line(points={{-65,-26},{-48,-26},{
              -48,-56.2},{-28.3,-56.2}}, color={0,0,127}));
      connect(valve2.P1_in, Valve1.P1_out) annotation (Line(points={{13.8,-32.8},
              {-5.8,-32.8}}, color={255,0,0}));
      connect(Valve1.y, valve2.u) annotation (Line(points={{-16.6,-56.2},{23.7,
              -56.2}}, color={0,0,127}));
      annotation (Diagram(graphics),
        experiment(StopTime=250, Tolerance=1e-008),
        __Dymola_experimentSetupOutput);
    end OpenCenterSectionalValveCircuit;

    model Environment
    "models the atmospheric conditions in which the fluid power components are used"

      parameter SI.Temperature T_ambient = 288.15 "Ambient Temperature"
        annotation(Dialog(group="Ambient"));
      parameter SI.AbsolutePressure p_ambient = 101325 "Atmosperic Pressure"
        annotation(Dialog(group="Ambient"));
      annotation (
        defaultComponentName="environment",
        defaultComponentPrefixes="inner",
        missingInnerMessage="No \"environment\" component is defined. A default environment
component with 15degC and 101325Pa will be used. If this is not desired,
drag FluidPower.Environment into the top level of your model.",
        Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                100}}), graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,0},
              fillColor={215,215,215},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{0,86},{0,54}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString=" %name"),
            Text(
              extent={{0,2},{0,-20}},
              lineColor={255,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="p_amb = %p_ambient"),
            Text(
              extent={{0,-36},{0,-58}},
              lineColor={255,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString="T_amb = %T_ambient")}),
        Diagram(graphics={
            Text(
              extent={{0,86},{0,54}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString=
                   " %name"),
            Text(
              extent={{0,2},{0,-20}},
              lineColor={255,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString=
                   "p_amb = %p_ambient"),
            Text(
              extent={{0,-36},{0,-58}},
              lineColor={255,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              textString=
                   "T_amb = %T_ambient")}));
    end Environment;
      annotation (Documentation(info="<html>
<h4><font color=\"#008000\" size=5>Overview</font></h4>  
<p>The OpenHydraulics/Circuits package includes a collection of simple and complex hydraulic circuits.</p>
<h4><font color=\"#008000\" size=5>Licensing</font></h4>
<p>
The OpenHydraulics/Circuits package is licensed by Georgia Institute of Technology under the
<a href=\"http://www.modelica.org/licenses/ModelicaLicense2\"><b>Modelica License 2</b></a>.</p> 
<p><b>Copyright &copy; 2008-2013, Georgia Insitute of Technology</b>
</p>
<p>
This Modelica package is free software and the use is completely at your own risk; 
it can be redistributed and/or modified under the terms of the Modelica License 2. 
For license conditions (including the disclaimer of warranty) see 
<a href=\"modelica://Hydraulics.UsersGuide.ModelicaLicense2\">Hydraulics.UsersGuide.ModelicaLicense2</a> or visit 
<a href=\"http://www.modelica.org/licenses/ModelicaLicense2\">http://www.modelica.org/licenses/ModelicaLicense2</a>.
</p>
</html>
"));
  end Circuits;


  package Fluids "models of hydraulic fluids"
    extends OpenHydraulics.Interfaces.VariantLibrary;

    model GenericOil "Generic Oil model"

      extends OpenHydraulics.Fluids.BaseClasses.PartialFluid(final oilName="GenericOil");

      // Constants to be set in actual Medium
      constant SI.AbsolutePressure p0=101325
      "Reference pressure of Medium: default 1 atmosphere";
      constant SI.Temperature T0=273.15 "reference Temperature";

      /*
   * update the following model for specific Oils
   */

      redeclare final function extends density
      "Return density as a function of p and T (Tait equation)"
        extends Modelica.Icons.Function;
    protected
       SI.BulkModulus K0 "Temperature-dependent bulk modulus";
       constant SI.BulkModulus K00 = 8.4e9 "Bulk modulus at 0K";
       constant Real K0prime = 10.9 "Constant in Tait equation";
       constant Real betaK(final unit="1/K")=0.0058 "Temp coefficient";
       constant Real aV(final unit="1/K")=7.7e-4 "Therm. exp. coef.";
       constant SI.Density d0 = 870 "Reference density at p0 and T0";
      algorithm
       K0 := K00*Modelica.Math.exp(-betaK*Toperating);
       d  := d0/(1+aV*(Toperating-T0))/
             (1-Modelica.Math.log(1+p*(1+K0prime)/K0)/(1+K0prime));
      end density;

      redeclare final function extends dynamicViscosity
        extends Modelica.Icons.Function;

        constant Real A = 9.32;
        constant Real B = 3.65;
        // approximately an ISO VG 46 oil
      algorithm
        // this viscosity model is based on the Walther equation for kinematic
        // viscosity (from ASTM D341): log(log(v + 0.7)) = A - B log T
        //    v is the kinematic viscosity in cSt
        //    T is the temperature in K
        //    log is base 10 log
        // translated into SI units and multiplied by the density, we get:
        eta := (10^(10^(A-B*Modelica.Math.log10(Toperating)))-0.7)*1e-6*density(p);
        annotation (smoothOrder=2);
      end dynamicViscosity;

    annotation (
      Documentation(info="<HTML>
<h3><font color=\"#008000\" size=5>Generic Oil Model</font></h3>
<p>
Oil model that includes temperature and pressure dependence for density and dynamic viscosity.
</p>
</HTML>"));
    end GenericOil;

    model GenericOilSimple "Template for Fluid Model"

      extends OpenHydraulics.Fluids.BaseClasses.PartialFluid(final oilName="GenericOilSimple");

      // Constants to be set in actual Medium
      constant SI.AbsolutePressure p0=101325
      "Reference pressure of Medium: default 1 atmosphere";
      constant SI.Temperature T0=273.15 "reference Temperature";

      /*
   * update the following model for specific Oils
   */
      redeclare final function extends density
      "Return density as a function of p and T"
        extends Modelica.Icons.Function;

      algorithm
        //   for some reason OpenModelica doesn't like this expression... will try to make it constant
        d := 870 + 5e-7*(p-p0);
        //    d := 870;
        annotation (smoothOrder=2);
      end density;

      redeclare final function extends dynamicViscosity
        extends Modelica.Icons.Function;

      algorithm
        eta := 0.036;
        annotation (smoothOrder=2);
      end dynamicViscosity;

    annotation (
      Documentation(info="<HTML>
<h3><font color=\"#008000\" size=5>Simple Linear Fluid Model</font></h3>
<p>
Oil model that includes temperature and pressure dependence for density and dynamic viscosity.
</p>
</HTML>"));
    end GenericOilSimple;

    package BaseClasses
      extends Modelica.Icons.BasesPackage;

      partial model PartialFluid "Partial fluid model for FluidPower library"

        parameter String oilName = "PartialFluid";

        parameter SI.Temperature Toperating= 293.15
        "Operating temperature of the oil";
      //  parameter SI.

        constant SI.Temperature T0=273.15 "Reference temperature";
        constant SI.AbsolutePressure p0 = 101325 "Reference pressure";

        replaceable function density "Return density as a function of p and T"
          extends Modelica.Icons.Function;
          input SI.AbsolutePressure p;
          output SI.Density d;
        end density;

        replaceable function dynamicViscosity
          extends Modelica.Icons.Function;
          input SI.AbsolutePressure p;
          output SI.DynamicViscosity eta;
        end dynamicViscosity;

        replaceable function approxBulkModulus
        "Bulk modulus to be used in approximate calculation; otherwise use density"
          extends Modelica.Icons.Function;

          input SI.AbsolutePressure p;
          output SI.BulkModulus B;
        algorithm
          B := if (density(p+1000)==density(p))
               then 1e9 else 1000/(density(p + 1000)/density(p) - 1);
        end approxBulkModulus;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}), graphics={
              Ellipse(
                extent={{-74,20},{6,-60}},
                lineColor={0,0,0},
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-34,80},{-70,-2},{2,-2},{-34,80}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Line(points={{2,-2},{-34,80},{-70,-2}}, color={0,0,0}),
              Ellipse(
                extent={{-6,34},{74,-46}},
                lineColor={0,0,0},
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{34,94},{-2,12},{70,12},{34,94}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Line(points={{70,12},{34,94},{-2,12}}, color={0,0,0}),
              Rectangle(extent={{-100,100},{100,-100}}, lineColor={0,0,0}),
              Text(
                extent={{0,-60},{0,-100}},
                lineColor={0,0,0},
                fillPattern=FillPattern.VerticalCylinder,
                textString="%name")}));

      end PartialFluid;
    end BaseClasses;
      annotation (Documentation(info="<html>
<h4><font color=\"#008000\" size=5>Overview</font></h4>  
<p>The OpenHydraulics/Fluids package includes several models of hydraulic fluids.</p>
<h4><font color=\"#008000\" size=5>Licensing</font></h4>
<p>
The OpenHydraulics/Fluids package is licensed by Georgia Institute of Technology under the
<a href=\"http://www.modelica.org/licenses/ModelicaLicense2\"><b>Modelica License 2</b></a>.</p> 
<p><b>Copyright &copy; 2008-2013, Georgia Insitute of Technology</b>
</p>
<p>
This Modelica package is free software and the use is completely at your own risk; 
it can be redistributed and/or modified under the terms of the Modelica License 2. 
For license conditions (including the disclaimer of warranty) see 
<a href=\"modelica://Hydraulics.UsersGuide.ModelicaLicense2\">Hydraulics.UsersGuide.ModelicaLicense2</a> or visit 
<a href=\"http://www.modelica.org/licenses/ModelicaLicense2\">http://www.modelica.org/licenses/ModelicaLicense2</a>.
</p>
</html>
"));
  end Fluids;


  package DevelopmentTests "Models used for unit testing during development"
    extends Modelica.Icons.Package;

    model PumpTest "AccuTest"

      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      parameter Real dispFraction = 1;
      parameter Real Cv = 60000 "Coefficient of viscous drag";
      parameter Real Cf = 0.007
      "Coefficient of Coulomb friction (fraction of full stroke torque)";
      parameter Real Cs = 1.8e-9 "Leakage coefficient";
      parameter Real Vr = 0.54 "Volume ratio of pump or motor";
      parameter SI.DynamicViscosity mu = oil.dynamicViscosity(5e6)
      "Dynamic viscosity (used only for efficiency models)";
      parameter SI.BulkModulus B = oil.approxBulkModulus(5e6)
      "Approximate bulk modulus (used only for efficiency models)";

      // efficiencies
      Real volumetricEfficiency2500;
      Real mechanicalEfficiency2500;
      Real energyEfficiency2500;
      Real volumetricEfficiency5000;
      Real mechanicalEfficiency5000;
      Real energyEfficiency5000;

      // mechanical components

      OpenHydraulics.Components.MotorsPumps.VariableDisplacementPump variableDisplacementPump(
        Dmax=0.000028,
        Dmin=-0.000028,
        Cv=Cv,
        Cf=Cf,
        Cs=Cs,
        Vr=Vr,
        mu=mu,
        B=B)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}}, rotation=
               0)));

      Basic.ConstPressureSource lowPressure(
           p_const=1e5)
        annotation (Placement(transformation(extent={{-10,-52},{10,-32}},
              rotation=0)));
      Basic.ConstPressureSource highPressure(
           p_const=346e5)
        annotation (Placement(transformation(
            origin={0,42},
            extent={{-10,-10},{10,10}},
            rotation=180)));
      Modelica.Blocks.Sources.RealExpression realExpression(y=dispFraction)
        annotation (Placement(transformation(extent={{-58,-38},{-38,-18}},
              rotation=0)));
      OpenHydraulics.Components.MotorsPumps.VariableDisplacementPump variableDisplacementPump1(
        Dmax=0.000028,
        Dmin=-0.000028,
        Cv=Cv,
        Cf=Cf,
        Cs=Cs,
        Vr=Vr,
        mu=mu,
        B=B)
        annotation (Placement(transformation(extent={{20,-10},{40,10}}, rotation=
                0)));

      Basic.ConstPressureSource lowPressure1(
           p_const=1e5)
        annotation (Placement(transformation(extent={{20,-52},{40,-32}}, rotation=
               0)));
      Basic.ConstPressureSource highPressure1(
           p_const=171e5)
        annotation (Placement(transformation(
            origin={30,42},
            extent={{-10,-10},{10,10}},
            rotation=180)));
      Modelica.Mechanics.Rotational.Sources.ConstantSpeed constantSpeed(
                                                                w_fixed=250,
          useSupport=false)
        annotation (Placement(transformation(extent={{-60,-10},{-40,10}},
              rotation=0)));
    equation
      // compute the efficiencies
      volumetricEfficiency5000 = (variableDisplacementPump.fluidPower2MechRot.q_flow_a-
                              variableDisplacementPump.leakage_P2T.q_flow_a) /
                              variableDisplacementPump.fluidPower2MechRot.q_flow_a;
      mechanicalEfficiency5000 = variableDisplacementPump.fluidPower2MechRot.tau/
                             variableDisplacementPump.flange_a.tau;
      energyEfficiency5000 = volumetricEfficiency5000 * mechanicalEfficiency5000;
      volumetricEfficiency2500 = (variableDisplacementPump1.fluidPower2MechRot.q_flow_a-
                              variableDisplacementPump1.leakage_P2T.q_flow_a) /
                              variableDisplacementPump1.fluidPower2MechRot.q_flow_a;
      mechanicalEfficiency2500 = variableDisplacementPump1.fluidPower2MechRot.tau/
                             variableDisplacementPump1.flange_a.tau;
      energyEfficiency2500 = volumetricEfficiency2500 * mechanicalEfficiency2500;

      connect(variableDisplacementPump.portT, lowPressure.port)
        annotation (Line(points={{0,-10},{0,-32}}, color={255,0,0}));
      connect(realExpression.y, variableDisplacementPump.dispFraction) annotation (Line(
            points={{-37,-28},{-18,-28},{-18,-8},{-8.4,-8}}, color={0,0,127}));
      connect(highPressure.port, variableDisplacementPump.portP)
                                                            annotation (Line(
            points={{-1.22465e-015,32},{-1.22465e-015,22},{0,22},{0,10}}, color={
              255,0,0}));
      connect(variableDisplacementPump1.portT, lowPressure1.port)
        annotation (Line(points={{30,-10},{30,-32}}, color={255,0,0}));

      connect(highPressure1.port, variableDisplacementPump1.portP)
                                                            annotation (Line(
            points={{30,32},{30,10}}, color={255,0,0}));
      connect(realExpression.y, variableDisplacementPump1.dispFraction) annotation (Line(
            points={{-37,-28},{14,-28},{14,-8},{21.6,-8}}, color={0,0,127}));
      connect(constantSpeed.flange, variableDisplacementPump.flange_a)
        annotation (Line(points={{-40,0},{-10,0}}, color={0,0,0}));
      connect(constantSpeed.flange, variableDisplacementPump1.flange_a) annotation (Line(
            points={{-40,0},{-20,0},{-20,16},{14,16},{14,0},{20,0}}, color={0,0,0}));
      annotation (Diagram(graphics),
        experiment(StartTime=0.05, NumberOfIntervals=5000),
        experimentSetupOutput);
    end PumpTest;

    model PumpTestSimple

      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      Basic.FluidPower2MechRotConst idealPump
                           annotation (Placement(transformation(
            origin={-20,0},
            extent={{10,10},{-10,-10}},
            rotation=180)));
      Basic.FluidPower2MechRotVar idealPump1
                                   annotation (Placement(transformation(
            origin={20,0},
            extent={{10,10},{-10,-10}},
            rotation=180)));
      Modelica.Blocks.Sources.Sine sine(
        freqHz=0.01,
        amplitude=0.4,
        offset=0.6)
                annotation (Placement(transformation(extent={{76,-28},{56,-8}},
              rotation=0)));
      Basic.OpenTank tank annotation (Placement(transformation(extent={{-10,-64},
                {10,-44}}, rotation=0)));
      Basic.OpenTank tank1(  p_const=300000)
                                       annotation (Placement(transformation(
              extent={{-10,28},{10,48}}, rotation=0)));
      Modelica.Mechanics.Rotational.Sources.ConstantSpeed constantSpeed(
                                                                w_fixed=
            6.283185307, useSupport=false)
                         annotation (Placement(transformation(extent={{-60,-10},{
                -40,10}}, rotation=0)));
      OpenHydraulics.Components.Sensors.PressureSensor pressureSensor
        annotation (Placement(transformation(extent={{30,60},{50,80}}, rotation=0)));
      Components.Lines.NJunction j1(            n_ports=4)
        annotation (Placement(transformation(extent={{-10,50},{10,70}}, rotation=
                0)));
      Components.Lines.NJunction j2(            n_ports=3)
        annotation (Placement(transformation(extent={{-10,-40},{10,-20}},
              rotation=0)));
    equation
      connect(idealPump.flange_b, idealPump1.flange_a)
                                                     annotation (Line(points={{-10,
              -1.22465e-015},{0,-3.64618e-021},{0,1.22465e-015},{10,1.22465e-015}},
                              color={0,0,0}));
      connect(sine.y, idealPump1.dispFraction)
                                             annotation (Line(points={{55,-18},{2,
              -18},{2,-8},{11.5,-8},{11.5,-7.9}}, color={0,0,127}));
      connect(constantSpeed.flange, idealPump.flange_a) annotation (Line(points={{-40,0},
              {-35,0},{-35,1.22465e-015},{-30,1.22465e-015}},         color={0,0,
              0}));
      connect(idealPump.port_b, j1.port[1]) annotation (Line(points={{-20,10},{
              -20,60},{0,60},{0,59.25}}, color={255,0,0}));
      connect(tank1.port, j1.port[2])
        annotation (Line(points={{0,48},{0,59.75}}, color={255,0,0}));
      connect(idealPump1.port_b, j1.port[3]) annotation (Line(points={{20,10},{20,
              60},{0,60},{0,60.25}}, color={255,0,0}));
      connect(pressureSensor.port_a, j1.port[4]) annotation (Line(points={{40,60},
              {0,60},{0,60.75}}, color={255,0,0}));
      connect(tank.port, j2.port[2])
        annotation (Line(points={{0,-44},{0,-30}}, color={255,0,0}));
      connect(idealPump.port_a, j2.port[1]) annotation (Line(points={{-20,-10},{
              -20,-30},{0,-30},{0,-30.6667}}, color={255,0,0}));
      connect(idealPump1.port_a, j2.port[3]) annotation (Line(points={{20,-10},{
              20,-30},{0,-30},{0,-29.3333}}, color={255,0,0}));
    annotation ( Diagram(graphics),
        experiment(StopTime=1000),
        experimentSetupOutput);
    end PumpTestSimple;

    model LossyPumpTestSimple

      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      Basic.FluidPower2MechRotConst idealPump
                           annotation (Placement(transformation(
            origin={-20,0},
            extent={{10,10},{-10,-10}},
            rotation=180)));
      Components.MotorsPumps.PCLSPump idealPump1
                                   annotation (Placement(transformation(
            origin={20,0},
            extent={{10,10},{-10,-10}},
            rotation=180)));
      Modelica.Blocks.Sources.Sine sine(
        freqHz=0.01,
        amplitude=3e5,
        offset=4e5)
                annotation (Placement(transformation(extent={{80,-40},{60,-20}},
              rotation=0)));
      Basic.OpenTank tank      annotation (Placement(transformation(extent={{-10,-64},
                {10,-44}}, rotation=0)));
      Basic.OpenTank tank1(  p_const=300000)
                                       annotation (Placement(transformation(
              extent={{-10,28},{10,48}}, rotation=0)));
      Modelica.Mechanics.Rotational.Sources.ConstantSpeed constantSpeed(
                                                                w_fixed=
            6.283185307, useSupport=false)
                         annotation (Placement(transformation(extent={{-60,-10},{
                -40,10}}, rotation=0)));
      OpenHydraulics.Components.Sensors.PressureSensor pressureSensor
        annotation (Placement(transformation(extent={{30,60},{50,80}}, rotation=0)));
      Components.Lines.NJunction j1(            n_ports=4)
        annotation (Placement(transformation(extent={{-10,50},{10,70}}, rotation=
                0)));
      Components.Lines.NJunction j2(            n_ports=3)
        annotation (Placement(transformation(extent={{-10,-40},{10,-20}},
              rotation=0)));
      OpenHydraulics.Basic.VarPressureSource varPressureSource
        annotation (Placement(transformation(extent={{50,-40},{30,-20}}, rotation=
               0)));
      Components.Volumes.Accumulator accumulator
            annotation (Placement(transformation(
              extent={{10,20},{30,40}}, rotation=0)));
    equation
      connect(idealPump.flange_b, idealPump1.flange_a)
                                                     annotation (Line(points={{-10,
              -1.22465e-015},{0,-3.64618e-021},{0,1.22465e-015},{10,1.22465e-015}},
                              color={0,0,0}));
      connect(constantSpeed.flange, idealPump.flange_a) annotation (Line(points={{-40,0},
              {-35,0},{-35,1.22465e-015},{-30,1.22465e-015}},         color={0,0,
              0}));
      connect(idealPump.port_b, j1.port[1]) annotation (Line(points={{-20,10},{
              -20,60},{0,60},{0,59.25}}, color={255,0,0}));
      connect(tank1.port, j1.port[2])
        annotation (Line(points={{0,48},{0,59.75}}, color={255,0,0}));
      connect(pressureSensor.port_a, j1.port[4]) annotation (Line(points={{40,60},
              {0,60},{0,60.75}}, color={255,0,0}));
      connect(tank.port, j2.port[2])
        annotation (Line(points={{0,-44},{0,-30}}, color={255,0,0}));
      connect(idealPump.port_a, j2.port[1]) annotation (Line(points={{-20,-10},{
              -20,-30},{0,-30},{0,-30.6667}}, color={255,0,0}));
      connect(idealPump1.portT, j2.port[3]) annotation (Line(points={{20,-10},{20,
              -29.3333},{0,-29.3333}}, color={255,0,0}));
      connect(sine.y, varPressureSource.control) annotation (Line(points={{59,-30},
              {50,-30}}, color={0,0,127}));
      connect(varPressureSource.port, idealPump1.portLS) annotation (Line(points={{40,-20},
              {12,-20},{12,-8}},           color={255,0,0}));
      connect(accumulator.port_a, idealPump1.portP)
        annotation (Line(points={{20,20},{20,10}}, color={255,0,0}));
    annotation ( Diagram(graphics),
        experiment(StopTime=1000),
        experimentSetupOutput);
    end LossyPumpTestSimple;

    model GenericRestrictionTest

      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      OpenHydraulics.Basic.FluidPower2MechRotConst idealPump(port_b(p(start=2e5)))
                           annotation (Placement(transformation(extent={{-30,-10},
                {-10,10}}, rotation=0)));

      Basic.GenericPressureLoss GenericRestriction(D_a=0.01,D_b=0.01,
        use_Re=true)
        annotation (Placement(transformation(
            origin={20,0},
            extent={{-10,-10},{10,10}},
            rotation=90)));
      Modelica.Blocks.Sources.Sine sinusoid(
        startTime=0.01,
        freqHz=0.5,
        amplitude=10)
        annotation (Placement(transformation(extent={{-94,-10},{-74,10}},
              rotation=0)));
      OpenHydraulics.Components.Volumes.CircuitTank circuitTank(V_max=2000,
          V_init=1000)
        annotation (Placement(transformation(extent={{0,-40},{-20,-20}}, rotation=
               0)));
      Modelica.Mechanics.Rotational.Sources.Torque torque
        annotation (Placement(transformation(extent={{-60,-10},{-40,10}},
              rotation=0)));
    equation
      connect(idealPump.port_a, circuitTank.port_b) annotation (Line(points={{-20,
              -10},{-20,-30}}, color={255,0,0}));
      connect(idealPump.port_b, GenericRestriction.port_b)
                                                   annotation (Line(points={{-20,
              10},{-20,20},{20,20},{20,10}}, color={255,0,0}));
      connect(GenericRestriction.port_a, circuitTank.port_a)
                                                     annotation (Line(points={{20,
              -10},{20,-30},{0,-30}}, color={255,0,0}));
      connect(sinusoid.y, torque.tau)
        annotation (Line(points={{-73,0},{-62,0}}, color={0,0,127}));
      connect(torque.flange,   idealPump.flange_a)
        annotation (Line(points={{-40,0},{-30,0}}, color={0,0,0}));
      annotation (Diagram(graphics),
        experiment(StopTime=10),
        experimentSetupOutput);
    end GenericRestrictionTest;

    model GenericRestrictionTestOpenTank

      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      OpenHydraulics.Basic.FluidPower2MechRotConst idealPump(port_b(p(start=2e5)))
                           annotation (Placement(transformation(extent={{-30,-10},
                {-10,10}}, rotation=0)));

      Basic.LaminarRestriction             GenericRestriction(L=3)
        annotation (Placement(transformation(
            origin={20,0},
            extent={{-10,-10},{10,10}},
            rotation=90)));
      Modelica.Blocks.Sources.Sine sinusoid(
        startTime=0.01,
        freqHz=0.5,
        amplitude=10)
        annotation (Placement(transformation(extent={{-94,-10},{-74,10}},
              rotation=0)));
      Modelica.Mechanics.Rotational.Sources.Torque torque
        annotation (Placement(transformation(extent={{-60,-10},{-40,10}},
              rotation=0)));
      Components.Volumes.Tank tank(p_const=100000)
        annotation (Placement(transformation(extent={{-30,-40},{-10,-20}})));
      Components.Volumes.Tank tank1(p_const=100000)
        annotation (Placement(transformation(extent={{10,-40},{30,-20}})));
    equation
      connect(idealPump.port_b, GenericRestriction.port_b)
                                                   annotation (Line(points={{-20,
              10},{-20,20},{20,20},{20,10}}, color={255,0,0}));
      connect(sinusoid.y, torque.tau)
        annotation (Line(points={{-73,0},{-62,0}}, color={0,0,127}));
      connect(torque.flange,   idealPump.flange_a)
        annotation (Line(points={{-40,0},{-30,0}}, color={0,0,0}));
      connect(idealPump.port_a, tank.port) annotation (Line(
          points={{-20,-10},{-20,-20}},
          color={255,0,0},
          smooth=Smooth.None));
      connect(GenericRestriction.port_a, tank1.port) annotation (Line(
          points={{20,-10},{20,-20}},
          color={255,0,0},
          smooth=Smooth.None));
      annotation (
          Diagram(graphics),
        experiment(StopTime=10),
        experimentSetupOutput);
    end GenericRestrictionTestOpenTank;

    model WallFrictionTest

      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      OpenHydraulics.Basic.FluidPower2MechRotConst idealPump
                           annotation (Placement(transformation(extent={{-30,-10},
                {-10,10}}, rotation=0)));

      OpenHydraulics.Basic.WallFriction WallFriction(L=2, D=0.01)
        annotation (Placement(transformation(
            origin={20,0},
            extent={{-10,-10},{10,10}},
            rotation=270)));
      Modelica.Blocks.Sources.Sine sinusoid(
        startTime=0.01,
        freqHz=0.5,
        amplitude=10)
        annotation (Placement(transformation(extent={{-94,-10},{-74,10}},
              rotation=0)));
      OpenHydraulics.Components.Volumes.CircuitTank circuitTank(V_max=2000,
          V_init=1000)
        annotation (Placement(transformation(extent={{0,-40},{-20,-20}}, rotation=
               0)));
      Modelica.Mechanics.Rotational.Sources.Torque torque(useSupport=false)
        annotation (Placement(transformation(extent={{-60,-10},{-40,10}},
              rotation=0)));
    equation
      connect(idealPump.port_a, circuitTank.port_b) annotation (Line(points={{-20,
              -10},{-20,-30}}, color={255,0,0}));
      connect(sinusoid.y, torque.tau)
        annotation (Line(points={{-73,0},{-62,0}}, color={0,0,127}));
      connect(torque.flange,   idealPump.flange_a)
        annotation (Line(points={{-40,0},{-30,0}}, color={0,0,0}));
      connect(idealPump.port_b, WallFriction.port_a) annotation (Line(points={{-20,10},
              {-20,20},{20,20},{20,10}},         color={255,0,0}));
      connect(circuitTank.port_a, WallFriction.port_b) annotation (Line(points={{0,-30},
              {20,-30},{20,-10}},        color={255,0,0}));
      annotation (Diagram(graphics),
        experiment(StopTime=10, Tolerance=1e-008),
        experimentSetupOutput);
    end WallFrictionTest;

    model DirectionalValveTest

      Real quadratic "quadratic relationship for comparison";
      parameter Real constPos = 0.192;
      parameter Real constNeg = 3;
      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      OpenHydraulics.Basic.FluidPower2MechRotConst idealPump
                           annotation (Placement(transformation(extent={{-30,-10},
                {-10,10}}, rotation=0)));

      OpenHydraulics.Basic.SharpEdgedOrifice restriction(
        D_pipe=0.02,
        L=0.01,
        D_min=0.01,
        alpha=10,
        use_Re=true)
        annotation (Placement(transformation(
            origin={60,0},
            extent={{-10,-10},{10,10}},
            rotation=270)));

      OpenHydraulics.Components.Volumes.CircuitTank circuitTank(V_max=2000,
          V_init=1000)
        annotation (Placement(transformation(extent={{0,-40},{-20,-20}}, rotation=
               0)));
      Modelica.Mechanics.Rotational.Sources.Torque torque(useSupport=false)
        annotation (Placement(transformation(extent={{-60,-10},{-40,10}},
              rotation=0)));
      OpenHydraulics.Components.Valves.DirectionalValves.V4_3CC valve4_3pos
                                                                        annotation (Placement(transformation(
            origin={16,4},
            extent={{-10,-10},{10,10}},
            rotation=270)));
      Modelica.Blocks.Sources.Sine sinusoid1(
        freqHz=0.5,
        amplitude=1,
        startTime=0)
        annotation (Placement(transformation(
            origin={18,-56},
            extent={{-10,-10},{10,10}},
            rotation=90)));
      Modelica.Blocks.Sources.RealExpression realExpression(y=5000)
        annotation (Placement(transformation(extent={{-96,-10},{-76,10}},
              rotation=0)));
    equation
      quadratic = if restriction.dp>0 then sqrt(restriction.dp*constPos) else
                                           -sqrt(-restriction.dp*constNeg);

      connect(idealPump.port_a, circuitTank.port_b) annotation (Line(points={{-20,
              -10},{-20,-30}}, color={255,0,0}));
      connect(torque.flange,   idealPump.flange_a)
        annotation (Line(points={{-40,0},{-30,0}}, color={0,0,0}));
      connect(idealPump.port_b, valve4_3pos.portP) annotation (Line(points={{-20,10},
              {-20,16},{2,16},{2,8},{8,8}},     color={255,0,0}));
      connect(circuitTank.port_a, valve4_3pos.portT) annotation (Line(points={{0,-30},
              {0,1.33227e-015},{8,1.33227e-015}},      color={255,0,0}));
      connect(valve4_3pos.portA, restriction.port_a)  annotation (Line(points={{24,8},{
              42,8},{42,20},{60,20},{60,10}},        color={255,0,0}));
      connect(valve4_3pos.portB, restriction.port_b)  annotation (Line(points={{24,
              -1.77636e-015},{34,-1.77636e-015},{34,0},{42,0},{42,-18},{60,-18},
              {60,-10}}, color={255,0,0}));
      connect(sinusoid1.y, valve4_3pos.control) annotation (Line(points={{18,-45},
              {18,-7},{16,-7}}, color={0,0,127}));
      connect(realExpression.y, torque.tau)
        annotation (Line(points={{-75,0},{-62,0}}, color={0,0,127}));
      annotation (
          Diagram(graphics),
        experiment(StopTime=10, Tolerance=1e-008),
        experimentSetupOutput);
    end DirectionalValveTest;

    model ChamberTest

      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      Components.Volumes.Tank         tank(       p_const=200000)
                            annotation (Placement(transformation(extent={{-30,-40},
                {-10,-20}}, rotation=0)));
      OpenHydraulics.Basic.FluidPower2MechTrans cylinderChamber(s_rel(start=1,
            fixed=true), n_ports=2)
                        annotation (Placement(transformation(extent={{-30,40},{
                -10,60}}, rotation=0)));
      Modelica.Mechanics.Translational.Components.Fixed fixed
        annotation (Placement(transformation(extent={{-50,40},{-30,60}}, rotation=
               0)));
      Modelica.Mechanics.Translational.Components.Mass slidingMass(
                                                               m=100, v(start=-10,
            fixed=false))
        annotation (Placement(transformation(extent={{20,40},{40,60}}, rotation=0)));
      Components.Volumes.Tank         tank1         annotation (Placement(transformation(extent={{30,0},{
                50,20}}, rotation=0)));
      OpenHydraulics.Basic.LaminarRestriction leakage_A2B(L=0.01, D=1e-5)
        annotation (Placement(transformation(extent={{0,10},{20,30}}, rotation=0)));
    equation
      connect(fixed.flange,   cylinderChamber.flange_a) annotation (Line(points={
              {-40,50},{-30,50}}, color={0,127,0}));
      connect(cylinderChamber.flange_b, slidingMass.flange_a) annotation (Line(
            points={{-10,50},{20,50}}, color={0,127,0}));
      connect(tank.port, cylinderChamber.port[1]) annotation (Line(points={{-20,
              -20},{-20,49.425}}, color={255,0,0}));
      connect(leakage_A2B.port_b, tank1.port)
        annotation (Line(points={{20,20},{40,20}}, color={255,0,0}));
      connect(leakage_A2B.port_a, cylinderChamber.port[2]) annotation (Line(
            points={{0,20},{-18,20},{-18,50.475},{-20,50.475}}, color={255,0,0}));
    annotation ( Diagram(graphics),
        experiment(Tolerance=1e-008),
        experimentSetupOutput);
    end ChamberTest;

    model DoubleChamberTest

      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      OpenHydraulics.Basic.OpenTank tank(p_const=200000)
                            annotation (Placement(transformation(extent={{-30,-40},
                {-10,-20}}, rotation=0)));
      Modelica.Mechanics.Translational.Components.Fixed fixed
        annotation (Placement(transformation(extent={{-50,40},{-30,60}}, rotation=
               0)));
      Modelica.Mechanics.Translational.Components.Mass slidingMass(
                                                               m=100)
        annotation (Placement(transformation(extent={{20,40},{40,60}}, rotation=0)));
      OpenHydraulics.Basic.OpenTank tank1          annotation (Placement(transformation(extent={{30,0},{
                50,20}}, rotation=0)));
      Components.Cylinders.DoubleActingCylinder doubleActingCylinder(
        s_init=1,
        strokeLength=2,
        closedLength=3,
        damping=0,
        initType=Modelica.Mechanics.MultiBody.Types.Init.PositionVelocity,
        v_init=-0.1)    annotation (Placement(transformation(extent={{-22,40},{-2,
                60}}, rotation=0)));

    equation
      connect(fixed.flange,   doubleActingCylinder.flange_a)
        annotation (Line(points={{-40,50},{-22,50}}, color={0,127,0}));
      connect(doubleActingCylinder.flange_b, slidingMass.flange_a)
        annotation (Line(points={{-2,50},{20,50}}, color={0,127,0}));
      connect(doubleActingCylinder.port_a, tank.port)
        annotation (Line(points={{-20,42},{-20,-20}}, color={255,0,0}));
      connect(doubleActingCylinder.port_b, tank1.port) annotation (Line(points={{
              -4,42},{-4,20},{40,20}}, color={255,0,0}));
    annotation ( Diagram(graphics),
        experimentSetupOutput);
    end DoubleChamberTest;

    model AirChamberTest

      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      OpenHydraulics.Basic.AirChamber airChamber(
        A=0.01,
        V_precharge=0.005,
        residualVolume=0.001,
        p_precharge=101325,
        p_init=2000000) annotation (Placement(transformation(extent={{-50,-10},{
                -30,10}}, rotation=0)));
      Modelica.Mechanics.Translational.Components.Fixed fixed
        annotation (Placement(transformation(extent={{-70,-10},{-50,10}},
              rotation=0)));
      Modelica.Mechanics.Translational.Components.Mass slidingMass(
                                                               m=100, v(start=-10))
        annotation (Placement(transformation(extent={{0,-10},{20,10}}, rotation=0)));
    equation
      connect(fixed.flange,   airChamber.flange_a)      annotation (Line(points={
              {-60,0},{-50,0}}, color={0,127,0}));
      connect(airChamber.flange_b, slidingMass.flange_a)
        annotation (Line(points={{-30,0},{0,0}}, color={0,127,0}));
      annotation (Diagram(graphics));
    end AirChamberTest;

    model AccumulatorTest

      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      OpenHydraulics.Components.Volumes.Accumulator accumulator(p_precharge=100000)
        annotation (Placement(transformation(extent={{-20,20},{0,40}}, rotation=0)));
      OpenHydraulics.Basic.OpenTank tank(p_const=1e5)
                                         annotation (Placement(transformation(
              extent={{-20,-40},{0,-20}}, rotation=0)));
      OpenHydraulics.Basic.GenericPressureLoss restriction(
        D_b=0.01,
        Re_turbulent=2000,
        use_Re=true,
        D_a=0.01,
        zeta1=2,
        zeta2=2,
        zetaLaminarKnown=true,
        c0=0.1)
        annotation (Placement(transformation(
            origin={-10,-2},
            extent={{-10,-10},{10,10}},
            rotation=90)));
    equation
      connect(accumulator.port_a, restriction.port_b) annotation (Line(points={{
              -10,20},{-10,8}}, color={255,0,0}));
      connect(tank.port, restriction.port_a) annotation (Line(points={{-10,-20},{
              -10,-12}}, color={255,0,0}));
      annotation (Diagram(graphics));
    end AccumulatorTest;

    model AccumulatorTest2

      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      OpenHydraulics.Basic.FluidPower2MechRotConst idealConDispPump
        annotation (Placement(transformation(extent={{-10,0},{10,20}}, rotation=0)));
      Modelica.Mechanics.Rotational.Components.Inertia inertia(
                                                    J=0.001)
        annotation (Placement(transformation(extent={{24,0},{44,20}}, rotation=0)));
      Components.Volumes.Accumulator accumulator(
        liquidVolume=0.01,
        gasVolume=0.011,
        p_init=1e6) annotation (Placement(transformation(extent={{-10,38},{10,58}},
              rotation=0)));
      Components.Volumes.Accumulator accumulator1(
        liquidVolume=0.01,
        gasVolume=0.011,
        initType=OpenHydraulics.Types.AccInit.Pressure)
        annotation (Placement(transformation(
            origin={0,-32},
            extent={{-10,-10},{10,10}},
            rotation=180)));
    equation
      connect(idealConDispPump.flange_b, inertia.flange_a) annotation (Line(
            points={{10,10},{24,10}}, color={0,0,0}));
      connect(accumulator.port_a, idealConDispPump.port_b)
        annotation (Line(points={{0,38},{0,20}}, color={255,0,0}));
      connect(accumulator1.port_a, idealConDispPump.port_a) annotation (Line(
            points={{1.22465e-015,-22},{0,-22},{0,0}}, color={255,0,0}));
      annotation (Diagram(graphics));
    end AccumulatorTest2;

    model DoubleActingCylinderTestSimple1

      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      Modelica.Mechanics.Translational.Components.Fixed fixed
        annotation (Placement(transformation(extent={{-22,40},{-2,60}}, rotation=
                0)));
      Components.Cylinders.DoubleActingCylinder doubleActingCylinder(
        strokeLength=0.2,
        pistonMass=0.1,
        s_init=0.185)     annotation (Placement(transformation(extent={{22,40},{
                42,60}}, rotation=0)));
      Basic.FluidPower2MechRotConst pump(       Dconst=5e-5) annotation (Placement(transformation(extent={{-24,-46},
                {-4,-26}}, rotation=0)));
      Components.Volumes.CircuitTank circuitTank
        annotation (Placement(transformation(extent={{30,-90},{10,-70}}, rotation=
               0)));
      Modelica.Blocks.Sources.Ramp ramp(height=1000, duration=100)
        annotation (Placement(transformation(extent={{-74,-46},{-54,-26}},
              rotation=0)));
      Components.Valves.ReliefValve reliefValve
        annotation (Placement(transformation(
            origin={10,-46},
            extent={{-10,-10},{10,10}},
            rotation=270)));
      Modelica.Mechanics.Rotational.Sources.Position position(
                                                      f_crit=1, useSupport=false)
        annotation (Placement(transformation(extent={{-46,-46},{-26,-26}},
              rotation=0)));
      Components.Lines.Line lineA(
        L=2,
        D=0.01) annotation (Placement(transformation(
            origin={24,10},
            extent={{-10,-10},{10,10}},
            rotation=90)));
      Components.Lines.Line lineB(
        L=2,
        D=0.01) annotation (Placement(transformation(
            origin={40,10},
            extent={{-10,-10},{10,10}},
            rotation=90)));
      Components.Lines.NJunction j1
                annotation (Placement(transformation(extent={{0,-26},{20,-6}},
              rotation=0)));
      Components.Lines.NJunction j2
                annotation (Placement(transformation(extent={{30,-66},{50,-46}},
              rotation=0)));
    initial equation
      //reliefValve.port_a.p = 101325;

    equation
      connect(fixed.flange,   doubleActingCylinder.flange_a)
        annotation (Line(points={{-12,50},{22,50}}, color={0,127,0}));
      connect(pump.port_a,circuitTank. port_b) annotation (Line(points={{-14,-46},
              {-14,-80},{10,-80}}, color={255,0,0}));
      connect(ramp.y, position.phi_ref)
        annotation (Line(points={{-53,-36},{-48,-36}}, color={0,0,127}));
      connect(position.flange,   pump.flange_a)
        annotation (Line(points={{-26,-36},{-24,-36}}, color={0,0,0}));
      connect(lineA.port_b, doubleActingCylinder.port_a)
        annotation (Line(points={{24,20},{24,42}}, color={255,0,0}));
      connect(doubleActingCylinder.port_b, lineB.port_b)
        annotation (Line(points={{40,42},{40,20}}, color={255,0,0}));
      connect(pump.port_b, j1.port[1]) annotation (Line(points={{-14,-26},{-14,
              -16},{10,-16},{10,-16.6667}}, color={255,0,0}));
      connect(reliefValve.port_a, j1.port[2]) annotation (Line(points={{10,-36},{
              10,-26.025},{10,-16},{10,-16}}, color={255,0,0}));
      connect(lineA.port_a, j1.port[3]) annotation (Line(points={{24,0},{24,-16},
              {10,-16},{10,-15.3333}}, color={255,0,0}));
      connect(circuitTank.port_a, j2.port[1]) annotation (Line(points={{30,-80},{
              40,-80},{40,-56.6667}}, color={255,0,0}));
      connect(reliefValve.port_b, j2.port[2])
        annotation (Line(points={{10,-56},{25,-56},{25,-56},{40,-56}}, color={255,
              0,0}));
      connect(lineB.port_a, j2.port[3]) annotation (Line(points={{40,0},{40,
              -55.3333}}, color={255,0,0}));
    annotation ( Diagram(graphics),
        experiment(StopTime=10, Tolerance=1e-006),
        experimentSetupOutput);
    end DoubleActingCylinderTestSimple1;

    model DoubleActingCylinderTestSimple2

      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      Modelica.Mechanics.Translational.Components.Fixed fixed
        annotation (Placement(transformation(extent={{-22,40},{-2,60}}, rotation=
                0)));
      OpenHydraulics.Components.Cylinders.DoubleActingCylinder doubleActingCylinder(
        initType=Modelica.Mechanics.MultiBody.Types.Init.Position,
        strokeLength=0.2,
        pistonMass=0.1,
        s_init=0.185,
        q_nom=1e-4)       annotation (Placement(transformation(extent={{22,40},{
                42,60}}, rotation=0)));
      OpenHydraulics.Basic.FluidPower2MechRotConst pump(Dconst=5e-5)
                                                             annotation (Placement(transformation(extent={{-24,-46},
                {-4,-26}}, rotation=0)));
      OpenHydraulics.Components.Volumes.CircuitTank circuitTank
        annotation (Placement(transformation(extent={{30,-90},{10,-70}}, rotation=
               0)));
      Modelica.Blocks.Sources.Ramp ramp(height=1000, duration=100)
        annotation (Placement(transformation(extent={{-74,-46},{-54,-26}},
              rotation=0)));
      OpenHydraulics.Components.Valves.ReliefValve reliefValve
        annotation (Placement(transformation(
            origin={10,-46},
            extent={{-10,-10},{10,10}},
            rotation=270)));
      Modelica.Mechanics.Rotational.Sources.Position position(
                                                      f_crit=1, useSupport=false)
        annotation (Placement(transformation(extent={{-46,-46},{-26,-26}},
              rotation=0)));
      Components.Lines.NJunction j1(n_ports=3)  annotation (Placement(
            transformation(extent={{0,-26},{20,-6}}, rotation=0)));
      Components.Lines.NJunction j2(n_ports=3)
        annotation (Placement(transformation(extent={{30,-66},{50,-46}}, rotation=
               0)));
    initial equation
      //reliefValve.port_a.p = 101325;

    equation
      connect(fixed.flange,   doubleActingCylinder.flange_a)
        annotation (Line(points={{-12,50},{22,50}}, color={0,127,0}));
      connect(pump.port_a,circuitTank. port_b) annotation (Line(points={{-14,-46},
              {-14,-80},{10,-80}}, color={255,0,0}));
      connect(ramp.y, position.phi_ref)
        annotation (Line(points={{-53,-36},{-48,-36}}, color={0,0,127}));
      connect(position.flange,   pump.flange_a)
        annotation (Line(points={{-26,-36},{-24,-36}}, color={0,0,0}));
      connect(pump.port_b, j1.port[1]) annotation (Line(points={{-14,-26},{-14,
              -16},{10,-16},{10,-16.6667}}, color={255,0,0}));
      connect(reliefValve.port_a, j1.port[2]) annotation (Line(points={{10,-36},{
              10,-26.025},{10,-16},{10,-16}}, color={255,0,0}));
      connect(circuitTank.port_a, j2.port[1]) annotation (Line(points={{30,-80},{
              40,-80},{40,-56.6667}}, color={255,0,0}));
      connect(reliefValve.port_b, j2.port[2])
        annotation (Line(points={{10,-56},{25,-56},{25,-56},{40,-56}}, color={255,
              0,0}));
      connect(doubleActingCylinder.port_b, j2.port[3]) annotation (Line(points={{40,42},
              {40,-55.3333}},        color={255,0,0}));
      connect(doubleActingCylinder.port_a, j1.port[3]) annotation (Line(points={{24,42},
              {24,-16},{10,-16},{10,-15.3333}},        color={255,0,0}));
    annotation ( Diagram(graphics),
        experiment(StopTime=10, Tolerance=1e-008),
        experimentSetupOutput);
    end DoubleActingCylinderTestSimple2;

    model CheckValveTest

      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      OpenHydraulics.Basic.FluidPower2MechRotConst idealPump(port_b(p(start=2e5)))
                           annotation (Placement(transformation(extent={{-30,-10},
                {-10,10}}, rotation=0)));

      OpenHydraulics.Components.Valves.CheckValve checkValve(q_nom=0.001)
        annotation (Placement(transformation(
            origin={20,0},
            extent={{-10,-10},{10,10}},
            rotation=90)));
      Modelica.Blocks.Sources.Sine sinusoid(startTime=0.01)
        annotation (Placement(transformation(extent={{-94,-10},{-74,10}},
              rotation=0)));
      OpenHydraulics.Components.Volumes.CircuitTank circuitTank(V_max=2000,
          V_init=1000)
        annotation (Placement(transformation(extent={{0,-40},{-20,-20}}, rotation=
               0)));
      Modelica.Mechanics.Rotational.Sources.Torque torque(useSupport=false)
        annotation (Placement(transformation(extent={{-60,-10},{-40,10}},
              rotation=0)));
    equation
      connect(idealPump.port_a, circuitTank.port_b) annotation (Line(points={{-20,
              -10},{-20,-30}}, color={255,0,0}));
      connect(idealPump.port_b, checkValve.port_b) annotation (Line(points={{-20,
              10},{-20,20},{20,20},{20,10}}, color={255,0,0}));
      connect(checkValve.port_a, circuitTank.port_a) annotation (Line(points={{20,
              -10},{20,-30},{0,-30}}, color={255,0,0}));
      connect(sinusoid.y, torque.tau)
        annotation (Line(points={{-73,0},{-62,0}}, color={0,0,127}));
      connect(torque.flange,   idealPump.flange_a)
        annotation (Line(points={{-40,0},{-30,0}}, color={0,0,0}));
      annotation (Diagram(graphics),
        experiment(StopTime=5, Tolerance=1e-006),
        experimentSetupOutput);
    end CheckValveTest;

    model CheckValveTest2

      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      OpenHydraulics.Basic.FluidPower2MechRotConst idealPump(port_b(p(start=2e5)))
                           annotation (Placement(transformation(extent={{-30,-10},
                {-10,10}}, rotation=0)));

      OpenHydraulics.Components.Valves.CheckValve checkValve(q_nom=0.001)
        annotation (Placement(transformation(
            origin={20,-4},
            extent={{-10,-10},{10,10}},
            rotation=90)));
      Modelica.Blocks.Sources.Sine sinusoid(startTime=0.01)
        annotation (Placement(transformation(extent={{-94,-10},{-74,10}},
              rotation=0)));
      OpenHydraulics.Components.Volumes.CircuitTank circuitTank(V_max=2000,
          V_init=1000)
        annotation (Placement(transformation(extent={{0,-40},{-20,-20}}, rotation=
               0)));
      OpenHydraulics.Components.Valves.CheckValve checkValve1(q_nom=0.001)
        annotation (Placement(transformation(
            origin={40,-4},
            extent={{-10,-10},{10,10}},
            rotation=270)));
      Modelica.Mechanics.Rotational.Sources.Speed speed(useSupport=false)
        annotation (Placement(transformation(extent={{-60,-10},{-40,10}},
              rotation=0)));
      Components.Lines.NJunction j2(            n_ports=3)
        annotation (Placement(transformation(extent={{10,-40},{30,-20}}, rotation=
               0)));
      Components.Lines.NJunction j1(            n_ports=3)
        annotation (Placement(transformation(extent={{10,10},{30,30}}, rotation=0)));
    equation
      connect(idealPump.port_a, circuitTank.port_b) annotation (Line(points={{-20,
              -10},{-20,-30}}, color={255,0,0}));
      connect(speed.flange,   idealPump.flange_a)
        annotation (Line(points={{-40,0},{-30,0}}, color={0,0,0}));
      connect(sinusoid.y, speed.w_ref)
        annotation (Line(points={{-73,0},{-62,0}}, color={0,0,127}));
      connect(circuitTank.port_a, j2.port[1]) annotation (Line(points={{0,-30},{
              20,-30},{20,-30.6667}}, color={255,0,0}));
      connect(checkValve.port_a, j2.port[2]) annotation (Line(points={{20,-14},{
              20,-30}}, color={255,0,0}));
      connect(checkValve1.port_b, j2.port[3]) annotation (Line(points={{40,-14},{
              40,-30},{20,-30},{20,-29.3333}}, color={255,0,0}));
      connect(idealPump.port_b, j1.port[1]) annotation (Line(points={{-20,10},{
              -20,20},{20,20},{20,19.3333}}, color={255,0,0}));
      connect(checkValve.port_b, j1.port[2])
        annotation (Line(points={{20,6},{20,20}}, color={255,0,0}));
      connect(checkValve1.port_a, j1.port[3]) annotation (Line(points={{40,6},{40,
              20},{20,20},{20,20.6667}}, color={255,0,0}));
      annotation (Diagram(graphics),
        experiment(StopTime=5, Tolerance=1e-006),
        experimentSetupOutput);
    end CheckValveTest2;

    model ReliefValveTest

      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      Components.MotorsPumps.ConstantDisplacementPump idealPump(Dconst=1e-5)
                           annotation (Placement(transformation(extent={{-30,-10},
                {-10,10}}, rotation=0)));

      OpenHydraulics.Components.Valves.ReliefValve reliefValve(q_nom=0.01,
          dp_relief=1e5)
        annotation (Placement(transformation(extent={{20,10},{40,30}}, rotation=0)));
      OpenHydraulics.Components.Volumes.CircuitTank circuitTank(V_max=2000,
          V_init=1000)
        annotation (Placement(transformation(extent={{40,-30},{20,-10}}, rotation=
               0)));
      Modelica.Mechanics.Rotational.Sources.ConstantSpeed constantSpeed(
                                                                w_fixed=100,
          useSupport=false)
                         annotation (Placement(transformation(extent={{-60,-10},{
                -40,10}}, rotation=0)));
    equation
      connect(circuitTank.port_a, reliefValve.port_b) annotation (Line(points={{
              40,-20},{56,-20},{56,20},{40,20}}, color={255,0,0}));
      connect(constantSpeed.flange, idealPump.flange_a)
        annotation (Line(points={{-40,0},{-30,0}}, color={0,0,0}));
      connect(idealPump.portP, reliefValve.port_a) annotation (Line(points={{-20,
              10},{-20,20},{20,20}}, color={255,0,0}));
      connect(idealPump.portT, circuitTank.port_b) annotation (Line(points={{-20,
              -10},{-20,-20},{20,-20}}, color={255,0,0}));
      annotation (Diagram(graphics),
        experiment(StopTime=0.05, Tolerance=1e-006),
        experimentSetupOutput);
    end ReliefValveTest;

    model ThrottleValveTest
      extends OpenHydraulics.Interfaces.PartialFluidCircuit;

      Basic.OpenTank tank( p_const=1e6)
        annotation (Placement(transformation(extent={{-10,-40},{10,-20}},
              rotation=0)));
      Basic.OpenTank tank1
        annotation (Placement(transformation(extent={{50,-40},{70,-20}}, rotation=
               0)));
      Basic.GenericPressureLoss restriction(
        D_a=0.1,
        D_b=0.1,
        Re_turbulent=3000,
        use_Re=true)    annotation (Placement(
            transformation(extent={{20,10},{40,30}}, rotation=0)));
    equation
      connect(restriction.port_b, tank1.port)
        annotation (Line(points={{40,20},{60,20},{60,-20}}, color={255,0,0}));
      connect(restriction.port_a, tank.port) annotation (Line(points={{20,20},{0,
              20},{0,-20}}, color={255,0,0}));
      annotation (Diagram(graphics),
        experiment(StopTime=5),
        experimentSetupOutput);
    end ThrottleValveTest;

    model ThrottleValveTest2

      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      OpenHydraulics.Basic.VariableRestriction throttleValve(table=[0.0,0.0; 1,0.001],
          D_nom=0.05)
                annotation (Placement(transformation(extent={{6,30},{26,10}},
              rotation=0)));
      Modelica.Blocks.Sources.Sine sine(amplitude=0.5, offset=0.5)
        annotation (Placement(transformation(extent={{-18,40},{2,60}}, rotation=0)));
      Components.Volumes.Tank
                     tank(                      p_const=1e6)
        annotation (Placement(transformation(extent={{-10,-40},{10,-20}},
              rotation=0)));
      Components.Volumes.Tank
                     tank1
        annotation (Placement(transformation(extent={{50,-40},{70,-20}}, rotation=
               0)));
      Basic.GenericPressureLoss restriction(
        D_a=0.1,
        D_b=0.1,
        Re_turbulent=3000,
        use_Re=true)
             annotation (Placement(
            transformation(extent={{40,10},{60,30}}, rotation=0)));
    equation
      connect(sine.y, throttleValve.control) annotation (Line(points={{3,50},{16,
              50},{16,28}}, color={0,0,127}));
      connect(tank.port, throttleValve.port_a) annotation (Line(points={{0,-20},{
              0,20},{6,20}}, color={255,0,0}));
      connect(throttleValve.port_b, restriction.port_a)
        annotation (Line(points={{26,20},{40,20}}, color={255,0,0}));
      connect(restriction.port_b, tank1.port)
        annotation (Line(points={{60,20},{60,-20}}, color={255,0,0}));
      annotation (Diagram(graphics),
        experiment(StopTime=5),
        experimentSetupOutput);
    end ThrottleValveTest2;

    model DirectionalValveTestSimple

      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      OpenHydraulics.Components.Valves.ReliefValve reliefValve
        annotation (Placement(transformation(
            origin={-30,-16},
            extent={{-10,-10},{10,10}},
            rotation=270)));
      OpenHydraulics.Basic.OpenTank tank          annotation (Placement(transformation(extent={{-70,-60},
                {-50,-40}}, rotation=0)));
      OpenHydraulics.Components.Cylinders.DoubleActingCylinder doubleActingCylinder(
        boreDiameter=0.12,
        strokeLength=1,
        closedLength=1.2,
        rodDiameter=0.03,
        pistonMass=0.3,
        s_init=0.1,
        initType=Modelica.Mechanics.MultiBody.Types.Init.PositionVelocityAcceleration)
                    annotation (Placement(transformation(extent={{20,42},{40,62}},
              rotation=0)));

      Modelica.Mechanics.Translational.Components.Fixed fixed
        annotation (Placement(transformation(extent={{-10,32},{10,52}}, rotation=
                0)));
      Modelica.Mechanics.Translational.Components.Mass slidingMass
        annotation (Placement(transformation(extent={{60,42},{80,62}}, rotation=0)));
      Modelica.Blocks.Sources.Sine sine(amplitude=0.1)
        annotation (Placement(transformation(extent={{-34,-80},{-14,-60}},
              rotation=0)));
      OpenHydraulics.Basic.VariableRestriction throttleValve(D_nom=0.01)
        annotation (Placement(transformation(extent={{-8,0},{12,20}}, rotation=0)));
      OpenHydraulics.Basic.ConstVolumeSource source(q=0.001)
        annotation (Placement(transformation(extent={{-70,-20},{-50,0}}, rotation=
               0)));
      Components.Lines.NJunction j1(            n_ports=3)
        annotation (Placement(transformation(extent={{-40,0},{-20,20}}, rotation=
                0)));
      Components.Lines.NJunction j2(            n_ports=3)
        annotation (Placement(transformation(extent={{-40,-50},{-20,-30}},
              rotation=0)));
    equation
      connect(doubleActingCylinder.flange_a,fixed.flange)    annotation (Line(
            points={{20,52},{0,52},{0,42}}, color={0,127,0}));
      connect(doubleActingCylinder.flange_b, slidingMass.flange_a)
        annotation (Line(points={{40,52},{60,52}}, color={0,127,0}));
      connect(throttleValve.port_b, doubleActingCylinder.port_a) annotation (Line(
            points={{12,10},{22,10},{22,44}}, color={255,0,0}));
      connect(throttleValve.control, sine.y) annotation (Line(points={{2,2},{2,
              -70},{-13,-70}}, color={0,0,127}));
      connect(reliefValve.port_a, j1.port[1]) annotation (Line(points={{-30,-6},{
              -30,1.625},{-30,9.33333},{-30,9.33333}}, color={255,0,0}));
      connect(source.port, j1.port[2]) annotation (Line(points={{-60,0},{-60,10},
              {-30,10}}, color={255,0,0}));
      connect(throttleValve.port_a, j1.port[3]) annotation (Line(points={{-8,10},
              {-30,10},{-30,10.6667}}, color={255,0,0}));
      connect(tank.port, j2.port[1]) annotation (Line(points={{-60,-40},{-30,-40},
              {-30,-40.6667}}, color={255,0,0}));
      connect(reliefValve.port_b, j2.port[2]) annotation (Line(points={{-30,-26},
              {-30,-33.025},{-30,-40},{-30,-40}}, color={255,0,0}));
      connect(doubleActingCylinder.port_b, j2.port[3]) annotation (Line(points={{38,44},
              {38,-40},{-30,-40},{-30,-39.3333}},        color={255,0,0}));
      annotation (Diagram(graphics),
        experiment(StopTime=0.5),
        experimentSetupOutput);
    end DirectionalValveTestSimple;

    model RestrictionTestSimple

      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      OpenHydraulics.Basic.ConstPressureSource source(p_const=1e5)     annotation (Placement(transformation(extent={{
                10,-40},{-10,-20}}, rotation=0)));
      OpenHydraulics.Basic.VarPressureSource source1   annotation (Placement(transformation(
            origin={0,50},
            extent={{10,-10},{-10,10}},
            rotation=180)));
      Modelica.Blocks.Sources.Ramp ramp(
        height=5e7,
        offset=1e5,
        duration=900)
                    annotation (Placement(transformation(extent={{-60,40},{-40,60}},
              rotation=0)));
      Basic.LaminarRestriction laminarRestriction(L=3) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={0,10})));
    equation
      connect(ramp.y, source1.control) annotation (Line(points={{-39,50},{-39,50},
              {-18,50},{-10,50}},
            color={0,0,127}));
      connect(source1.port, laminarRestriction.port_b) annotation (Line(
          points={{-1.22465e-015,40},{6.12323e-016,40},{6.12323e-016,20}},
          color={255,0,0},
          smooth=Smooth.None));
      connect(laminarRestriction.port_a, source.port) annotation (Line(
          points={{-6.12323e-016,0},{0,0},{0,-20}},
          color={255,0,0},
          smooth=Smooth.None));
      annotation (
          Diagram(graphics),
        experiment(StopTime=1000),
        experimentSetupOutput);
    end RestrictionTestSimple;

    model VariableRestrictionTestSimple

      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      OpenHydraulics.Basic.VariableRestriction leakage
        annotation (Placement(transformation(
            origin={0,10},
            extent={{-10,10},{10,-10}},
            rotation=90)));
      OpenHydraulics.Basic.ConstPressureSource source(p_const=1e5)     annotation (Placement(transformation(extent={{
                10,-40},{-10,-20}}, rotation=0)));
      OpenHydraulics.Basic.VarPressureSource source1   annotation (Placement(transformation(
            origin={0,50},
            extent={{10,-10},{-10,10}},
            rotation=180)));
      Modelica.Blocks.Sources.Ramp ramp(
        height=5e7,
        offset=1e5,
        duration=900)
                    annotation (Placement(transformation(extent={{-60,40},{-40,60}},
              rotation=0)));
      Modelica.Blocks.Sources.RealExpression realExpression(y=1)
        annotation (Placement(transformation(extent={{-60,0},{-40,20}}, rotation=
                0)));
    equation
      connect(leakage.port_a, source.port) annotation (Line(points={{-6.12323e-016,
              0},{0,0},{0,-20}}, color={255,0,0}));
      connect(source1.port, leakage.port_b) annotation (Line(points={{-1.22465e-015,
              40},{6.12323e-016,40},{6.12323e-016,20}},                color={255,
              0,0}));
      connect(ramp.y, source1.control) annotation (Line(points={{-39,50},{-39,50},
              {-18,50},{-10,50}},
            color={0,0,127}));
      connect(realExpression.y, leakage.control) annotation (Line(points={{-39,10},
              {-39,10},{-24,10},{-8,10}},
                        color={0,0,127}));
      annotation (Diagram(graphics),
        experiment(StopTime=1000),
        experimentSetupOutput);
    end VariableRestrictionTestSimple;

    model ShuttleValveTest

      extends OpenHydraulics.Interfaces.PartialFluidCircuit;

      Components.Valves.ShuttleValve shuttleValve(timeConstant=0.01)        annotation (Placement(
            transformation(extent={{-10,10},{10,30}}, rotation=0)));
      Basic.ConstPressureSource tank2
        annotation (Placement(transformation(extent={{-10,-40},{10,-20}},
              rotation=0)));
      Basic.VarPressureSource tank1
        annotation (Placement(transformation(extent={{-40,-20},{-20,0}}, rotation=
               0)));
      Modelica.Blocks.Sources.Sine sine(amplitude=1e4, offset=101325)
        annotation (Placement(transformation(extent={{-70,-20},{-50,0}}, rotation=
               0)));
      Basic.VarPressureSource tank3
        annotation (Placement(transformation(extent={{40,-20},{20,0}}, rotation=0)));
      Modelica.Blocks.Sources.Sine sine1(amplitude=1e4,
        offset=101325,
        startTime=0.5)
        annotation (Placement(transformation(extent={{70,-20},{50,0}}, rotation=0)));
      OpenHydraulics.Basic.GenericPressureLoss genericPressureLoss(D_a=0.001,D_b=0.001)
        annotation (Placement(transformation(
            origin={0,-4},
            extent={{-10,-10},{10,10}},
            rotation=270)));
    equation
      connect(tank1.port, shuttleValve.PortA)
                                             annotation (Line(points={{-30,0},{
              -30,20},{-10,20}}, color={255,0,0}));
      connect(sine.y, tank1.control) annotation (Line(points={{-49,-10},{-40,-10}},
            color={0,0,127}));
      connect(tank3.port, shuttleValve.PortB)
                                             annotation (Line(points={{30,0},{30,
              20},{10,20}}, color={255,0,0}));
      connect(sine1.y, tank3.control)
        annotation (Line(points={{49,-10},{40,-10}}, color={0,0,127}));
      connect(genericPressureLoss.port_a, shuttleValve.PortC) annotation (Line(
            points={{1.83697e-015,6},{0,6},{0,12}}, color={255,0,0}));
      connect(genericPressureLoss.port_b, tank2.port) annotation (Line(points={{-1.83697e-015,
              -14},{0,-14},{0,-20}},               color={255,0,0}));
      annotation (Diagram(graphics),
        experiment(StopTime=5),
        experimentSetupOutput);
    end ShuttleValveTest;

    model ServoValveMeteringTest "test of Servovalve metering curve"
        extends OpenHydraulics.Interfaces.PartialFluidCircuit;

      OpenHydraulics.Basic.VariableRestriction VR30(
        table=[0,0; 10,0; 25,0; 30,0.03;40,0.12;50,0.25;60,0.36;70,0.52;80,0.68;90,0.84;
            100,1],
        max_contr=100,
        D_nom=D_nom,
        zeta_nom=zeta_nom,
        q_nom=q_nom/60/1000)           annotation (Placement(transformation(
              extent={{-10,8},{10,32}}, rotation=0)));
      Basic.ConstPressureSource constPressureSource(
        p_const=31e5)      annotation (Placement(transformation(extent={{-60,0},{
                -40,20}}, rotation=0)));
      Basic.ConstPressureSource constPressureSource1 annotation (Placement(transformation(
              extent={{50,0},{70,20}}, rotation=0)));
      Modelica.Blocks.Sources.Ramp ramp(height=100, duration=100)
        annotation (Placement(transformation(extent={{-40,-30},{-20,-10}},
              rotation=0)));
      Basic.ConstPressureSource constPressureSource2(
        p_const=11e5)      annotation (Placement(transformation(extent={{-60,60},
                {-40,80}}, rotation=0)));
      OpenHydraulics.Basic.VariableRestriction VR10(
        table=[0,0; 10,0; 25,0; 30,0.03;40,0.12;50,0.25;60,0.36;70,0.52;80,0.68;90,0.84;
            100,1],
        max_contr=100,
        D_nom=D_nom,
        zeta_nom=zeta_nom,
        q_nom=q_nom/60/1000)           annotation (Placement(transformation(
              extent={{-10,68},{10,92}}, rotation=0)));
      Basic.ConstPressureSource constPressureSource3(
        p_const=100e5)     annotation (Placement(transformation(extent={{-60,-80},
                {-40,-60}}, rotation=0)));
      OpenHydraulics.Basic.VariableRestriction VR100(
        table=[0,0; 10,0; 25,0; 30,0.03;40,0.12;50,0.25;60,0.36;70,0.52;80,0.68;90,0.84;
            100,1],
        max_contr=100,
        D_nom=D_nom,
        zeta_nom=zeta_nom,
        q_nom=q_nom/60/1000)           annotation (Placement(transformation(
              extent={{-10,-48},{10,-72}}, rotation=0)));
      OpenHydraulics.Components.Lines.NJunction j1(n_ports=4)
        annotation (Placement(transformation(extent={{28,10},{48,30}}, rotation=0)));
      parameter Real D_nom=0.001 "nominal diameter for all valves";
      parameter Real zeta_nom=2 "nominal loss factor for all valves";
      parameter Real q_nom=7 "nominal flow through all valves in L/sec";
    equation
      connect(constPressureSource.port, VR30.port_a)
        annotation (Line(points={{-50,20},{-10,20}}, color={255,0,0}));
      connect(ramp.y, VR30.control)                annotation (Line(points={{-19,
              -20},{0,-20},{0,10.4}}, color={0,0,127}));
      connect(constPressureSource2.port, VR10.port_a)
        annotation (Line(points={{-50,80},{-10,80}}, color={255,0,0}));
      connect(ramp.y, VR10.control) annotation (Line(points={{-19,-20},{20,-20},{
              20,44},{0,44},{0,70.4}}, color={0,0,127}));
      connect(constPressureSource3.port, VR100.port_a)
        annotation (Line(points={{-50,-60},{-10,-60}}, color={255,0,0}));
      connect(VR100.port_b, j1.port[1]) annotation (Line(points={{10,-60},{38,-60},
              {38,19.25}}, color={255,0,0}));
      connect(VR30.port_b, j1.port[2]) annotation (Line(points={{10,20},{38,20},{
              38,19.75}}, color={255,0,0}));
      connect(VR10.port_b, j1.port[3]) annotation (Line(points={{10,80},{38,80},{
              38,20.25}}, color={255,0,0}));
      connect(j1.port[4], constPressureSource1.port) annotation (Line(points={{38,
              20.75},{36,20.75},{36,20},{60,20}}, color={255,0,0}));
      connect(ramp.y, VR100.control) annotation (Line(points={{-19,-20},{0,-20},{
              0,-50.4}}, color={0,0,127}));
      annotation (Diagram(graphics),
        experiment(StopTime=100),
        experimentSetupOutput);
    end ServoValveMeteringTest;

    model TankTest

      extends OpenHydraulics.Interfaces.PartialFluidCircuit(redeclare
        OpenHydraulics.Fluids.GenericOilSimple   oil);

      Basic.LaminarRestriction laminarRestriction(L=3) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-10,20})));
      Components.Volumes.Tank tank(p_const=500000)
        annotation (Placement(transformation(extent={{-50,-20},{-30,0}})));
      Components.Volumes.Tank tank1(p_const=100000)
        annotation (Placement(transformation(extent={{10,-20},{30,0}})));
    equation
      connect(tank.port, laminarRestriction.port_b) annotation (Line(
          points={{-40,0},{-40,20},{-20,20}},
          color={255,0,0},
          smooth=Smooth.None));
      connect(laminarRestriction.port_a, tank1.port) annotation (Line(
          points={{0,20},{20,20},{20,0}},
          color={255,0,0},
          smooth=Smooth.None));
      annotation (
          Diagram(graphics),
        experiment(StopTime=1000),
        experimentSetupOutput);
    end TankTest;
      annotation (Documentation(info="<html>
<h4><font color=\"#008000\" size=5>Overview</font></h4>  
<p>The OpenHydraulics/DevelopmentTests package includes models used for unit testing during development.</p>
<p><b>
This package of the OpenHydraulics library is for testing the individual
components under development.  It will be removed from the final version
of the library.</b>
</p>

<h4><font color=\"#008000\" size=5>Licensing</font></h4>
<p>
The OpenHydraulics/DevelopmentTests package is licensed by Georgia Institute of Technology under the
<a href=\"http://www.modelica.org/licenses/ModelicaLicense2\"><b>Modelica License 2</b></a>.</p> 
<p><b>Copyright &copy; 2008-2013, Georgia Insitute of Technology</b>
</p>
<p>
This Modelica package is free software and the use is completely at your own risk; 
it can be redistributed and/or modified under the terms of the Modelica License 2. 
For license conditions (including the disclaimer of warranty) see 
<a href=\"modelica://Hydraulics.UsersGuide.ModelicaLicense2\">Hydraulics.UsersGuide.ModelicaLicense2</a> or visit 
<a href=\"http://www.modelica.org/licenses/ModelicaLicense2\">http://www.modelica.org/licenses/ModelicaLicense2</a>.
</p>
</html>"));
  end DevelopmentTests;


  package Interfaces "Interface definitions for the Hydraulics library"
      extends Modelica.Icons.InterfacesPackage;

    connector FluidPort
    "Interface for quasi one-dimensional fluid flow in a piping network (incompressible or compressible, one or more phases, one or more substances)"

    SI.AbsolutePressure p(stateSelect = StateSelect.prefer)
      "Pressure in the connection point";
    flow SI.MassFlowRate m_flow(start=0)
      "Mass flow rate from the connection point into the component";

    annotation (defaultComponentName="port",
        Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
              -100},{100,100}}), graphics={
          Ellipse(
            extent={{-40,40},{40,-40}},
            lineColor={255,0,0},
            fillColor={255,0,0},
            fillPattern=FillPattern.Solid),
          Ellipse(
            extent={{-40,40},{40,-40}},
            lineColor={0,0,0},
            fillColor={255,0,0},
            fillPattern=FillPattern.Solid),
          Text(
            extent={{-160,110},{40,50}},
            lineColor={255,0,0},
            textString="%name")}),
         Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
              -100},{100,100}}), graphics={Ellipse(
            extent={{-100,100},{100,-100}},
            lineColor={255,0,0},
            fillColor={255,0,0},
            fillPattern=FillPattern.Solid), Ellipse(
            extent={{-100,100},{100,-100}},
            lineColor={0,0,0},
            fillColor={255,0,0},
            fillPattern=FillPattern.Solid)}));
    end FluidPort;

    partial model PartialFluidComponent
    "Base model for any component involving fluid"

      outer OpenHydraulics.Fluids.BaseClasses.PartialFluid oil
      "This model must be defined in each circuit; the type must be a subtype of PartialFluid";

      parameter SI.AbsolutePressure p_init = environment.p_ambient
      "Initial temperature of the component"   annotation (Dialog(tab="Initialization",group="Fluid"));

  protected
      outer OpenHydraulics.Circuits.Environment environment;

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics));
    end PartialFluidComponent;

    partial model PartialFluidCircuit
    "Base model for any component involving fluid"

      inner replaceable OpenHydraulics.Fluids.GenericOilSimple oil "Oil model"
                    annotation(choicesAllMatching=true,Placement(transformation(extent={{-98,78},
                {-78,98}})));

      inner OpenHydraulics.Circuits.Environment environment
                                    annotation (Placement(transformation(extent={
                {-100,-100},{-80,-80}}, rotation=0)));

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics));
    end PartialFluidCircuit;

    partial class VariantLibrary
    "Icon for a library that contains several variants of one component"

      annotation (             Icon(coordinateSystem(
            preserveAspectRatio=false,
            extent={{-100,-100},{100,100}},
            grid={1,1}), graphics={
            Rectangle(
              extent={{-40,-40},{100,100}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-70,-70},{70,70}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-100,-100},{40,40}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-125,158},{115,103}},
              lineColor={255,0,0},
              textString="%name")}));
    end VariantLibrary;

    partial model HorizontalTwoPort "Two horizontally oriented fluid ports"
      // include the base characteristics for ANY fluid two-port
      extends OpenHydraulics.Interfaces.PartialFluidComponent;

      // the main variables (most commonly investigated during simulation
      SI.VolumeFlowRate q_flow_a = port_a.m_flow/oil.density(p_a);
      SI.VolumeFlowRate q_flow_b = port_b.m_flow/oil.density(p_b);

      // the variables
      SI.Pressure dp = port_a.p - port_b.p "Pressure drop (negative for pumps)";

      // the media properties
      SI.AbsolutePressure p_a(start=p_init) "Oil properties at the inlet";
      SI.AbsolutePressure p_b(start=p_init) "Oil properties at the inlet";

      // the connectors
      OpenHydraulics.Interfaces.FluidPort port_a(p(start=p_init))
        annotation (Placement(transformation(extent={{-110,-10},{-90,10}},
              rotation=0)));
      OpenHydraulics.Interfaces.FluidPort port_b(p(start=p_init))
        annotation (Placement(transformation(extent={{110,-10},{90,10}}, rotation=
               0)));
    equation
      // set the fluid properties (set two state variable for each instance of medium)
      p_a = port_a.p;
      p_b = port_b.p;

    end HorizontalTwoPort;

    partial model OnePortNoFlow
      extends OpenHydraulics.Interfaces.PartialFluidComponent;

      // the ports
      OpenHydraulics.Interfaces.FluidPort port_a
        annotation (Placement(transformation(extent={{-10,-110},{10,-90}},
              rotation=0)));

    equation
      // balance equations
      port_a.m_flow = 0;

    end OnePortNoFlow;

    partial model NPort "Two horizontally oriented fluid ports"
      // include the base characteristics for ANY fluid two-port
      extends OpenHydraulics.Interfaces.PartialFluidComponent;

      outer OpenHydraulics.Fluids.BaseClasses.PartialFluid oil
      "This model must be defined in each circuit; the type must be a subtype of PartialFluid";

      // the connectors
      parameter Integer n_ports(min=1) "Number of ports (min=1)"
        annotation(Dialog(tab="Sizing"));

      OpenHydraulics.Interfaces.FluidPort port[n_ports](m_flow(each start=0), p(
            each start=p_init))
          annotation (Placement(transformation(extent={{-10,-11},{10,10}},
              rotation=0)));

            // the media properties
      SI.AbsolutePressure p[n_ports](each start=p_init)
      "Oil properties at each port";

    equation
      for i in 1:n_ports loop
        // set the fluid properties (set two state variable for each instance of medium)
        p[i] = port[i].p;
      end for;
    end NPort;

    partial model VerticalTwoPort "Two vertically oriented fluid ports"

      // include the base characteristics for ANY fluid two-port
      extends OpenHydraulics.Interfaces.PartialFluidComponent;

      // the main variables (most commonly investigated during simulation
      SI.VolumeFlowRate q_flow_a = port_a.m_flow/oil.density(p_a);
      SI.VolumeFlowRate q_flow_b = port_b.m_flow/oil.density(p_b);

      // the variables
      SI.Pressure dp = port_a.p - port_b.p "Pressure drop (negative for pumps)";

      // the media properties
      SI.AbsolutePressure p_a(start = p_init) "Oil properties at the inlet";
      SI.AbsolutePressure p_b(start = p_init) "Oil properties at the inlet";

      // the connectors
      OpenHydraulics.Interfaces.FluidPort port_a(p(start=p_init))
        annotation (Placement(transformation(extent={{10,-110},{-10,-90}},
              rotation=0)));
      OpenHydraulics.Interfaces.FluidPort port_b(p(start=p_init))
        annotation (Placement(transformation(extent={{-10,90},{10,110}}, rotation=
               0)));
    equation
      // set the fluid properties (set two state variable for each instance of medium)
      p_a = port_a.p;
      p_b = port_b.p;
    end VerticalTwoPort;
        annotation (Documentation(info="<html>
<h4><font color=\"#008000\" size=5>Overview</font></h4>  
<p>The OpenHydraulics/Interfaces package includes interface definitions for the Hydraulics library.</p>
<h4><font color=\"#008000\" size=5>Licensing</font></h4>
<p>
The OpenHydraulics/Interfaces package is licensed by Georgia Institute of Technology under the
<a href=\"http://www.modelica.org/licenses/ModelicaLicense2\"><b>Modelica License 2</b></a>.</p> 
<p><b>Copyright &copy; 2008-2013, Georgia Insitute of Technology</b>
</p>
<p>
This Modelica package is free software and the use is completely at your own risk; 
it can be redistributed and/or modified under the terms of the Modelica License 2. 
For license conditions (including the disclaimer of warranty) see 
<a href=\"modelica://Hydraulics.UsersGuide.ModelicaLicense2\">Hydraulics.UsersGuide.ModelicaLicense2</a> or visit 
<a href=\"http://www.modelica.org/licenses/ModelicaLicense2\">http://www.modelica.org/licenses/ModelicaLicense2</a>.
</p>
</html>
"));
  end Interfaces;


  package Types "Type definitions that are not part of SIunits"
    extends Modelica.Icons.Package;

    type HydraulicConductance =Real (
        final quantity="HydraulicConductance",
        final unit="kg/(s.Pa)");
    type HydraulicResistance =Real (
        final quantity="HydraulicResistance",
        final unit="Pa.s/kg");
    type FlowDirection = enumeration(
      Unidirectional "Fluid flows only from port_a to port_b",
      Bidirectional "No restrictions on fluid flow (flow reversal possible)")
    "Initialization of flow direction for fluid power components";
    type AccInit = enumeration(
      Free "No hard initialization",
      Pressure "Pressure inside accumulator is fixed at initialization",
      Volume "Fluid volume inside accumulator is fixed at initialization")
    "Enumeration defining the types of initialization available for accumulators";
        annotation (Documentation(info="<html>
<h4><font color=\"#008000\" size=5>Overview</font></h4>  
<p>The OpenHydraulics/Types package includes type definitions that are not part of SIunits.</p>
<h4><font color=\"#008000\" size=5>Licensing</font></h4>
<p>
The OpenHydraulics/Types package is licensed by Georgia Institute of Technology under the
<a href=\"http://www.modelica.org/licenses/ModelicaLicense2\"><b>Modelica License 2</b></a>.</p> 
<p><b>Copyright &copy; 2008-2013, Georgia Insitute of Technology</b>
</p>
<p>
This Modelica package is free software and the use is completely at your own risk; 
it can be redistributed and/or modified under the terms of the Modelica License 2. 
For license conditions (including the disclaimer of warranty) see 
<a href=\"modelica://Hydraulics.UsersGuide.ModelicaLicense2\">Hydraulics.UsersGuide.ModelicaLicense2</a> or visit 
<a href=\"http://www.modelica.org/licenses/ModelicaLicense2\">http://www.modelica.org/licenses/ModelicaLicense2</a>.
</p>
</html>
"));
  end Types;


  package Utilities
  "Utility models to construct fluid components (should not be used directly) "
    extends Modelica.Icons.Library;

    function regPow
    "Anti-symmetric power approximation with non-zero derivative in the origin"
      extends Modelica.Icons.Function;

      input Real x;
      input Real a;
      input Real delta=0.01 "Range of significant deviation from x^a*sgn(x)";
      output Real y;
    algorithm
      y := x*(x*x+delta*delta)^((a-1)/2);

      annotation(Documentation(info="<html>
This function approximates abs(x)^a*sign(x), such that the derivative is positive, finite and smooth in x=0. 
</p>
<p>
<table border=1 cellspacing=0 cellpadding=2> 
<tr><th>Function</th><th>Approximation</th><th>Range</th></tr>
<tr><td>y = regPow(x)</td><td>y ~= abs(x)^a*sgn(x)</td><td>abs(x) &gt;&gt delta</td></tr>
<tr><td>y = regPow(x)</td><td>y ~= x*delta^(a-1)</td><td>abs(x) &lt;&lt  delta</td></tr>
</table>
</html>", revisions="<html>
<ul>
<li><i>15 Mar 2005</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco Casella</a>:<br>
       Created. </li>
</ul>
</html>"),      Documentation(info="<html>
This function approximates sqrt(x)*sign(x), such that the derivative is finite and smooth in x=0. 
</p>
<p>
<table border=1 cellspacing=0 cellpadding=2> 
<tr><th>Function</th><th>Approximation</th><th>Range</th></tr>
<tr><td>y = sqrtReg(x)</td><td>y ~= sqrt(abs(x))*sign(x)</td><td>abs(x) &gt;&gt delta</td></tr>
<tr><td>y = sqrtReg(x)</td><td>y ~= x/delta</td><td>abs(x) &lt;&lt  delta</td></tr>
</table>
<p>
With the default value of delta=0.01, the difference between sqrt(x) and sqrtReg(x) is 0.5% around x=0.1 and 0.005% around x=1.
</p> 
</html>", revisions="<html>
<ul>
<li><i>15 Mar 2005</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco Casella</a>:<br>
       Created. </li>
</ul>
</html>"));
    end regPow;

    function regRoot2
    "Anti-symmetric approximation of square root with discontinuous factor so that the first derivative is finite and continuous"
      extends Modelica.Icons.Function;

      input Real x "abszissa value";
      input Real x_small(min=0)=0.01
      "approximation of function for |x| <= x_small";
      input Real k1(min=0)=1 "y = if x>=0 then sqrt(k1*x) else -sqrt(k2*|x|)";
      input Real k2(min=0)=1 "y = if x>=0 then sqrt(k1*x) else -sqrt(k2*|x|)";
      input Boolean use_yd0 = false "= true, if yd0 shall be used";
      input Real yd0(min=0)=1 "Desired derivative at x=0: dy/dx = yd0";
      output Real y "ordinate value";
  protected
      encapsulated function regRoot2_utility
      "Interpolating with two 3-order polynomials with a prescribed derivative at x=0"
        import OpenHydraulics.Utilities.evaluatePoly3_derivativeAtZero;
         input Real x;
         input Real x1 "approximation of function abs(x) < x1";
         input Real k1
        "y = if x>=0 then sqrt(k1*x) else -sqrt(k2*|x|); k1 >= k2";
         input Real k2 "y = if x>=0 then sqrt(k1*x) else -sqrt(k2*|x|))";
         input Boolean use_yd0 "= true, if yd0 shall be used";
         input Real yd0(min=0) "Desired derivative at x=0: dy/dx = yd0";
         output Real y;
    protected
         Real x2;
         Real xsqrt1;
         Real xsqrt2;
         Real y1;
         Real y2;
         Real y1d;
         Real y2d;
         Real w;
         Real y0d;
         Real w1;
         Real w2;
      algorithm
        // first check for the degenerate case of k1=k2=0
        if k1 == 0 then
          y:= 0;
        else
         x2 :=-x1*(k2/k1);
         //x2 :=-x1;
         if x <= x2 then
            y := -sqrt(k2*abs(x));
         else
            y1 :=sqrt(k1*x1);
            y2 :=-sqrt(k2*abs(x2));
            y1d :=sqrt(k1/x1)/2;
            y2d :=sqrt(k2/abs(x2))/2;

            if use_yd0 then
               y0d :=yd0;
            else
               /* Determine derivative, such that first and second derivative
              of left and right polynomial are identical at x=0:
           _
           Basic equations:
              y_right = a1*(x/x1) + a2*(x/x1)^2 + a3*(x/x1)^3
              y_left  = b1*(x/x2) + b2*(x/x2)^2 + b3*(x/x2)^3
              yd_right*x1 = a1 + 2*a2*(x/x1) + 3*a3*(x/x1)^2
              yd_left *x2 = b1 + 2*b2*(x/x2) + 3*b3*(x/x2)^2
              ydd_right*x1^2 = 2*a2 + 6*a3*(x/x1)
              ydd_left *x2^2 = 2*b2 + 6*b3*(x/x2)
           _
           Conditions (6 equations for 6 unknowns):
                     y1 = a1 + a2 + a3
                     y2 = b1 + b2 + b3
                 y1d*x1 = a1 + 2*a2 + 3*a3
                 y2d*x2 = b1 + 2*b2 + 3*b3
                    y0d = a1/x1 = b1/x2
                   y0dd = 2*a2/x1^2 = 2*b2/x2^2
           _
           Derived equations:
              b1 = a1*x2/x1
              b2 = a2*(x2/x1)^2
              b3 = y2 - b1 - b2
                 = y2 - a1*(x2/x1) - a2*(x2/x1)^2
              a3 = y1 - a1 - a2
           _
           Remaining equations
              y1d*x1 = a1 + 2*a2 + 3*(y1 - a1 - a2)
                     = 3*y1 - 2*a1 - a2
              y2d*x2 = a1*(x2/x1) + 2*a2*(x2/x1)^2 +
                       3*(y2 - a1*(x2/x1) - a2*(x2/x1)^2)
                     = 3*y2 - 2*a1*(x2/x1) - a2*(x2/x1)^2
              y0d    = a1/x1
           _
           Solving these equations results in y0d below
           (note, the denominator "(1-w)" is always non-zero, because w is negative) 
           */
               w :=x2/x1;
               y0d := ( (3*y2 - x2*y2d)/w - (3*y1 - x1*y1d)*w) /(2*x1*(1 - w));
            end if;

            /* Modify derivative y0d, such that the polynomial is 
           monotonically increasing. A sufficient condition is
             0 <= y0d <= sqrt(8.75*k_i/|x_i|)
        */
            w1 :=sqrt(8.75*k1/x1);
            w2 :=sqrt(8.75*k2/abs(x2));
            y0d :=min(y0d, 0.9*min(w1, w2));

            /* Perform interpolation in scaled polynomial:
           y_new = y/y1
           x_new = x/x1
        */
            y := y1*(if x >= 0 then evaluatePoly3_derivativeAtZero(x/x1,1,1,y1d*x1/y1,y0d*x1/y1) else
                                    evaluatePoly3_derivativeAtZero(x/x1,x2/x1,y2/y1,y2d*x1/y1,y0d*x1/y1));
         end if;
        end if;
         annotation(smoothOrder=2);
      end regRoot2_utility;
    algorithm
      y := smooth(2,if x >= x_small then sqrt(k1*x) else
                    if x <= -x_small then -sqrt(k2*abs(x)) else
                    if k1 >= k2 then regRoot2_utility(x,x_small,k1,k2,use_yd0,yd0) else
                                    -regRoot2_utility(-x,x_small,k2,k1,use_yd0,yd0));
      annotation(smoothOrder=2, Documentation(info="<html>
<p>
Approximates the function
</p>
<pre>
   y = <b>if</b> x &ge; 0 <b>then</b> <b>sqrt</b>(k1*x) <b>else</b> -<b>sqrt</b>(k2*<b>abs</b>(x)), with k1, k2 > 0
</pre>
<p>
in such a way that within the region -x_small &le; x &le; x_small, 
the function is described by two polynomials of third order
(one in the region -x_small .. 0 and one within the region 0 .. x_small)
such that 
</p>
<ul>
<li> The derivative at x=0 is finite. </li>
<li> The overall function is continuous with a
     continuous first derivative everywhere.</li>
<li> If parameter use_yd0 = <b>false</b>, the two polynomials
     are constructed such that the second derivatives at x=0
     are identical. If use_yd0 = <b>true</b>, the derivative
     at x=0 is explicitly provided via the additional argument
     yd0. If necessary, the derivative yd0 is automatically 
     reduced in order that the polynomials are strict monotonically  
     increasing <i>[Fritsch and Carlson, 1980]</i>.</li>
</ul>
<p>
Typical screenshots for two different configurations
are shown below. The first one with k1=k2=1:
</p>
<p>
<img src=\"../Images/Components/regRoot2_a.png\">
</p>
<p>
and the second one with k1=1 and k2=3:
</p>
<p>
<img src=\"../Images/Components/regRoot2_b.png\">
</p>
 
<p>
The (smooth) derivative of the function with
k1=1, k2=3 is shown in the next figure:
<p>
<img src=\"../Images/Components/regRoot2_c.png\">
</p>
 
<p>
<b>Literature</b>
</p>
 
<dl>
<dt> Fritsch F.N. and Carlson R.E. (1980):</dt>
<dd> <b>Monotone piecewise cubic interpolation</b>.
     SIAM J. Numerc. Anal., Vol. 17, No. 2, April 1980, pp. 238-246</dd>
</dl>
</html>",   revisions="<html>
<ul>
<li><i>Nov., 2005</i>
    by <a href=\"mailto:Martin.Otter@DLR.de\">Martin Otter</a>:<br>
    Designed and implementated.</li>
</ul>
</html>"));
    end regRoot2;

    function regSquare2
    "Anti-symmetric approximation of square with discontinuous factor so that the first derivative is non-zero and is continuous"
      extends Modelica.Icons.Function;

      input Real x "abscissa value";
      input Real x_small(min=0)=0.01
      "approximation of function for |x| <= x_small";
      input Real k1(min=0)=1 "y = (if x>=0 then k1 else k2)*x*|x|";
      input Real k2(min=0)=1 "y = (if x>=0 then k1 else k2)*x*|x|";
      input Boolean use_yd0 = false "= true, if yd0 shall be used";
      input Real yd0(min=0)=1 "Desired derivative at x=0: dy/dx = yd0";
      output Real y "ordinate value";
  protected
      encapsulated function regSquare2_utility
      "Interpolating with two 3-order polynomials with a prescribed derivative at x=0"
        import OpenHydraulics.Utilities.evaluatePoly3_derivativeAtZero;
         input Real x;
         input Real x1 "approximation of function abs(x) < x1";
         input Real k1 "y = (if x>=0 then k1 else -k2)*x*|x|; k1 >= k2";
         input Real k2 "y = (if x>=0 then k1 else -k2)*x*|x|";
         input Boolean use_yd0 = false "= true, if yd0 shall be used";
         input Real yd0(min=0)=1 "Desired derivative at x=0: dy/dx = yd0";
         output Real y;
    protected
         Real x2;
         Real y1;
         Real y2;
         Real y1d;
         Real y2d;
         Real w;
         Real w1;
         Real w2;
         Real y0d;
      algorithm
         // x2 :=-x1*(k2/k1)^2;
         x2 := -x1;
         if x <= x2 then
            y := -k2*x^2;
         else
             y1 := k1*x1^2;
             y2 :=-k2*x2^2;
            y1d := k1*2*x1;
            y2d :=-k2*2*x2;
            if use_yd0 then
               y0d :=yd0;
            else
               /* Determine derivative, such that first and second derivative
              of left and right polynomial are identical at x=0:
              see derivation in function regRoot2
           */
               w :=x2/x1;
               y0d := ( (3*y2 - x2*y2d)/w - (3*y1 - x1*y1d)*w) /(2*x1*(1 - w));
            end if;

            /* Modify derivative y0d, such that the polynomial is 
           monotonically increasing. A sufficient condition is
             0 <= y0d <= sqrt(5)*k_i*|x_i|
        */
            w1 :=sqrt(5)*k1*x1;
            w2 :=sqrt(5)*k2*abs(x2);
            y0d :=min(y0d, 0.9*min(w1, w2));

            y := if x >= 0 then evaluatePoly3_derivativeAtZero(x,x1,y1,y1d,y0d) else
                                evaluatePoly3_derivativeAtZero(x,x2,y2,y2d,y0d);
         end if;
         annotation(smoothOrder=2);
      end regSquare2_utility;
    algorithm
      y := smooth(2,if x >= x_small then k1*x^2 else
                    if x <= -x_small then -k2*x^2 else
                    if k1 >= k2 then regSquare2_utility(x,x_small,k1,k2,use_yd0,yd0) else
                                    -regSquare2_utility(-x,x_small,k2,k1,use_yd0,yd0));
      annotation(smoothOrder=2, Documentation(info="<html>
<p>
Approximates the function
</p>
<pre>
   y = <b>if</b> x &ge; 0 <b>then</b> k1*x*x <b>else</b> -k2*x*x, with k1, k2 > 0
</pre>
<p>
in such a way that within the region -x_small &le; x &le; x_small, 
the function is described by two polynomials of third order
(one in the region -x_small .. 0 and one within the region 0 .. x_small)
such that
</p>
 
<ul>
<li> The derivative at x=0 is non-zero (in order that the
     inverse of the function does not have an infinite derivative). </li>
<li> The overall function is continuous with a
     continuous first derivative everywhere.</li>
<li> If parameter use_yd0 = <b>false</b>, the two polynomials
     are constructed such that the second derivatives at x=0
     are identical. If use_yd0 = <b>true</b>, the derivative
     at x=0 is explicitly provided via the additional argument
     yd0. If necessary, the derivative yd0 is automatically 
     reduced in order that the polynomials are strict monotonically  
     increasing <i>[Fritsch and Carlson, 1980]</i>.</li>
</ul>
</ul>
<p>
A typical screenshot for k1=1, k2=3 is shown in the next figure:
</p>
<p>
<img src=\"../Images/Components/regSquare2_b.png\">
</p>
 
<p>
The (smooth, non-zero) derivative of the function with
k1=1, k2=3 is shown in the next figure:
</p>
 
<p>
<img src=\"../Images/Components/regSquare2_c.png\">
</p>
 
<p>
<b>Literature</b>
</p>
 
<dl>
<dt> Fritsch F.N. and Carlson R.E. (1980):</dt>
<dd> <b>Monotone piecewise cubic interpolation</b>.
     SIAM J. Numerc. Anal., Vol. 17, No. 2, April 1980, pp. 238-246</dd>
</dl>
</html>",   revisions="<html>
<ul>
<li><i>Nov., 2005</i>
    by <a href=\"mailto:Martin.Otter@DLR.de\">Martin Otter</a>:<br>
    Designed and implementated.</li>
</ul>
</html>"));
    end regSquare2;

    function evaluatePoly3_derivativeAtZero
    "Evaluate polynomial of order 3 that passes the origin with a predefined derivative"
      extends Modelica.Icons.Function;

      input Real x "Value for which polynomial shall be evaluated";
      input Real x1 "Abscissa value";
      input Real y1 "y1=f(x1)";
      input Real y1d "First derivative at y1";
      input Real y0d "First derivative at f(x=0)";
      output Real y;
  protected
      Real a1;
      Real a2;
      Real a3;
      Real xx;
    algorithm
      a1 := x1*y0d;
      a2 := 3*y1 - x1*y1d - 2*a1;
      a3 := y1 - a2 - a1;
      xx := x/x1;
      y  := xx*(a1 + xx*(a2 + xx*a3));
      annotation(smoothOrder=3);
    end evaluatePoly3_derivativeAtZero;
    annotation (Documentation(info="<html>
 
</html>"));
  end Utilities;


  annotation (
  version="1.0",
  versionDate="2013-02-19",
  preferedView="info",
  Settings(NewStateSelection=true),
  uses(Modelica(version="3.2")),
  classOrder={"UsersGuide","Examples","Environment", "BasicModels","Components","Circuits","Fluids","Icons",
      "TemporaryTests", "*"});
end OpenHydraulics;
